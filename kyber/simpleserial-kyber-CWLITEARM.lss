
simpleserial-kyber-CWLITEARM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d00  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002fc  08004e90  08004e90  00005e90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800518c  0800518c  0000707c  2**0
                  CONTENTS
  4 .ARM          00000008  0800518c  0800518c  0000618c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005194  08005194  0000707c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005194  08005194  00006194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005198  08005198  00006198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800519c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000028a4  2000007c  08005218  0000707c  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  20002920  08005218  00007920  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000707c  2**0
                  CONTENTS, READONLY
 12 .comment      00000026  00000000  00000000  000070a6  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b399  00000000  00000000  000070cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000063a1  00000000  00000000  00022465  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00007a22  00000000  00000000  00028806  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000a30  00000000  00000000  00030228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000868  00000000  00000000  00030c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ab7b  00000000  00000000  000314c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00002fbc  00000000  00000000  0003c03b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001988  00000000  00000000  0003eff8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000144  00000000  00000000  00040980  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000035  00000000  00000000  00040ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_loclists 00002e4d  00000000  00000000  00040af9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_rnglists 0000028c  00000000  00000000  00043946  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_line_str 0000009f  00000000  00000000  00043bd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <deregister_tm_clones>:
 8000190:	4803      	ldr	r0, [pc, #12]	@ (80001a0 <deregister_tm_clones+0x10>)
 8000192:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <deregister_tm_clones+0x14>)
 8000194:	4283      	cmp	r3, r0
 8000196:	d002      	beq.n	800019e <deregister_tm_clones+0xe>
 8000198:	4b03      	ldr	r3, [pc, #12]	@ (80001a8 <deregister_tm_clones+0x18>)
 800019a:	b103      	cbz	r3, 800019e <deregister_tm_clones+0xe>
 800019c:	4718      	bx	r3
 800019e:	4770      	bx	lr
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	2000007c 	.word	0x2000007c
 80001a8:	00000000 	.word	0x00000000

080001ac <register_tm_clones>:
 80001ac:	4805      	ldr	r0, [pc, #20]	@ (80001c4 <register_tm_clones+0x18>)
 80001ae:	4b06      	ldr	r3, [pc, #24]	@ (80001c8 <register_tm_clones+0x1c>)
 80001b0:	1a1b      	subs	r3, r3, r0
 80001b2:	0fd9      	lsrs	r1, r3, #31
 80001b4:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 80001b8:	1049      	asrs	r1, r1, #1
 80001ba:	d002      	beq.n	80001c2 <register_tm_clones+0x16>
 80001bc:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <register_tm_clones+0x20>)
 80001be:	b103      	cbz	r3, 80001c2 <register_tm_clones+0x16>
 80001c0:	4718      	bx	r3
 80001c2:	4770      	bx	lr
 80001c4:	2000007c 	.word	0x2000007c
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	00000000 	.word	0x00000000

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c06      	ldr	r4, [pc, #24]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b943      	cbnz	r3, 80001ea <__do_global_dtors_aux+0x1a>
 80001d8:	f7ff ffda 	bl	8000190 <deregister_tm_clones>
 80001dc:	4b04      	ldr	r3, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	b113      	cbz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001e0:	4804      	ldr	r0, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x24>)
 80001e2:	f3af 8000 	nop.w
 80001e6:	2301      	movs	r3, #1
 80001e8:	7023      	strb	r3, [r4, #0]
 80001ea:	bd10      	pop	{r4, pc}
 80001ec:	2000007c 	.word	0x2000007c
 80001f0:	00000000 	.word	0x00000000
 80001f4:	08004e78 	.word	0x08004e78

080001f8 <frame_dummy>:
 80001f8:	b508      	push	{r3, lr}
 80001fa:	4b04      	ldr	r3, [pc, #16]	@ (800020c <frame_dummy+0x14>)
 80001fc:	b11b      	cbz	r3, 8000206 <frame_dummy+0xe>
 80001fe:	4904      	ldr	r1, [pc, #16]	@ (8000210 <frame_dummy+0x18>)
 8000200:	4804      	ldr	r0, [pc, #16]	@ (8000214 <frame_dummy+0x1c>)
 8000202:	f3af 8000 	nop.w
 8000206:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800020a:	e7cf      	b.n	80001ac <register_tm_clones>
 800020c:	00000000 	.word	0x00000000
 8000210:	20000080 	.word	0x20000080
 8000214:	08004e78 	.word	0x08004e78

08000218 <srand>:
 8000218:	b538      	push	{r3, r4, r5, lr}
 800021a:	4b12      	ldr	r3, [pc, #72]	@ (8000264 <srand+0x4c>)
 800021c:	681d      	ldr	r5, [r3, #0]
 800021e:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8000220:	4604      	mov	r4, r0
 8000222:	b11a      	cbz	r2, 800022c <srand+0x14>
 8000224:	2300      	movs	r3, #0
 8000226:	e9c2 4304 	strd	r4, r3, [r2, #16]
 800022a:	bd38      	pop	{r3, r4, r5, pc}
 800022c:	2018      	movs	r0, #24
 800022e:	f000 f9b3 	bl	8000598 <malloc>
 8000232:	4602      	mov	r2, r0
 8000234:	6328      	str	r0, [r5, #48]	@ 0x30
 8000236:	b178      	cbz	r0, 8000258 <srand+0x40>
 8000238:	2001      	movs	r0, #1
 800023a:	2100      	movs	r1, #0
 800023c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8000240:	4b09      	ldr	r3, [pc, #36]	@ (8000268 <srand+0x50>)
 8000242:	480a      	ldr	r0, [pc, #40]	@ (800026c <srand+0x54>)
 8000244:	490a      	ldr	r1, [pc, #40]	@ (8000270 <srand+0x58>)
 8000246:	6091      	str	r1, [r2, #8]
 8000248:	e9c2 0300 	strd	r0, r3, [r2]
 800024c:	230b      	movs	r3, #11
 800024e:	8193      	strh	r3, [r2, #12]
 8000250:	2300      	movs	r3, #0
 8000252:	e9c2 4304 	strd	r4, r3, [r2, #16]
 8000256:	bd38      	pop	{r3, r4, r5, pc}
 8000258:	4b06      	ldr	r3, [pc, #24]	@ (8000274 <srand+0x5c>)
 800025a:	4807      	ldr	r0, [pc, #28]	@ (8000278 <srand+0x60>)
 800025c:	2146      	movs	r1, #70	@ 0x46
 800025e:	f000 f853 	bl	8000308 <__assert_func>
 8000262:	bf00      	nop
 8000264:	20000020 	.word	0x20000020
 8000268:	e66d1234 	.word	0xe66d1234
 800026c:	abcd330e 	.word	0xabcd330e
 8000270:	0005deec 	.word	0x0005deec
 8000274:	080050cc 	.word	0x080050cc
 8000278:	080050e4 	.word	0x080050e4

0800027c <rand>:
 800027c:	b538      	push	{r3, r4, r5, lr}
 800027e:	4b19      	ldr	r3, [pc, #100]	@ (80002e4 <rand+0x68>)
 8000280:	681c      	ldr	r4, [r3, #0]
 8000282:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8000284:	b18a      	cbz	r2, 80002aa <rand+0x2e>
 8000286:	6913      	ldr	r3, [r2, #16]
 8000288:	4917      	ldr	r1, [pc, #92]	@ (80002e8 <rand+0x6c>)
 800028a:	6954      	ldr	r4, [r2, #20]
 800028c:	4817      	ldr	r0, [pc, #92]	@ (80002ec <rand+0x70>)
 800028e:	fb03 f101 	mul.w	r1, r3, r1
 8000292:	fb00 1104 	mla	r1, r0, r4, r1
 8000296:	fba3 3000 	umull	r3, r0, r3, r0
 800029a:	3301      	adds	r3, #1
 800029c:	eb41 0100 	adc.w	r1, r1, r0
 80002a0:	e9c2 3104 	strd	r3, r1, [r2, #16]
 80002a4:	f021 4000 	bic.w	r0, r1, #2147483648	@ 0x80000000
 80002a8:	bd38      	pop	{r3, r4, r5, pc}
 80002aa:	2018      	movs	r0, #24
 80002ac:	f000 f974 	bl	8000598 <malloc>
 80002b0:	4602      	mov	r2, r0
 80002b2:	6320      	str	r0, [r4, #48]	@ 0x30
 80002b4:	b188      	cbz	r0, 80002da <rand+0x5e>
 80002b6:	2401      	movs	r4, #1
 80002b8:	2500      	movs	r5, #0
 80002ba:	e9c2 4504 	strd	r4, r5, [r2, #16]
 80002be:	4b0c      	ldr	r3, [pc, #48]	@ (80002f0 <rand+0x74>)
 80002c0:	4c0c      	ldr	r4, [pc, #48]	@ (80002f4 <rand+0x78>)
 80002c2:	4809      	ldr	r0, [pc, #36]	@ (80002e8 <rand+0x6c>)
 80002c4:	490c      	ldr	r1, [pc, #48]	@ (80002f8 <rand+0x7c>)
 80002c6:	6091      	str	r1, [r2, #8]
 80002c8:	e9c2 4300 	strd	r4, r3, [r2]
 80002cc:	230b      	movs	r3, #11
 80002ce:	8193      	strh	r3, [r2, #12]
 80002d0:	4b0a      	ldr	r3, [pc, #40]	@ (80002fc <rand+0x80>)
 80002d2:	4601      	mov	r1, r0
 80002d4:	e9c2 3104 	strd	r3, r1, [r2, #16]
 80002d8:	bd38      	pop	{r3, r4, r5, pc}
 80002da:	4b09      	ldr	r3, [pc, #36]	@ (8000300 <rand+0x84>)
 80002dc:	4809      	ldr	r0, [pc, #36]	@ (8000304 <rand+0x88>)
 80002de:	2152      	movs	r1, #82	@ 0x52
 80002e0:	f000 f812 	bl	8000308 <__assert_func>
 80002e4:	20000020 	.word	0x20000020
 80002e8:	5851f42d 	.word	0x5851f42d
 80002ec:	4c957f2d 	.word	0x4c957f2d
 80002f0:	e66d1234 	.word	0xe66d1234
 80002f4:	abcd330e 	.word	0xabcd330e
 80002f8:	0005deec 	.word	0x0005deec
 80002fc:	4c957f2e 	.word	0x4c957f2e
 8000300:	080050cc 	.word	0x080050cc
 8000304:	080050e4 	.word	0x080050e4

08000308 <__assert_func>:
 8000308:	b500      	push	{lr}
 800030a:	4c0b      	ldr	r4, [pc, #44]	@ (8000338 <__assert_func+0x30>)
 800030c:	6825      	ldr	r5, [r4, #0]
 800030e:	4614      	mov	r4, r2
 8000310:	68ee      	ldr	r6, [r5, #12]
 8000312:	461a      	mov	r2, r3
 8000314:	b085      	sub	sp, #20
 8000316:	4603      	mov	r3, r0
 8000318:	460d      	mov	r5, r1
 800031a:	b14c      	cbz	r4, 8000330 <__assert_func+0x28>
 800031c:	4907      	ldr	r1, [pc, #28]	@ (800033c <__assert_func+0x34>)
 800031e:	9500      	str	r5, [sp, #0]
 8000320:	e9cd 1401 	strd	r1, r4, [sp, #4]
 8000324:	4630      	mov	r0, r6
 8000326:	4906      	ldr	r1, [pc, #24]	@ (8000340 <__assert_func+0x38>)
 8000328:	f000 f954 	bl	80005d4 <fiprintf>
 800032c:	f000 f83a 	bl	80003a4 <abort>
 8000330:	4904      	ldr	r1, [pc, #16]	@ (8000344 <__assert_func+0x3c>)
 8000332:	460c      	mov	r4, r1
 8000334:	e7f3      	b.n	800031e <__assert_func+0x16>
 8000336:	bf00      	nop
 8000338:	20000020 	.word	0x20000020
 800033c:	08005110 	.word	0x08005110
 8000340:	08005120 	.word	0x08005120
 8000344:	0800511c 	.word	0x0800511c

08000348 <__assert>:
 8000348:	b508      	push	{r3, lr}
 800034a:	4613      	mov	r3, r2
 800034c:	2200      	movs	r2, #0
 800034e:	f7ff ffdb 	bl	8000308 <__assert_func>
 8000352:	bf00      	nop

08000354 <__libc_init_array>:
 8000354:	b570      	push	{r4, r5, r6, lr}
 8000356:	4b0f      	ldr	r3, [pc, #60]	@ (8000394 <__libc_init_array+0x40>)
 8000358:	4d0f      	ldr	r5, [pc, #60]	@ (8000398 <__libc_init_array+0x44>)
 800035a:	42ab      	cmp	r3, r5
 800035c:	eba3 0605 	sub.w	r6, r3, r5
 8000360:	d007      	beq.n	8000372 <__libc_init_array+0x1e>
 8000362:	10b6      	asrs	r6, r6, #2
 8000364:	2400      	movs	r4, #0
 8000366:	f855 3b04 	ldr.w	r3, [r5], #4
 800036a:	3401      	adds	r4, #1
 800036c:	4798      	blx	r3
 800036e:	42a6      	cmp	r6, r4
 8000370:	d8f9      	bhi.n	8000366 <__libc_init_array+0x12>
 8000372:	f004 fd81 	bl	8004e78 <_init>
 8000376:	4d09      	ldr	r5, [pc, #36]	@ (800039c <__libc_init_array+0x48>)
 8000378:	4b09      	ldr	r3, [pc, #36]	@ (80003a0 <__libc_init_array+0x4c>)
 800037a:	1b5e      	subs	r6, r3, r5
 800037c:	42ab      	cmp	r3, r5
 800037e:	ea4f 06a6 	mov.w	r6, r6, asr #2
 8000382:	d006      	beq.n	8000392 <__libc_init_array+0x3e>
 8000384:	2400      	movs	r4, #0
 8000386:	f855 3b04 	ldr.w	r3, [r5], #4
 800038a:	3401      	adds	r4, #1
 800038c:	4798      	blx	r3
 800038e:	42a6      	cmp	r6, r4
 8000390:	d8f9      	bhi.n	8000386 <__libc_init_array+0x32>
 8000392:	bd70      	pop	{r4, r5, r6, pc}
 8000394:	08005194 	.word	0x08005194
 8000398:	08005194 	.word	0x08005194
 800039c:	08005194 	.word	0x08005194
 80003a0:	08005198 	.word	0x08005198

080003a4 <abort>:
 80003a4:	b508      	push	{r3, lr}
 80003a6:	2006      	movs	r0, #6
 80003a8:	f000 fd06 	bl	8000db8 <raise>
 80003ac:	2001      	movs	r0, #1
 80003ae:	f001 fd65 	bl	8001e7c <_exit>
 80003b2:	bf00      	nop

080003b4 <memset>:
 80003b4:	0783      	lsls	r3, r0, #30
 80003b6:	b530      	push	{r4, r5, lr}
 80003b8:	d047      	beq.n	800044a <memset+0x96>
 80003ba:	1e54      	subs	r4, r2, #1
 80003bc:	2a00      	cmp	r2, #0
 80003be:	d03e      	beq.n	800043e <memset+0x8a>
 80003c0:	b2ca      	uxtb	r2, r1
 80003c2:	4603      	mov	r3, r0
 80003c4:	e001      	b.n	80003ca <memset+0x16>
 80003c6:	3c01      	subs	r4, #1
 80003c8:	d339      	bcc.n	800043e <memset+0x8a>
 80003ca:	f803 2b01 	strb.w	r2, [r3], #1
 80003ce:	079d      	lsls	r5, r3, #30
 80003d0:	d1f9      	bne.n	80003c6 <memset+0x12>
 80003d2:	2c03      	cmp	r4, #3
 80003d4:	d92c      	bls.n	8000430 <memset+0x7c>
 80003d6:	b2cd      	uxtb	r5, r1
 80003d8:	eb05 2505 	add.w	r5, r5, r5, lsl #8
 80003dc:	2c0f      	cmp	r4, #15
 80003de:	eb05 4505 	add.w	r5, r5, r5, lsl #16
 80003e2:	d935      	bls.n	8000450 <memset+0x9c>
 80003e4:	f1a4 0210 	sub.w	r2, r4, #16
 80003e8:	f022 0c0f 	bic.w	ip, r2, #15
 80003ec:	f103 0e10 	add.w	lr, r3, #16
 80003f0:	44e6      	add	lr, ip
 80003f2:	ea4f 1c12 	mov.w	ip, r2, lsr #4
 80003f6:	461a      	mov	r2, r3
 80003f8:	e9c2 5500 	strd	r5, r5, [r2]
 80003fc:	e9c2 5502 	strd	r5, r5, [r2, #8]
 8000400:	3210      	adds	r2, #16
 8000402:	4572      	cmp	r2, lr
 8000404:	d1f8      	bne.n	80003f8 <memset+0x44>
 8000406:	f10c 0201 	add.w	r2, ip, #1
 800040a:	f014 0f0c 	tst.w	r4, #12
 800040e:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8000412:	f004 0c0f 	and.w	ip, r4, #15
 8000416:	d013      	beq.n	8000440 <memset+0x8c>
 8000418:	f1ac 0304 	sub.w	r3, ip, #4
 800041c:	f023 0303 	bic.w	r3, r3, #3
 8000420:	3304      	adds	r3, #4
 8000422:	4413      	add	r3, r2
 8000424:	f842 5b04 	str.w	r5, [r2], #4
 8000428:	4293      	cmp	r3, r2
 800042a:	d1fb      	bne.n	8000424 <memset+0x70>
 800042c:	f00c 0403 	and.w	r4, ip, #3
 8000430:	b12c      	cbz	r4, 800043e <memset+0x8a>
 8000432:	b2c9      	uxtb	r1, r1
 8000434:	441c      	add	r4, r3
 8000436:	f803 1b01 	strb.w	r1, [r3], #1
 800043a:	42a3      	cmp	r3, r4
 800043c:	d1fb      	bne.n	8000436 <memset+0x82>
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	4664      	mov	r4, ip
 8000442:	4613      	mov	r3, r2
 8000444:	2c00      	cmp	r4, #0
 8000446:	d1f4      	bne.n	8000432 <memset+0x7e>
 8000448:	e7f9      	b.n	800043e <memset+0x8a>
 800044a:	4603      	mov	r3, r0
 800044c:	4614      	mov	r4, r2
 800044e:	e7c0      	b.n	80003d2 <memset+0x1e>
 8000450:	461a      	mov	r2, r3
 8000452:	46a4      	mov	ip, r4
 8000454:	e7e0      	b.n	8000418 <memset+0x64>
 8000456:	bf00      	nop

08000458 <__errno>:
 8000458:	4b01      	ldr	r3, [pc, #4]	@ (8000460 <__errno+0x8>)
 800045a:	6818      	ldr	r0, [r3, #0]
 800045c:	4770      	bx	lr
 800045e:	bf00      	nop
 8000460:	20000020 	.word	0x20000020

08000464 <memcpy>:
 8000464:	4684      	mov	ip, r0
 8000466:	ea41 0300 	orr.w	r3, r1, r0
 800046a:	f013 0303 	ands.w	r3, r3, #3
 800046e:	d16d      	bne.n	800054c <memcpy+0xe8>
 8000470:	3a40      	subs	r2, #64	@ 0x40
 8000472:	d341      	bcc.n	80004f8 <memcpy+0x94>
 8000474:	f851 3b04 	ldr.w	r3, [r1], #4
 8000478:	f840 3b04 	str.w	r3, [r0], #4
 800047c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000480:	f840 3b04 	str.w	r3, [r0], #4
 8000484:	f851 3b04 	ldr.w	r3, [r1], #4
 8000488:	f840 3b04 	str.w	r3, [r0], #4
 800048c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000490:	f840 3b04 	str.w	r3, [r0], #4
 8000494:	f851 3b04 	ldr.w	r3, [r1], #4
 8000498:	f840 3b04 	str.w	r3, [r0], #4
 800049c:	f851 3b04 	ldr.w	r3, [r1], #4
 80004a0:	f840 3b04 	str.w	r3, [r0], #4
 80004a4:	f851 3b04 	ldr.w	r3, [r1], #4
 80004a8:	f840 3b04 	str.w	r3, [r0], #4
 80004ac:	f851 3b04 	ldr.w	r3, [r1], #4
 80004b0:	f840 3b04 	str.w	r3, [r0], #4
 80004b4:	f851 3b04 	ldr.w	r3, [r1], #4
 80004b8:	f840 3b04 	str.w	r3, [r0], #4
 80004bc:	f851 3b04 	ldr.w	r3, [r1], #4
 80004c0:	f840 3b04 	str.w	r3, [r0], #4
 80004c4:	f851 3b04 	ldr.w	r3, [r1], #4
 80004c8:	f840 3b04 	str.w	r3, [r0], #4
 80004cc:	f851 3b04 	ldr.w	r3, [r1], #4
 80004d0:	f840 3b04 	str.w	r3, [r0], #4
 80004d4:	f851 3b04 	ldr.w	r3, [r1], #4
 80004d8:	f840 3b04 	str.w	r3, [r0], #4
 80004dc:	f851 3b04 	ldr.w	r3, [r1], #4
 80004e0:	f840 3b04 	str.w	r3, [r0], #4
 80004e4:	f851 3b04 	ldr.w	r3, [r1], #4
 80004e8:	f840 3b04 	str.w	r3, [r0], #4
 80004ec:	f851 3b04 	ldr.w	r3, [r1], #4
 80004f0:	f840 3b04 	str.w	r3, [r0], #4
 80004f4:	3a40      	subs	r2, #64	@ 0x40
 80004f6:	d2bd      	bcs.n	8000474 <memcpy+0x10>
 80004f8:	3230      	adds	r2, #48	@ 0x30
 80004fa:	d311      	bcc.n	8000520 <memcpy+0xbc>
 80004fc:	f851 3b04 	ldr.w	r3, [r1], #4
 8000500:	f840 3b04 	str.w	r3, [r0], #4
 8000504:	f851 3b04 	ldr.w	r3, [r1], #4
 8000508:	f840 3b04 	str.w	r3, [r0], #4
 800050c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000510:	f840 3b04 	str.w	r3, [r0], #4
 8000514:	f851 3b04 	ldr.w	r3, [r1], #4
 8000518:	f840 3b04 	str.w	r3, [r0], #4
 800051c:	3a10      	subs	r2, #16
 800051e:	d2ed      	bcs.n	80004fc <memcpy+0x98>
 8000520:	320c      	adds	r2, #12
 8000522:	d305      	bcc.n	8000530 <memcpy+0xcc>
 8000524:	f851 3b04 	ldr.w	r3, [r1], #4
 8000528:	f840 3b04 	str.w	r3, [r0], #4
 800052c:	3a04      	subs	r2, #4
 800052e:	d2f9      	bcs.n	8000524 <memcpy+0xc0>
 8000530:	3204      	adds	r2, #4
 8000532:	d008      	beq.n	8000546 <memcpy+0xe2>
 8000534:	07d2      	lsls	r2, r2, #31
 8000536:	bf1c      	itt	ne
 8000538:	f811 3b01 	ldrbne.w	r3, [r1], #1
 800053c:	f800 3b01 	strbne.w	r3, [r0], #1
 8000540:	d301      	bcc.n	8000546 <memcpy+0xe2>
 8000542:	880b      	ldrh	r3, [r1, #0]
 8000544:	8003      	strh	r3, [r0, #0]
 8000546:	4660      	mov	r0, ip
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	2a08      	cmp	r2, #8
 800054e:	d313      	bcc.n	8000578 <memcpy+0x114>
 8000550:	078b      	lsls	r3, r1, #30
 8000552:	d08d      	beq.n	8000470 <memcpy+0xc>
 8000554:	f010 0303 	ands.w	r3, r0, #3
 8000558:	d08a      	beq.n	8000470 <memcpy+0xc>
 800055a:	f1c3 0304 	rsb	r3, r3, #4
 800055e:	1ad2      	subs	r2, r2, r3
 8000560:	07db      	lsls	r3, r3, #31
 8000562:	bf1c      	itt	ne
 8000564:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000568:	f800 3b01 	strbne.w	r3, [r0], #1
 800056c:	d380      	bcc.n	8000470 <memcpy+0xc>
 800056e:	f831 3b02 	ldrh.w	r3, [r1], #2
 8000572:	f820 3b02 	strh.w	r3, [r0], #2
 8000576:	e77b      	b.n	8000470 <memcpy+0xc>
 8000578:	3a04      	subs	r2, #4
 800057a:	d3d9      	bcc.n	8000530 <memcpy+0xcc>
 800057c:	3a01      	subs	r2, #1
 800057e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000582:	f800 3b01 	strb.w	r3, [r0], #1
 8000586:	d2f9      	bcs.n	800057c <memcpy+0x118>
 8000588:	780b      	ldrb	r3, [r1, #0]
 800058a:	7003      	strb	r3, [r0, #0]
 800058c:	784b      	ldrb	r3, [r1, #1]
 800058e:	7043      	strb	r3, [r0, #1]
 8000590:	788b      	ldrb	r3, [r1, #2]
 8000592:	7083      	strb	r3, [r0, #2]
 8000594:	4660      	mov	r0, ip
 8000596:	4770      	bx	lr

08000598 <malloc>:
 8000598:	4b02      	ldr	r3, [pc, #8]	@ (80005a4 <malloc+0xc>)
 800059a:	4601      	mov	r1, r0
 800059c:	6818      	ldr	r0, [r3, #0]
 800059e:	f000 bea9 	b.w	80012f4 <_malloc_r>
 80005a2:	bf00      	nop
 80005a4:	20000020 	.word	0x20000020

080005a8 <free>:
 80005a8:	4b02      	ldr	r3, [pc, #8]	@ (80005b4 <free+0xc>)
 80005aa:	4601      	mov	r1, r0
 80005ac:	6818      	ldr	r0, [r3, #0]
 80005ae:	f000 bf21 	b.w	80013f4 <_free_r>
 80005b2:	bf00      	nop
 80005b4:	20000020 	.word	0x20000020

080005b8 <_fiprintf_r>:
 80005b8:	b40c      	push	{r2, r3}
 80005ba:	b500      	push	{lr}
 80005bc:	b083      	sub	sp, #12
 80005be:	ab04      	add	r3, sp, #16
 80005c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80005c4:	9301      	str	r3, [sp, #4]
 80005c6:	f000 f855 	bl	8000674 <_vfiprintf_r>
 80005ca:	b003      	add	sp, #12
 80005cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80005d0:	b002      	add	sp, #8
 80005d2:	4770      	bx	lr

080005d4 <fiprintf>:
 80005d4:	b40e      	push	{r1, r2, r3}
 80005d6:	b510      	push	{r4, lr}
 80005d8:	b083      	sub	sp, #12
 80005da:	ab05      	add	r3, sp, #20
 80005dc:	4c06      	ldr	r4, [pc, #24]	@ (80005f8 <fiprintf+0x24>)
 80005de:	f853 2b04 	ldr.w	r2, [r3], #4
 80005e2:	9301      	str	r3, [sp, #4]
 80005e4:	4601      	mov	r1, r0
 80005e6:	6820      	ldr	r0, [r4, #0]
 80005e8:	f000 f844 	bl	8000674 <_vfiprintf_r>
 80005ec:	b003      	add	sp, #12
 80005ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80005f2:	b003      	add	sp, #12
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	20000020 	.word	0x20000020

080005fc <__sfputc_r>:
 80005fc:	6893      	ldr	r3, [r2, #8]
 80005fe:	3b01      	subs	r3, #1
 8000600:	2b00      	cmp	r3, #0
 8000602:	6093      	str	r3, [r2, #8]
 8000604:	da05      	bge.n	8000612 <__sfputc_r+0x16>
 8000606:	f8d2 c018 	ldr.w	ip, [r2, #24]
 800060a:	4563      	cmp	r3, ip
 800060c:	db07      	blt.n	800061e <__sfputc_r+0x22>
 800060e:	290a      	cmp	r1, #10
 8000610:	d005      	beq.n	800061e <__sfputc_r+0x22>
 8000612:	6813      	ldr	r3, [r2, #0]
 8000614:	1c58      	adds	r0, r3, #1
 8000616:	6010      	str	r0, [r2, #0]
 8000618:	7019      	strb	r1, [r3, #0]
 800061a:	4608      	mov	r0, r1
 800061c:	4770      	bx	lr
 800061e:	f000 b96b 	b.w	80008f8 <__swbuf_r>
 8000622:	bf00      	nop

08000624 <__sfputs_r>:
 8000624:	b19b      	cbz	r3, 800064e <__sfputs_r+0x2a>
 8000626:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000628:	4413      	add	r3, r2
 800062a:	4606      	mov	r6, r0
 800062c:	460f      	mov	r7, r1
 800062e:	1e54      	subs	r4, r2, #1
 8000630:	1e5d      	subs	r5, r3, #1
 8000632:	e001      	b.n	8000638 <__sfputs_r+0x14>
 8000634:	42ac      	cmp	r4, r5
 8000636:	d008      	beq.n	800064a <__sfputs_r+0x26>
 8000638:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 800063c:	463a      	mov	r2, r7
 800063e:	4630      	mov	r0, r6
 8000640:	f7ff ffdc 	bl	80005fc <__sfputc_r>
 8000644:	1c43      	adds	r3, r0, #1
 8000646:	d1f5      	bne.n	8000634 <__sfputs_r+0x10>
 8000648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800064a:	2000      	movs	r0, #0
 800064c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800064e:	2000      	movs	r0, #0
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop

08000654 <__sprint_r>:
 8000654:	6893      	ldr	r3, [r2, #8]
 8000656:	b510      	push	{r4, lr}
 8000658:	4614      	mov	r4, r2
 800065a:	b91b      	cbnz	r3, 8000664 <__sprint_r+0x10>
 800065c:	4618      	mov	r0, r3
 800065e:	2300      	movs	r3, #0
 8000660:	6063      	str	r3, [r4, #4]
 8000662:	bd10      	pop	{r4, pc}
 8000664:	f000 f998 	bl	8000998 <__sfvwrite_r>
 8000668:	2300      	movs	r3, #0
 800066a:	60a3      	str	r3, [r4, #8]
 800066c:	2300      	movs	r3, #0
 800066e:	6063      	str	r3, [r4, #4]
 8000670:	bd10      	pop	{r4, pc}
 8000672:	bf00      	nop

08000674 <_vfiprintf_r>:
 8000674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000678:	b0a1      	sub	sp, #132	@ 0x84
 800067a:	468b      	mov	fp, r1
 800067c:	4691      	mov	r9, r2
 800067e:	461c      	mov	r4, r3
 8000680:	9004      	str	r0, [sp, #16]
 8000682:	b118      	cbz	r0, 800068c <_vfiprintf_r+0x18>
 8000684:	6a03      	ldr	r3, [r0, #32]
 8000686:	2b00      	cmp	r3, #0
 8000688:	f000 811c 	beq.w	80008c4 <_vfiprintf_r+0x250>
 800068c:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8000690:	0718      	lsls	r0, r3, #28
 8000692:	f140 8095 	bpl.w	80007c0 <_vfiprintf_r+0x14c>
 8000696:	f8db 3010 	ldr.w	r3, [fp, #16]
 800069a:	2b00      	cmp	r3, #0
 800069c:	f000 8090 	beq.w	80007c0 <_vfiprintf_r+0x14c>
 80006a0:	2300      	movs	r3, #0
 80006a2:	46ca      	mov	sl, r9
 80006a4:	930d      	str	r3, [sp, #52]	@ 0x34
 80006a6:	f243 0320 	movw	r3, #12320	@ 0x3020
 80006aa:	f8ad 3039 	strh.w	r3, [sp, #57]	@ 0x39
 80006ae:	f89a 3000 	ldrb.w	r3, [sl]
 80006b2:	4e86      	ldr	r6, [pc, #536]	@ (80008cc <_vfiprintf_r+0x258>)
 80006b4:	9407      	str	r4, [sp, #28]
 80006b6:	2701      	movs	r7, #1
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d079      	beq.n	80007b0 <_vfiprintf_r+0x13c>
 80006bc:	46d1      	mov	r9, sl
 80006be:	e004      	b.n	80006ca <_vfiprintf_r+0x56>
 80006c0:	f819 3f01 	ldrb.w	r3, [r9, #1]!
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	f000 8085 	beq.w	80007d4 <_vfiprintf_r+0x160>
 80006ca:	2b25      	cmp	r3, #37	@ 0x25
 80006cc:	d1f8      	bne.n	80006c0 <_vfiprintf_r+0x4c>
 80006ce:	ebb9 080a 	subs.w	r8, r9, sl
 80006d2:	f040 8082 	bne.w	80007da <_vfiprintf_r+0x166>
 80006d6:	f899 3000 	ldrb.w	r3, [r9]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d068      	beq.n	80007b0 <_vfiprintf_r+0x13c>
 80006de:	2300      	movs	r3, #0
 80006e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80006e4:	e9cd 2309 	strd	r2, r3, [sp, #36]	@ 0x24
 80006e8:	f109 0901 	add.w	r9, r9, #1
 80006ec:	9308      	str	r3, [sp, #32]
 80006ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 80006f0:	f88d 3063 	strb.w	r3, [sp, #99]	@ 0x63
 80006f4:	931e      	str	r3, [sp, #120]	@ 0x78
 80006f6:	e005      	b.n	8000704 <_vfiprintf_r+0x90>
 80006f8:	9a08      	ldr	r2, [sp, #32]
 80006fa:	fa07 f303 	lsl.w	r3, r7, r3
 80006fe:	431a      	orrs	r2, r3
 8000700:	9208      	str	r2, [sp, #32]
 8000702:	46a1      	mov	r9, r4
 8000704:	464c      	mov	r4, r9
 8000706:	2205      	movs	r2, #5
 8000708:	f814 1b01 	ldrb.w	r1, [r4], #1
 800070c:	4630      	mov	r0, r6
 800070e:	f000 ff77 	bl	8001600 <memchr>
 8000712:	46a2      	mov	sl, r4
 8000714:	1b83      	subs	r3, r0, r6
 8000716:	2800      	cmp	r0, #0
 8000718:	d1ee      	bne.n	80006f8 <_vfiprintf_r+0x84>
 800071a:	9b08      	ldr	r3, [sp, #32]
 800071c:	06d9      	lsls	r1, r3, #27
 800071e:	bf44      	itt	mi
 8000720:	2220      	movmi	r2, #32
 8000722:	f88d 2063 	strbmi.w	r2, [sp, #99]	@ 0x63
 8000726:	f899 1000 	ldrb.w	r1, [r9]
 800072a:	071a      	lsls	r2, r3, #28
 800072c:	bf44      	itt	mi
 800072e:	222b      	movmi	r2, #43	@ 0x2b
 8000730:	f88d 2063 	strbmi.w	r2, [sp, #99]	@ 0x63
 8000734:	292a      	cmp	r1, #42	@ 0x2a
 8000736:	d166      	bne.n	8000806 <_vfiprintf_r+0x192>
 8000738:	9a07      	ldr	r2, [sp, #28]
 800073a:	6811      	ldr	r1, [r2, #0]
 800073c:	3204      	adds	r2, #4
 800073e:	2900      	cmp	r1, #0
 8000740:	9207      	str	r2, [sp, #28]
 8000742:	f2c0 809a 	blt.w	800087a <_vfiprintf_r+0x206>
 8000746:	910b      	str	r1, [sp, #44]	@ 0x2c
 8000748:	f899 1001 	ldrb.w	r1, [r9, #1]
 800074c:	292e      	cmp	r1, #46	@ 0x2e
 800074e:	d070      	beq.n	8000832 <_vfiprintf_r+0x1be>
 8000750:	4c5f      	ldr	r4, [pc, #380]	@ (80008d0 <_vfiprintf_r+0x25c>)
 8000752:	2203      	movs	r2, #3
 8000754:	4620      	mov	r0, r4
 8000756:	f000 ff53 	bl	8001600 <memchr>
 800075a:	b138      	cbz	r0, 800076c <_vfiprintf_r+0xf8>
 800075c:	9b08      	ldr	r3, [sp, #32]
 800075e:	1b00      	subs	r0, r0, r4
 8000760:	2240      	movs	r2, #64	@ 0x40
 8000762:	4082      	lsls	r2, r0
 8000764:	4313      	orrs	r3, r2
 8000766:	f10a 0a01 	add.w	sl, sl, #1
 800076a:	9308      	str	r3, [sp, #32]
 800076c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8000770:	4858      	ldr	r0, [pc, #352]	@ (80008d4 <_vfiprintf_r+0x260>)
 8000772:	f88d 1038 	strb.w	r1, [sp, #56]	@ 0x38
 8000776:	2206      	movs	r2, #6
 8000778:	f000 ff42 	bl	8001600 <memchr>
 800077c:	2800      	cmp	r0, #0
 800077e:	f000 8082 	beq.w	8000886 <_vfiprintf_r+0x212>
 8000782:	4b55      	ldr	r3, [pc, #340]	@ (80008d8 <_vfiprintf_r+0x264>)
 8000784:	2b00      	cmp	r3, #0
 8000786:	d069      	beq.n	800085c <_vfiprintf_r+0x1e8>
 8000788:	aa07      	add	r2, sp, #28
 800078a:	9200      	str	r2, [sp, #0]
 800078c:	4b53      	ldr	r3, [pc, #332]	@ (80008dc <_vfiprintf_r+0x268>)
 800078e:	9804      	ldr	r0, [sp, #16]
 8000790:	465a      	mov	r2, fp
 8000792:	a908      	add	r1, sp, #32
 8000794:	f3af 8000 	nop.w
 8000798:	9003      	str	r0, [sp, #12]
 800079a:	9b03      	ldr	r3, [sp, #12]
 800079c:	3301      	adds	r3, #1
 800079e:	d007      	beq.n	80007b0 <_vfiprintf_r+0x13c>
 80007a0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80007a2:	9a03      	ldr	r2, [sp, #12]
 80007a4:	4413      	add	r3, r2
 80007a6:	930d      	str	r3, [sp, #52]	@ 0x34
 80007a8:	f89a 3000 	ldrb.w	r3, [sl]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d185      	bne.n	80006bc <_vfiprintf_r+0x48>
 80007b0:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80007b4:	065b      	lsls	r3, r3, #25
 80007b6:	d40a      	bmi.n	80007ce <_vfiprintf_r+0x15a>
 80007b8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80007ba:	b021      	add	sp, #132	@ 0x84
 80007bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80007c0:	9804      	ldr	r0, [sp, #16]
 80007c2:	4659      	mov	r1, fp
 80007c4:	f000 ff6c 	bl	80016a0 <__swsetup_r>
 80007c8:	2800      	cmp	r0, #0
 80007ca:	f43f af69 	beq.w	80006a0 <_vfiprintf_r+0x2c>
 80007ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80007d2:	e7f2      	b.n	80007ba <_vfiprintf_r+0x146>
 80007d4:	ebb9 080a 	subs.w	r8, r9, sl
 80007d8:	d0ea      	beq.n	80007b0 <_vfiprintf_r+0x13c>
 80007da:	f10a 35ff 	add.w	r5, sl, #4294967295	@ 0xffffffff
 80007de:	f8cd 9014 	str.w	r9, [sp, #20]
 80007e2:	46a9      	mov	r9, r5
 80007e4:	9d04      	ldr	r5, [sp, #16]
 80007e6:	e001      	b.n	80007ec <_vfiprintf_r+0x178>
 80007e8:	45a0      	cmp	r8, r4
 80007ea:	d93e      	bls.n	800086a <_vfiprintf_r+0x1f6>
 80007ec:	464c      	mov	r4, r9
 80007ee:	465a      	mov	r2, fp
 80007f0:	f819 1f01 	ldrb.w	r1, [r9, #1]!
 80007f4:	4628      	mov	r0, r5
 80007f6:	f7ff ff01 	bl	80005fc <__sfputc_r>
 80007fa:	3402      	adds	r4, #2
 80007fc:	3001      	adds	r0, #1
 80007fe:	eba4 040a 	sub.w	r4, r4, sl
 8000802:	d1f1      	bne.n	80007e8 <_vfiprintf_r+0x174>
 8000804:	e7d4      	b.n	80007b0 <_vfiprintf_r+0x13c>
 8000806:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800080a:	2a09      	cmp	r2, #9
 800080c:	bf88      	it	hi
 800080e:	46ca      	movhi	sl, r9
 8000810:	d89c      	bhi.n	800074c <_vfiprintf_r+0xd8>
 8000812:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8000814:	e000      	b.n	8000818 <_vfiprintf_r+0x1a4>
 8000816:	3401      	adds	r4, #1
 8000818:	7821      	ldrb	r1, [r4, #0]
 800081a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800081e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000822:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8000826:	2a09      	cmp	r2, #9
 8000828:	d9f5      	bls.n	8000816 <_vfiprintf_r+0x1a2>
 800082a:	292e      	cmp	r1, #46	@ 0x2e
 800082c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800082e:	46a2      	mov	sl, r4
 8000830:	d18e      	bne.n	8000750 <_vfiprintf_r+0xdc>
 8000832:	f89a 1001 	ldrb.w	r1, [sl, #1]
 8000836:	292a      	cmp	r1, #42	@ 0x2a
 8000838:	d12f      	bne.n	800089a <_vfiprintf_r+0x226>
 800083a:	9b07      	ldr	r3, [sp, #28]
 800083c:	f89a 1002 	ldrb.w	r1, [sl, #2]
 8000840:	681a      	ldr	r2, [r3, #0]
 8000842:	9209      	str	r2, [sp, #36]	@ 0x24
 8000844:	3304      	adds	r3, #4
 8000846:	2a00      	cmp	r2, #0
 8000848:	f10a 0002 	add.w	r0, sl, #2
 800084c:	9307      	str	r3, [sp, #28]
 800084e:	bfb8      	it	lt
 8000850:	f04f 33ff 	movlt.w	r3, #4294967295	@ 0xffffffff
 8000854:	4682      	mov	sl, r0
 8000856:	bfb8      	it	lt
 8000858:	9309      	strlt	r3, [sp, #36]	@ 0x24
 800085a:	e779      	b.n	8000750 <_vfiprintf_r+0xdc>
 800085c:	9b07      	ldr	r3, [sp, #28]
 800085e:	3307      	adds	r3, #7
 8000860:	f023 0307 	bic.w	r3, r3, #7
 8000864:	3308      	adds	r3, #8
 8000866:	9307      	str	r3, [sp, #28]
 8000868:	e79a      	b.n	80007a0 <_vfiprintf_r+0x12c>
 800086a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800086c:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8000870:	4441      	add	r1, r8
 8000872:	f899 3000 	ldrb.w	r3, [r9]
 8000876:	910d      	str	r1, [sp, #52]	@ 0x34
 8000878:	e72f      	b.n	80006da <_vfiprintf_r+0x66>
 800087a:	4249      	negs	r1, r1
 800087c:	f043 0302 	orr.w	r3, r3, #2
 8000880:	910b      	str	r1, [sp, #44]	@ 0x2c
 8000882:	9308      	str	r3, [sp, #32]
 8000884:	e760      	b.n	8000748 <_vfiprintf_r+0xd4>
 8000886:	aa07      	add	r2, sp, #28
 8000888:	9200      	str	r2, [sp, #0]
 800088a:	4b14      	ldr	r3, [pc, #80]	@ (80008dc <_vfiprintf_r+0x268>)
 800088c:	9804      	ldr	r0, [sp, #16]
 800088e:	465a      	mov	r2, fp
 8000890:	a908      	add	r1, sp, #32
 8000892:	f001 f82b 	bl	80018ec <_printf_i>
 8000896:	9003      	str	r0, [sp, #12]
 8000898:	e77f      	b.n	800079a <_vfiprintf_r+0x126>
 800089a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800089e:	2300      	movs	r3, #0
 80008a0:	2a09      	cmp	r2, #9
 80008a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80008a4:	f10a 0a01 	add.w	sl, sl, #1
 80008a8:	f63f af52 	bhi.w	8000750 <_vfiprintf_r+0xdc>
 80008ac:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
 80008b0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80008b4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80008b8:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80008bc:	2a09      	cmp	r2, #9
 80008be:	d9f5      	bls.n	80008ac <_vfiprintf_r+0x238>
 80008c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80008c2:	e745      	b.n	8000750 <_vfiprintf_r+0xdc>
 80008c4:	f000 fbfe 	bl	80010c4 <__sinit>
 80008c8:	e6e0      	b.n	800068c <_vfiprintf_r+0x18>
 80008ca:	bf00      	nop
 80008cc:	08005150 	.word	0x08005150
 80008d0:	08005158 	.word	0x08005158
 80008d4:	0800515c 	.word	0x0800515c
 80008d8:	00000000 	.word	0x00000000
 80008dc:	08000625 	.word	0x08000625

080008e0 <vfiprintf>:
 80008e0:	b410      	push	{r4}
 80008e2:	4c04      	ldr	r4, [pc, #16]	@ (80008f4 <vfiprintf+0x14>)
 80008e4:	4684      	mov	ip, r0
 80008e6:	4613      	mov	r3, r2
 80008e8:	6820      	ldr	r0, [r4, #0]
 80008ea:	bc10      	pop	{r4}
 80008ec:	460a      	mov	r2, r1
 80008ee:	4661      	mov	r1, ip
 80008f0:	f7ff bec0 	b.w	8000674 <_vfiprintf_r>
 80008f4:	20000020 	.word	0x20000020

080008f8 <__swbuf_r>:
 80008f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008fa:	460d      	mov	r5, r1
 80008fc:	4614      	mov	r4, r2
 80008fe:	4606      	mov	r6, r0
 8000900:	b110      	cbz	r0, 8000908 <__swbuf_r+0x10>
 8000902:	6a03      	ldr	r3, [r0, #32]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d037      	beq.n	8000978 <__swbuf_r+0x80>
 8000908:	89a3      	ldrh	r3, [r4, #12]
 800090a:	69a2      	ldr	r2, [r4, #24]
 800090c:	60a2      	str	r2, [r4, #8]
 800090e:	071a      	lsls	r2, r3, #28
 8000910:	d519      	bpl.n	8000946 <__swbuf_r+0x4e>
 8000912:	6923      	ldr	r3, [r4, #16]
 8000914:	b1bb      	cbz	r3, 8000946 <__swbuf_r+0x4e>
 8000916:	6822      	ldr	r2, [r4, #0]
 8000918:	6961      	ldr	r1, [r4, #20]
 800091a:	1ad3      	subs	r3, r2, r3
 800091c:	b2ed      	uxtb	r5, r5
 800091e:	4299      	cmp	r1, r3
 8000920:	462f      	mov	r7, r5
 8000922:	dd20      	ble.n	8000966 <__swbuf_r+0x6e>
 8000924:	3301      	adds	r3, #1
 8000926:	68a1      	ldr	r1, [r4, #8]
 8000928:	3901      	subs	r1, #1
 800092a:	60a1      	str	r1, [r4, #8]
 800092c:	1c51      	adds	r1, r2, #1
 800092e:	6021      	str	r1, [r4, #0]
 8000930:	7015      	strb	r5, [r2, #0]
 8000932:	6962      	ldr	r2, [r4, #20]
 8000934:	429a      	cmp	r2, r3
 8000936:	d00d      	beq.n	8000954 <__swbuf_r+0x5c>
 8000938:	89a3      	ldrh	r3, [r4, #12]
 800093a:	07db      	lsls	r3, r3, #31
 800093c:	d501      	bpl.n	8000942 <__swbuf_r+0x4a>
 800093e:	2d0a      	cmp	r5, #10
 8000940:	d008      	beq.n	8000954 <__swbuf_r+0x5c>
 8000942:	4638      	mov	r0, r7
 8000944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000946:	4621      	mov	r1, r4
 8000948:	4630      	mov	r0, r6
 800094a:	f000 fea9 	bl	80016a0 <__swsetup_r>
 800094e:	b938      	cbnz	r0, 8000960 <__swbuf_r+0x68>
 8000950:	6923      	ldr	r3, [r4, #16]
 8000952:	e7e0      	b.n	8000916 <__swbuf_r+0x1e>
 8000954:	4621      	mov	r1, r4
 8000956:	4630      	mov	r0, r6
 8000958:	f000 fc66 	bl	8001228 <_fflush_r>
 800095c:	2800      	cmp	r0, #0
 800095e:	d0f0      	beq.n	8000942 <__swbuf_r+0x4a>
 8000960:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8000964:	e7ed      	b.n	8000942 <__swbuf_r+0x4a>
 8000966:	4621      	mov	r1, r4
 8000968:	4630      	mov	r0, r6
 800096a:	f000 fc5d 	bl	8001228 <_fflush_r>
 800096e:	2800      	cmp	r0, #0
 8000970:	d1f6      	bne.n	8000960 <__swbuf_r+0x68>
 8000972:	6822      	ldr	r2, [r4, #0]
 8000974:	2301      	movs	r3, #1
 8000976:	e7d6      	b.n	8000926 <__swbuf_r+0x2e>
 8000978:	f000 fba4 	bl	80010c4 <__sinit>
 800097c:	e7c4      	b.n	8000908 <__swbuf_r+0x10>
 800097e:	bf00      	nop

08000980 <__swbuf>:
 8000980:	b410      	push	{r4}
 8000982:	4c04      	ldr	r4, [pc, #16]	@ (8000994 <__swbuf+0x14>)
 8000984:	4603      	mov	r3, r0
 8000986:	460a      	mov	r2, r1
 8000988:	6820      	ldr	r0, [r4, #0]
 800098a:	bc10      	pop	{r4}
 800098c:	4619      	mov	r1, r3
 800098e:	f7ff bfb3 	b.w	80008f8 <__swbuf_r>
 8000992:	bf00      	nop
 8000994:	20000020 	.word	0x20000020

08000998 <__sfvwrite_r>:
 8000998:	6893      	ldr	r3, [r2, #8]
 800099a:	2b00      	cmp	r3, #0
 800099c:	f000 80f6 	beq.w	8000b8c <__sfvwrite_r+0x1f4>
 80009a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009a4:	f9b1 c00c 	ldrsh.w	ip, [r1, #12]
 80009a8:	f01c 0f08 	tst.w	ip, #8
 80009ac:	b083      	sub	sp, #12
 80009ae:	4690      	mov	r8, r2
 80009b0:	4681      	mov	r9, r0
 80009b2:	460c      	mov	r4, r1
 80009b4:	d031      	beq.n	8000a1a <__sfvwrite_r+0x82>
 80009b6:	690b      	ldr	r3, [r1, #16]
 80009b8:	b37b      	cbz	r3, 8000a1a <__sfvwrite_r+0x82>
 80009ba:	f01c 0702 	ands.w	r7, ip, #2
 80009be:	f8d8 6000 	ldr.w	r6, [r8]
 80009c2:	d038      	beq.n	8000a36 <__sfvwrite_r+0x9e>
 80009c4:	2700      	movs	r7, #0
 80009c6:	f8d4 b028 	ldr.w	fp, [r4, #40]	@ 0x28
 80009ca:	6a21      	ldr	r1, [r4, #32]
 80009cc:	f8df a2bc 	ldr.w	sl, [pc, #700]	@ 8000c8c <__sfvwrite_r+0x2f4>
 80009d0:	463d      	mov	r5, r7
 80009d2:	4555      	cmp	r5, sl
 80009d4:	462b      	mov	r3, r5
 80009d6:	463a      	mov	r2, r7
 80009d8:	bf28      	it	cs
 80009da:	4653      	movcs	r3, sl
 80009dc:	4648      	mov	r0, r9
 80009de:	b1c5      	cbz	r5, 8000a12 <__sfvwrite_r+0x7a>
 80009e0:	47d8      	blx	fp
 80009e2:	2800      	cmp	r0, #0
 80009e4:	f340 80c8 	ble.w	8000b78 <__sfvwrite_r+0x1e0>
 80009e8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80009ec:	1a1b      	subs	r3, r3, r0
 80009ee:	4407      	add	r7, r0
 80009f0:	1a2d      	subs	r5, r5, r0
 80009f2:	f8c8 3008 	str.w	r3, [r8, #8]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	f000 80b4 	beq.w	8000b64 <__sfvwrite_r+0x1cc>
 80009fc:	4555      	cmp	r5, sl
 80009fe:	462b      	mov	r3, r5
 8000a00:	f8d4 b028 	ldr.w	fp, [r4, #40]	@ 0x28
 8000a04:	6a21      	ldr	r1, [r4, #32]
 8000a06:	bf28      	it	cs
 8000a08:	4653      	movcs	r3, sl
 8000a0a:	463a      	mov	r2, r7
 8000a0c:	4648      	mov	r0, r9
 8000a0e:	2d00      	cmp	r5, #0
 8000a10:	d1e6      	bne.n	80009e0 <__sfvwrite_r+0x48>
 8000a12:	e9d6 7500 	ldrd	r7, r5, [r6]
 8000a16:	3608      	adds	r6, #8
 8000a18:	e7db      	b.n	80009d2 <__sfvwrite_r+0x3a>
 8000a1a:	4621      	mov	r1, r4
 8000a1c:	4648      	mov	r0, r9
 8000a1e:	f000 fe3f 	bl	80016a0 <__swsetup_r>
 8000a22:	2800      	cmp	r0, #0
 8000a24:	f040 80ad 	bne.w	8000b82 <__sfvwrite_r+0x1ea>
 8000a28:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
 8000a2c:	f8d8 6000 	ldr.w	r6, [r8]
 8000a30:	f01c 0702 	ands.w	r7, ip, #2
 8000a34:	d1c6      	bne.n	80009c4 <__sfvwrite_r+0x2c>
 8000a36:	f01c 0a01 	ands.w	sl, ip, #1
 8000a3a:	d163      	bne.n	8000b04 <__sfvwrite_r+0x16c>
 8000a3c:	6823      	ldr	r3, [r4, #0]
 8000a3e:	68a1      	ldr	r1, [r4, #8]
 8000a40:	4657      	mov	r7, sl
 8000a42:	4618      	mov	r0, r3
 8000a44:	468b      	mov	fp, r1
 8000a46:	2f00      	cmp	r7, #0
 8000a48:	d058      	beq.n	8000afc <__sfvwrite_r+0x164>
 8000a4a:	f41c 7f00 	tst.w	ip, #512	@ 0x200
 8000a4e:	f000 80b1 	beq.w	8000bb4 <__sfvwrite_r+0x21c>
 8000a52:	42b9      	cmp	r1, r7
 8000a54:	460a      	mov	r2, r1
 8000a56:	f200 80dd 	bhi.w	8000c14 <__sfvwrite_r+0x27c>
 8000a5a:	f41c 6f90 	tst.w	ip, #1152	@ 0x480
 8000a5e:	d02f      	beq.n	8000ac0 <__sfvwrite_r+0x128>
 8000a60:	6921      	ldr	r1, [r4, #16]
 8000a62:	6962      	ldr	r2, [r4, #20]
 8000a64:	1a5d      	subs	r5, r3, r1
 8000a66:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000a6a:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8000a6e:	1c6b      	adds	r3, r5, #1
 8000a70:	1052      	asrs	r2, r2, #1
 8000a72:	443b      	add	r3, r7
 8000a74:	4293      	cmp	r3, r2
 8000a76:	bf92      	itee	ls
 8000a78:	4693      	movls	fp, r2
 8000a7a:	469b      	movhi	fp, r3
 8000a7c:	461a      	movhi	r2, r3
 8000a7e:	f41c 6f80 	tst.w	ip, #1024	@ 0x400
 8000a82:	f000 80e6 	beq.w	8000c52 <__sfvwrite_r+0x2ba>
 8000a86:	4611      	mov	r1, r2
 8000a88:	4648      	mov	r0, r9
 8000a8a:	f000 fc33 	bl	80012f4 <_malloc_r>
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	f000 80f5 	beq.w	8000c7e <__sfvwrite_r+0x2e6>
 8000a94:	462a      	mov	r2, r5
 8000a96:	6921      	ldr	r1, [r4, #16]
 8000a98:	9001      	str	r0, [sp, #4]
 8000a9a:	f7ff fce3 	bl	8000464 <memcpy>
 8000a9e:	89a2      	ldrh	r2, [r4, #12]
 8000aa0:	9b01      	ldr	r3, [sp, #4]
 8000aa2:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 8000aa6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000aaa:	81a2      	strh	r2, [r4, #12]
 8000aac:	1958      	adds	r0, r3, r5
 8000aae:	ebab 0505 	sub.w	r5, fp, r5
 8000ab2:	f8c4 b014 	str.w	fp, [r4, #20]
 8000ab6:	6123      	str	r3, [r4, #16]
 8000ab8:	60a5      	str	r5, [r4, #8]
 8000aba:	6020      	str	r0, [r4, #0]
 8000abc:	46bb      	mov	fp, r7
 8000abe:	463a      	mov	r2, r7
 8000ac0:	4651      	mov	r1, sl
 8000ac2:	9201      	str	r2, [sp, #4]
 8000ac4:	f000 fcf4 	bl	80014b0 <memmove>
 8000ac8:	68a1      	ldr	r1, [r4, #8]
 8000aca:	6823      	ldr	r3, [r4, #0]
 8000acc:	9a01      	ldr	r2, [sp, #4]
 8000ace:	eba1 010b 	sub.w	r1, r1, fp
 8000ad2:	441a      	add	r2, r3
 8000ad4:	463d      	mov	r5, r7
 8000ad6:	60a1      	str	r1, [r4, #8]
 8000ad8:	6022      	str	r2, [r4, #0]
 8000ada:	2700      	movs	r7, #0
 8000adc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8000ae0:	1b5b      	subs	r3, r3, r5
 8000ae2:	44aa      	add	sl, r5
 8000ae4:	f8c8 3008 	str.w	r3, [r8, #8]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d03b      	beq.n	8000b64 <__sfvwrite_r+0x1cc>
 8000aec:	6823      	ldr	r3, [r4, #0]
 8000aee:	68a1      	ldr	r1, [r4, #8]
 8000af0:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
 8000af4:	4618      	mov	r0, r3
 8000af6:	468b      	mov	fp, r1
 8000af8:	2f00      	cmp	r7, #0
 8000afa:	d1a6      	bne.n	8000a4a <__sfvwrite_r+0xb2>
 8000afc:	e9d6 a700 	ldrd	sl, r7, [r6]
 8000b00:	3608      	adds	r6, #8
 8000b02:	e79e      	b.n	8000a42 <__sfvwrite_r+0xaa>
 8000b04:	4638      	mov	r0, r7
 8000b06:	46bb      	mov	fp, r7
 8000b08:	463d      	mov	r5, r7
 8000b0a:	2d00      	cmp	r5, #0
 8000b0c:	d040      	beq.n	8000b90 <__sfvwrite_r+0x1f8>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	d045      	beq.n	8000b9e <__sfvwrite_r+0x206>
 8000b12:	463a      	mov	r2, r7
 8000b14:	e9d4 c304 	ldrd	ip, r3, [r4, #16]
 8000b18:	6820      	ldr	r0, [r4, #0]
 8000b1a:	68a1      	ldr	r1, [r4, #8]
 8000b1c:	42aa      	cmp	r2, r5
 8000b1e:	bf28      	it	cs
 8000b20:	462a      	movcs	r2, r5
 8000b22:	4560      	cmp	r0, ip
 8000b24:	d904      	bls.n	8000b30 <__sfvwrite_r+0x198>
 8000b26:	eb01 0a03 	add.w	sl, r1, r3
 8000b2a:	4552      	cmp	r2, sl
 8000b2c:	f300 8082 	bgt.w	8000c34 <__sfvwrite_r+0x29c>
 8000b30:	4293      	cmp	r3, r2
 8000b32:	dc72      	bgt.n	8000c1a <__sfvwrite_r+0x282>
 8000b34:	6a21      	ldr	r1, [r4, #32]
 8000b36:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8000b3a:	465a      	mov	r2, fp
 8000b3c:	4648      	mov	r0, r9
 8000b3e:	47e0      	blx	ip
 8000b40:	f1b0 0a00 	subs.w	sl, r0, #0
 8000b44:	dd18      	ble.n	8000b78 <__sfvwrite_r+0x1e0>
 8000b46:	ebb7 070a 	subs.w	r7, r7, sl
 8000b4a:	d00f      	beq.n	8000b6c <__sfvwrite_r+0x1d4>
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8000b52:	eba3 030a 	sub.w	r3, r3, sl
 8000b56:	44d3      	add	fp, sl
 8000b58:	eba5 050a 	sub.w	r5, r5, sl
 8000b5c:	f8c8 3008 	str.w	r3, [r8, #8]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d1d2      	bne.n	8000b0a <__sfvwrite_r+0x172>
 8000b64:	2000      	movs	r0, #0
 8000b66:	b003      	add	sp, #12
 8000b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b6c:	4621      	mov	r1, r4
 8000b6e:	4648      	mov	r0, r9
 8000b70:	f000 fb5a 	bl	8001228 <_fflush_r>
 8000b74:	2800      	cmp	r0, #0
 8000b76:	d0ea      	beq.n	8000b4e <__sfvwrite_r+0x1b6>
 8000b78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000b7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b80:	81a3      	strh	r3, [r4, #12]
 8000b82:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b86:	b003      	add	sp, #12
 8000b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b8c:	2000      	movs	r0, #0
 8000b8e:	4770      	bx	lr
 8000b90:	6875      	ldr	r5, [r6, #4]
 8000b92:	4633      	mov	r3, r6
 8000b94:	3608      	adds	r6, #8
 8000b96:	2d00      	cmp	r5, #0
 8000b98:	d0fa      	beq.n	8000b90 <__sfvwrite_r+0x1f8>
 8000b9a:	f8d3 b000 	ldr.w	fp, [r3]
 8000b9e:	462a      	mov	r2, r5
 8000ba0:	210a      	movs	r1, #10
 8000ba2:	4658      	mov	r0, fp
 8000ba4:	f000 fd2c 	bl	8001600 <memchr>
 8000ba8:	2800      	cmp	r0, #0
 8000baa:	d065      	beq.n	8000c78 <__sfvwrite_r+0x2e0>
 8000bac:	3001      	adds	r0, #1
 8000bae:	eba0 070b 	sub.w	r7, r0, fp
 8000bb2:	e7ae      	b.n	8000b12 <__sfvwrite_r+0x17a>
 8000bb4:	6922      	ldr	r2, [r4, #16]
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d314      	bcc.n	8000be4 <__sfvwrite_r+0x24c>
 8000bba:	6962      	ldr	r2, [r4, #20]
 8000bbc:	42ba      	cmp	r2, r7
 8000bbe:	d811      	bhi.n	8000be4 <__sfvwrite_r+0x24c>
 8000bc0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8000bc4:	42bb      	cmp	r3, r7
 8000bc6:	bf28      	it	cs
 8000bc8:	463b      	movcs	r3, r7
 8000bca:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8000bcc:	fb93 f3f2 	sdiv	r3, r3, r2
 8000bd0:	6a21      	ldr	r1, [r4, #32]
 8000bd2:	fb02 f303 	mul.w	r3, r2, r3
 8000bd6:	4648      	mov	r0, r9
 8000bd8:	4652      	mov	r2, sl
 8000bda:	47a8      	blx	r5
 8000bdc:	1e05      	subs	r5, r0, #0
 8000bde:	ddcb      	ble.n	8000b78 <__sfvwrite_r+0x1e0>
 8000be0:	1b7f      	subs	r7, r7, r5
 8000be2:	e77b      	b.n	8000adc <__sfvwrite_r+0x144>
 8000be4:	42b9      	cmp	r1, r7
 8000be6:	bf28      	it	cs
 8000be8:	4639      	movcs	r1, r7
 8000bea:	460d      	mov	r5, r1
 8000bec:	4618      	mov	r0, r3
 8000bee:	460a      	mov	r2, r1
 8000bf0:	4651      	mov	r1, sl
 8000bf2:	f000 fc5d 	bl	80014b0 <memmove>
 8000bf6:	68a1      	ldr	r1, [r4, #8]
 8000bf8:	6823      	ldr	r3, [r4, #0]
 8000bfa:	1b49      	subs	r1, r1, r5
 8000bfc:	442b      	add	r3, r5
 8000bfe:	60a1      	str	r1, [r4, #8]
 8000c00:	6023      	str	r3, [r4, #0]
 8000c02:	2900      	cmp	r1, #0
 8000c04:	d1ec      	bne.n	8000be0 <__sfvwrite_r+0x248>
 8000c06:	4621      	mov	r1, r4
 8000c08:	4648      	mov	r0, r9
 8000c0a:	f000 fb0d 	bl	8001228 <_fflush_r>
 8000c0e:	2800      	cmp	r0, #0
 8000c10:	d0e6      	beq.n	8000be0 <__sfvwrite_r+0x248>
 8000c12:	e7b1      	b.n	8000b78 <__sfvwrite_r+0x1e0>
 8000c14:	46bb      	mov	fp, r7
 8000c16:	463a      	mov	r2, r7
 8000c18:	e752      	b.n	8000ac0 <__sfvwrite_r+0x128>
 8000c1a:	4659      	mov	r1, fp
 8000c1c:	9201      	str	r2, [sp, #4]
 8000c1e:	f000 fc47 	bl	80014b0 <memmove>
 8000c22:	9a01      	ldr	r2, [sp, #4]
 8000c24:	68a3      	ldr	r3, [r4, #8]
 8000c26:	1a9b      	subs	r3, r3, r2
 8000c28:	60a3      	str	r3, [r4, #8]
 8000c2a:	6823      	ldr	r3, [r4, #0]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	6023      	str	r3, [r4, #0]
 8000c30:	4692      	mov	sl, r2
 8000c32:	e788      	b.n	8000b46 <__sfvwrite_r+0x1ae>
 8000c34:	4659      	mov	r1, fp
 8000c36:	4652      	mov	r2, sl
 8000c38:	f000 fc3a 	bl	80014b0 <memmove>
 8000c3c:	6823      	ldr	r3, [r4, #0]
 8000c3e:	4453      	add	r3, sl
 8000c40:	6023      	str	r3, [r4, #0]
 8000c42:	4621      	mov	r1, r4
 8000c44:	4648      	mov	r0, r9
 8000c46:	f000 faef 	bl	8001228 <_fflush_r>
 8000c4a:	2800      	cmp	r0, #0
 8000c4c:	f43f af7b 	beq.w	8000b46 <__sfvwrite_r+0x1ae>
 8000c50:	e792      	b.n	8000b78 <__sfvwrite_r+0x1e0>
 8000c52:	4648      	mov	r0, r9
 8000c54:	f000 fd86 	bl	8001764 <_realloc_r>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2800      	cmp	r0, #0
 8000c5c:	f47f af26 	bne.w	8000aac <__sfvwrite_r+0x114>
 8000c60:	6921      	ldr	r1, [r4, #16]
 8000c62:	4648      	mov	r0, r9
 8000c64:	f000 fbc6 	bl	80013f4 <_free_r>
 8000c68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000c6c:	220c      	movs	r2, #12
 8000c6e:	f8c9 2000 	str.w	r2, [r9]
 8000c72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000c76:	e781      	b.n	8000b7c <__sfvwrite_r+0x1e4>
 8000c78:	1c6a      	adds	r2, r5, #1
 8000c7a:	4617      	mov	r7, r2
 8000c7c:	e74a      	b.n	8000b14 <__sfvwrite_r+0x17c>
 8000c7e:	220c      	movs	r2, #12
 8000c80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000c84:	f8c9 2000 	str.w	r2, [r9]
 8000c88:	e778      	b.n	8000b7c <__sfvwrite_r+0x1e4>
 8000c8a:	bf00      	nop
 8000c8c:	7ffffc00 	.word	0x7ffffc00

08000c90 <_init_signal_r>:
 8000c90:	b538      	push	{r3, r4, r5, lr}
 8000c92:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8000c94:	b10c      	cbz	r4, 8000c9a <_init_signal_r+0xa>
 8000c96:	2000      	movs	r0, #0
 8000c98:	bd38      	pop	{r3, r4, r5, pc}
 8000c9a:	2180      	movs	r1, #128	@ 0x80
 8000c9c:	4605      	mov	r5, r0
 8000c9e:	f000 fb29 	bl	80012f4 <_malloc_r>
 8000ca2:	4602      	mov	r2, r0
 8000ca4:	63e8      	str	r0, [r5, #60]	@ 0x3c
 8000ca6:	b130      	cbz	r0, 8000cb6 <_init_signal_r+0x26>
 8000ca8:	1f03      	subs	r3, r0, #4
 8000caa:	327c      	adds	r2, #124	@ 0x7c
 8000cac:	f843 4f04 	str.w	r4, [r3, #4]!
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d1fb      	bne.n	8000cac <_init_signal_r+0x1c>
 8000cb4:	e7ef      	b.n	8000c96 <_init_signal_r+0x6>
 8000cb6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000cba:	bd38      	pop	{r3, r4, r5, pc}

08000cbc <_signal_r>:
 8000cbc:	b530      	push	{r4, r5, lr}
 8000cbe:	291f      	cmp	r1, #31
 8000cc0:	b083      	sub	sp, #12
 8000cc2:	4605      	mov	r5, r0
 8000cc4:	d808      	bhi.n	8000cd8 <_signal_r+0x1c>
 8000cc6:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8000cc8:	460c      	mov	r4, r1
 8000cca:	b153      	cbz	r3, 8000ce2 <_signal_r+0x26>
 8000ccc:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8000cd0:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8000cd4:	b003      	add	sp, #12
 8000cd6:	bd30      	pop	{r4, r5, pc}
 8000cd8:	2316      	movs	r3, #22
 8000cda:	6003      	str	r3, [r0, #0]
 8000cdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ce0:	e7f8      	b.n	8000cd4 <_signal_r+0x18>
 8000ce2:	2180      	movs	r1, #128	@ 0x80
 8000ce4:	9201      	str	r2, [sp, #4]
 8000ce6:	f000 fb05 	bl	80012f4 <_malloc_r>
 8000cea:	9a01      	ldr	r2, [sp, #4]
 8000cec:	63e8      	str	r0, [r5, #60]	@ 0x3c
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2800      	cmp	r0, #0
 8000cf2:	d0f3      	beq.n	8000cdc <_signal_r+0x20>
 8000cf4:	1f01      	subs	r1, r0, #4
 8000cf6:	f100 057c 	add.w	r5, r0, #124	@ 0x7c
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f841 0f04 	str.w	r0, [r1, #4]!
 8000d00:	42a9      	cmp	r1, r5
 8000d02:	d1fb      	bne.n	8000cfc <_signal_r+0x40>
 8000d04:	e7e2      	b.n	8000ccc <_signal_r+0x10>
 8000d06:	bf00      	nop

08000d08 <_raise_r>:
 8000d08:	291f      	cmp	r1, #31
 8000d0a:	b538      	push	{r3, r4, r5, lr}
 8000d0c:	4605      	mov	r5, r0
 8000d0e:	d81e      	bhi.n	8000d4e <_raise_r+0x46>
 8000d10:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8000d12:	460c      	mov	r4, r1
 8000d14:	b16a      	cbz	r2, 8000d32 <_raise_r+0x2a>
 8000d16:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8000d1a:	b153      	cbz	r3, 8000d32 <_raise_r+0x2a>
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d006      	beq.n	8000d2e <_raise_r+0x26>
 8000d20:	1c59      	adds	r1, r3, #1
 8000d22:	d010      	beq.n	8000d46 <_raise_r+0x3e>
 8000d24:	2100      	movs	r1, #0
 8000d26:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8000d2a:	4620      	mov	r0, r4
 8000d2c:	4798      	blx	r3
 8000d2e:	2000      	movs	r0, #0
 8000d30:	bd38      	pop	{r3, r4, r5, pc}
 8000d32:	4628      	mov	r0, r5
 8000d34:	f001 f836 	bl	8001da4 <_getpid_r>
 8000d38:	4622      	mov	r2, r4
 8000d3a:	4601      	mov	r1, r0
 8000d3c:	4628      	mov	r0, r5
 8000d3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d42:	f001 b819 	b.w	8001d78 <_kill_r>
 8000d46:	2316      	movs	r3, #22
 8000d48:	6003      	str	r3, [r0, #0]
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	bd38      	pop	{r3, r4, r5, pc}
 8000d4e:	2316      	movs	r3, #22
 8000d50:	6003      	str	r3, [r0, #0]
 8000d52:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d56:	bd38      	pop	{r3, r4, r5, pc}

08000d58 <__sigtramp_r>:
 8000d58:	291f      	cmp	r1, #31
 8000d5a:	d82a      	bhi.n	8000db2 <__sigtramp_r+0x5a>
 8000d5c:	b538      	push	{r3, r4, r5, lr}
 8000d5e:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8000d60:	460c      	mov	r4, r1
 8000d62:	4605      	mov	r5, r0
 8000d64:	b1a3      	cbz	r3, 8000d90 <__sigtramp_r+0x38>
 8000d66:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
 8000d6a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8000d6e:	b14a      	cbz	r2, 8000d84 <__sigtramp_r+0x2c>
 8000d70:	1c51      	adds	r1, r2, #1
 8000d72:	d00b      	beq.n	8000d8c <__sigtramp_r+0x34>
 8000d74:	2a01      	cmp	r2, #1
 8000d76:	d007      	beq.n	8000d88 <__sigtramp_r+0x30>
 8000d78:	2500      	movs	r5, #0
 8000d7a:	4620      	mov	r0, r4
 8000d7c:	601d      	str	r5, [r3, #0]
 8000d7e:	4790      	blx	r2
 8000d80:	4628      	mov	r0, r5
 8000d82:	bd38      	pop	{r3, r4, r5, pc}
 8000d84:	2001      	movs	r0, #1
 8000d86:	bd38      	pop	{r3, r4, r5, pc}
 8000d88:	2003      	movs	r0, #3
 8000d8a:	bd38      	pop	{r3, r4, r5, pc}
 8000d8c:	2002      	movs	r0, #2
 8000d8e:	bd38      	pop	{r3, r4, r5, pc}
 8000d90:	2180      	movs	r1, #128	@ 0x80
 8000d92:	f000 faaf 	bl	80012f4 <_malloc_r>
 8000d96:	4603      	mov	r3, r0
 8000d98:	63e8      	str	r0, [r5, #60]	@ 0x3c
 8000d9a:	b138      	cbz	r0, 8000dac <__sigtramp_r+0x54>
 8000d9c:	1f02      	subs	r2, r0, #4
 8000d9e:	2100      	movs	r1, #0
 8000da0:	307c      	adds	r0, #124	@ 0x7c
 8000da2:	f842 1f04 	str.w	r1, [r2, #4]!
 8000da6:	4282      	cmp	r2, r0
 8000da8:	d1fb      	bne.n	8000da2 <__sigtramp_r+0x4a>
 8000daa:	e7dc      	b.n	8000d66 <__sigtramp_r+0xe>
 8000dac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000db0:	bd38      	pop	{r3, r4, r5, pc}
 8000db2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000db6:	4770      	bx	lr

08000db8 <raise>:
 8000db8:	b538      	push	{r3, r4, r5, lr}
 8000dba:	4b13      	ldr	r3, [pc, #76]	@ (8000e08 <raise+0x50>)
 8000dbc:	281f      	cmp	r0, #31
 8000dbe:	681d      	ldr	r5, [r3, #0]
 8000dc0:	d81d      	bhi.n	8000dfe <raise+0x46>
 8000dc2:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 8000dc4:	4604      	mov	r4, r0
 8000dc6:	b162      	cbz	r2, 8000de2 <raise+0x2a>
 8000dc8:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 8000dcc:	b14b      	cbz	r3, 8000de2 <raise+0x2a>
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d005      	beq.n	8000dde <raise+0x26>
 8000dd2:	1c59      	adds	r1, r3, #1
 8000dd4:	d00f      	beq.n	8000df6 <raise+0x3e>
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
 8000ddc:	4798      	blx	r3
 8000dde:	2000      	movs	r0, #0
 8000de0:	bd38      	pop	{r3, r4, r5, pc}
 8000de2:	4628      	mov	r0, r5
 8000de4:	f000 ffde 	bl	8001da4 <_getpid_r>
 8000de8:	4622      	mov	r2, r4
 8000dea:	4601      	mov	r1, r0
 8000dec:	4628      	mov	r0, r5
 8000dee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000df2:	f000 bfc1 	b.w	8001d78 <_kill_r>
 8000df6:	2316      	movs	r3, #22
 8000df8:	602b      	str	r3, [r5, #0]
 8000dfa:	2001      	movs	r0, #1
 8000dfc:	bd38      	pop	{r3, r4, r5, pc}
 8000dfe:	2316      	movs	r3, #22
 8000e00:	602b      	str	r3, [r5, #0]
 8000e02:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e06:	bd38      	pop	{r3, r4, r5, pc}
 8000e08:	20000020 	.word	0x20000020

08000e0c <signal>:
 8000e0c:	4b11      	ldr	r3, [pc, #68]	@ (8000e54 <signal+0x48>)
 8000e0e:	281f      	cmp	r0, #31
 8000e10:	b570      	push	{r4, r5, r6, lr}
 8000e12:	681e      	ldr	r6, [r3, #0]
 8000e14:	d808      	bhi.n	8000e28 <signal+0x1c>
 8000e16:	6bf3      	ldr	r3, [r6, #60]	@ 0x3c
 8000e18:	4604      	mov	r4, r0
 8000e1a:	460d      	mov	r5, r1
 8000e1c:	b14b      	cbz	r3, 8000e32 <signal+0x26>
 8000e1e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8000e22:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
 8000e26:	bd70      	pop	{r4, r5, r6, pc}
 8000e28:	2316      	movs	r3, #22
 8000e2a:	6033      	str	r3, [r6, #0]
 8000e2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e30:	bd70      	pop	{r4, r5, r6, pc}
 8000e32:	2180      	movs	r1, #128	@ 0x80
 8000e34:	4630      	mov	r0, r6
 8000e36:	f000 fa5d 	bl	80012f4 <_malloc_r>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	63f0      	str	r0, [r6, #60]	@ 0x3c
 8000e3e:	2800      	cmp	r0, #0
 8000e40:	d0f4      	beq.n	8000e2c <signal+0x20>
 8000e42:	1f02      	subs	r2, r0, #4
 8000e44:	2100      	movs	r1, #0
 8000e46:	307c      	adds	r0, #124	@ 0x7c
 8000e48:	f842 1f04 	str.w	r1, [r2, #4]!
 8000e4c:	4282      	cmp	r2, r0
 8000e4e:	d1fb      	bne.n	8000e48 <signal+0x3c>
 8000e50:	e7e5      	b.n	8000e1e <signal+0x12>
 8000e52:	bf00      	nop
 8000e54:	20000020 	.word	0x20000020

08000e58 <_init_signal>:
 8000e58:	b538      	push	{r3, r4, r5, lr}
 8000e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e88 <_init_signal+0x30>)
 8000e5c:	681d      	ldr	r5, [r3, #0]
 8000e5e:	6bec      	ldr	r4, [r5, #60]	@ 0x3c
 8000e60:	b10c      	cbz	r4, 8000e66 <_init_signal+0xe>
 8000e62:	2000      	movs	r0, #0
 8000e64:	bd38      	pop	{r3, r4, r5, pc}
 8000e66:	2180      	movs	r1, #128	@ 0x80
 8000e68:	4628      	mov	r0, r5
 8000e6a:	f000 fa43 	bl	80012f4 <_malloc_r>
 8000e6e:	63e8      	str	r0, [r5, #60]	@ 0x3c
 8000e70:	b138      	cbz	r0, 8000e82 <_init_signal+0x2a>
 8000e72:	1f03      	subs	r3, r0, #4
 8000e74:	f100 027c 	add.w	r2, r0, #124	@ 0x7c
 8000e78:	f843 4f04 	str.w	r4, [r3, #4]!
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d1fb      	bne.n	8000e78 <_init_signal+0x20>
 8000e80:	e7ef      	b.n	8000e62 <_init_signal+0xa>
 8000e82:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e86:	bd38      	pop	{r3, r4, r5, pc}
 8000e88:	20000020 	.word	0x20000020

08000e8c <__sigtramp>:
 8000e8c:	b538      	push	{r3, r4, r5, lr}
 8000e8e:	4b17      	ldr	r3, [pc, #92]	@ (8000eec <__sigtramp+0x60>)
 8000e90:	281f      	cmp	r0, #31
 8000e92:	681d      	ldr	r5, [r3, #0]
 8000e94:	d826      	bhi.n	8000ee4 <__sigtramp+0x58>
 8000e96:	4604      	mov	r4, r0
 8000e98:	6be8      	ldr	r0, [r5, #60]	@ 0x3c
 8000e9a:	b1a0      	cbz	r0, 8000ec6 <__sigtramp+0x3a>
 8000e9c:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 8000ea0:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8000ea4:	b14b      	cbz	r3, 8000eba <__sigtramp+0x2e>
 8000ea6:	1c5a      	adds	r2, r3, #1
 8000ea8:	d00b      	beq.n	8000ec2 <__sigtramp+0x36>
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d007      	beq.n	8000ebe <__sigtramp+0x32>
 8000eae:	2500      	movs	r5, #0
 8000eb0:	6005      	str	r5, [r0, #0]
 8000eb2:	4620      	mov	r0, r4
 8000eb4:	4798      	blx	r3
 8000eb6:	4628      	mov	r0, r5
 8000eb8:	bd38      	pop	{r3, r4, r5, pc}
 8000eba:	2001      	movs	r0, #1
 8000ebc:	bd38      	pop	{r3, r4, r5, pc}
 8000ebe:	2003      	movs	r0, #3
 8000ec0:	bd38      	pop	{r3, r4, r5, pc}
 8000ec2:	2002      	movs	r0, #2
 8000ec4:	bd38      	pop	{r3, r4, r5, pc}
 8000ec6:	2180      	movs	r1, #128	@ 0x80
 8000ec8:	4628      	mov	r0, r5
 8000eca:	f000 fa13 	bl	80012f4 <_malloc_r>
 8000ece:	63e8      	str	r0, [r5, #60]	@ 0x3c
 8000ed0:	b140      	cbz	r0, 8000ee4 <__sigtramp+0x58>
 8000ed2:	1f03      	subs	r3, r0, #4
 8000ed4:	f100 017c 	add.w	r1, r0, #124	@ 0x7c
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f843 2f04 	str.w	r2, [r3, #4]!
 8000ede:	428b      	cmp	r3, r1
 8000ee0:	d1fb      	bne.n	8000eda <__sigtramp+0x4e>
 8000ee2:	e7db      	b.n	8000e9c <__sigtramp+0x10>
 8000ee4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ee8:	bd38      	pop	{r3, r4, r5, pc}
 8000eea:	bf00      	nop
 8000eec:	20000020 	.word	0x20000020

08000ef0 <__fp_lock>:
 8000ef0:	2000      	movs	r0, #0
 8000ef2:	4770      	bx	lr

08000ef4 <stdio_exit_handler>:
 8000ef4:	4a02      	ldr	r2, [pc, #8]	@ (8000f00 <stdio_exit_handler+0xc>)
 8000ef6:	4903      	ldr	r1, [pc, #12]	@ (8000f04 <stdio_exit_handler+0x10>)
 8000ef8:	4803      	ldr	r0, [pc, #12]	@ (8000f08 <stdio_exit_handler+0x14>)
 8000efa:	f000 bb59 	b.w	80015b0 <_fwalk_sglue>
 8000efe:	bf00      	nop
 8000f00:	20000070 	.word	0x20000070
 8000f04:	08001229 	.word	0x08001229
 8000f08:	20000024 	.word	0x20000024

08000f0c <cleanup_stdio>:
 8000f0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f40 <cleanup_stdio+0x34>)
 8000f0e:	6841      	ldr	r1, [r0, #4]
 8000f10:	4299      	cmp	r1, r3
 8000f12:	b510      	push	{r4, lr}
 8000f14:	4604      	mov	r4, r0
 8000f16:	d001      	beq.n	8000f1c <cleanup_stdio+0x10>
 8000f18:	f000 f986 	bl	8001228 <_fflush_r>
 8000f1c:	68a1      	ldr	r1, [r4, #8]
 8000f1e:	4b09      	ldr	r3, [pc, #36]	@ (8000f44 <cleanup_stdio+0x38>)
 8000f20:	4299      	cmp	r1, r3
 8000f22:	d002      	beq.n	8000f2a <cleanup_stdio+0x1e>
 8000f24:	4620      	mov	r0, r4
 8000f26:	f000 f97f 	bl	8001228 <_fflush_r>
 8000f2a:	68e1      	ldr	r1, [r4, #12]
 8000f2c:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <cleanup_stdio+0x3c>)
 8000f2e:	4299      	cmp	r1, r3
 8000f30:	d004      	beq.n	8000f3c <cleanup_stdio+0x30>
 8000f32:	4620      	mov	r0, r4
 8000f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000f38:	f000 b976 	b.w	8001228 <_fflush_r>
 8000f3c:	bd10      	pop	{r4, pc}
 8000f3e:	bf00      	nop
 8000f40:	200027d8 	.word	0x200027d8
 8000f44:	20002840 	.word	0x20002840
 8000f48:	200028a8 	.word	0x200028a8

08000f4c <__fp_unlock>:
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	4770      	bx	lr

08000f50 <global_stdio_init.part.0>:
 8000f50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000f54:	4c2a      	ldr	r4, [pc, #168]	@ (8001000 <global_stdio_init.part.0+0xb0>)
 8000f56:	492b      	ldr	r1, [pc, #172]	@ (8001004 <global_stdio_init.part.0+0xb4>)
 8000f58:	f8df 90ac 	ldr.w	r9, [pc, #172]	@ 8001008 <global_stdio_init.part.0+0xb8>
 8000f5c:	f8df 80ac 	ldr.w	r8, [pc, #172]	@ 800100c <global_stdio_init.part.0+0xbc>
 8000f60:	4f2b      	ldr	r7, [pc, #172]	@ (8001010 <global_stdio_init.part.0+0xc0>)
 8000f62:	f8c4 1138 	str.w	r1, [r4, #312]	@ 0x138
 8000f66:	2500      	movs	r5, #0
 8000f68:	2304      	movs	r3, #4
 8000f6a:	2208      	movs	r2, #8
 8000f6c:	4629      	mov	r1, r5
 8000f6e:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 8000f72:	4e28      	ldr	r6, [pc, #160]	@ (8001014 <global_stdio_init.part.0+0xc4>)
 8000f74:	60e3      	str	r3, [r4, #12]
 8000f76:	e9c4 5500 	strd	r5, r5, [r4]
 8000f7a:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000f7e:	60a5      	str	r5, [r4, #8]
 8000f80:	6665      	str	r5, [r4, #100]	@ 0x64
 8000f82:	61a5      	str	r5, [r4, #24]
 8000f84:	f7ff fa16 	bl	80003b4 <memset>
 8000f88:	4b23      	ldr	r3, [pc, #140]	@ (8001018 <global_stdio_init.part.0+0xc8>)
 8000f8a:	6763      	str	r3, [r4, #116]	@ 0x74
 8000f8c:	2208      	movs	r2, #8
 8000f8e:	4629      	mov	r1, r5
 8000f90:	f104 00c4 	add.w	r0, r4, #196	@ 0xc4
 8000f94:	e9c4 4908 	strd	r4, r9, [r4, #32]
 8000f98:	e9c4 870a 	strd	r8, r7, [r4, #40]	@ 0x28
 8000f9c:	e9c4 551a 	strd	r5, r5, [r4, #104]	@ 0x68
 8000fa0:	e9c4 551e 	strd	r5, r5, [r4, #120]	@ 0x78
 8000fa4:	6725      	str	r5, [r4, #112]	@ 0x70
 8000fa6:	f8c4 50cc 	str.w	r5, [r4, #204]	@ 0xcc
 8000faa:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
 8000fae:	6326      	str	r6, [r4, #48]	@ 0x30
 8000fb0:	f7ff fa00 	bl	80003b4 <memset>
 8000fb4:	4b19      	ldr	r3, [pc, #100]	@ (800101c <global_stdio_init.part.0+0xcc>)
 8000fb6:	f8c4 30dc 	str.w	r3, [r4, #220]	@ 0xdc
 8000fba:	4629      	mov	r1, r5
 8000fbc:	f104 0368 	add.w	r3, r4, #104	@ 0x68
 8000fc0:	2208      	movs	r2, #8
 8000fc2:	f504 7096 	add.w	r0, r4, #300	@ 0x12c
 8000fc6:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
 8000fca:	e9c4 9823 	strd	r9, r8, [r4, #140]	@ 0x8c
 8000fce:	e9c4 7625 	strd	r7, r6, [r4, #148]	@ 0x94
 8000fd2:	e9c4 5534 	strd	r5, r5, [r4, #208]	@ 0xd0
 8000fd6:	e9c4 5538 	strd	r5, r5, [r4, #224]	@ 0xe0
 8000fda:	f8c4 50d8 	str.w	r5, [r4, #216]	@ 0xd8
 8000fde:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 8000fe2:	f8c4 50e8 	str.w	r5, [r4, #232]	@ 0xe8
 8000fe6:	f7ff f9e5 	bl	80003b4 <memset>
 8000fea:	f104 03d0 	add.w	r3, r4, #208	@ 0xd0
 8000fee:	e9c4 983d 	strd	r9, r8, [r4, #244]	@ 0xf4
 8000ff2:	e9c4 763f 	strd	r7, r6, [r4, #252]	@ 0xfc
 8000ff6:	f8c4 30f0 	str.w	r3, [r4, #240]	@ 0xf0
 8000ffa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000ffe:	bf00      	nop
 8001000:	200027d8 	.word	0x200027d8
 8001004:	08000ef5 	.word	0x08000ef5
 8001008:	08001cd5 	.word	0x08001cd5
 800100c:	08001cfd 	.word	0x08001cfd
 8001010:	08001d3d 	.word	0x08001d3d
 8001014:	08001d61 	.word	0x08001d61
 8001018:	00010009 	.word	0x00010009
 800101c:	00020012 	.word	0x00020012

08001020 <__sfp>:
 8001020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001022:	4b25      	ldr	r3, [pc, #148]	@ (80010b8 <__sfp+0x98>)
 8001024:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8001028:	4606      	mov	r6, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d03c      	beq.n	80010a8 <__sfp+0x88>
 800102e:	4f23      	ldr	r7, [pc, #140]	@ (80010bc <__sfp+0x9c>)
 8001030:	e9d7 3401 	ldrd	r3, r4, [r7, #4]
 8001034:	3b01      	subs	r3, #1
 8001036:	d504      	bpl.n	8001042 <__sfp+0x22>
 8001038:	e01d      	b.n	8001076 <__sfp+0x56>
 800103a:	1c5a      	adds	r2, r3, #1
 800103c:	f104 0468 	add.w	r4, r4, #104	@ 0x68
 8001040:	d019      	beq.n	8001076 <__sfp+0x56>
 8001042:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001046:	3b01      	subs	r3, #1
 8001048:	2d00      	cmp	r5, #0
 800104a:	d1f6      	bne.n	800103a <__sfp+0x1a>
 800104c:	4b1c      	ldr	r3, [pc, #112]	@ (80010c0 <__sfp+0xa0>)
 800104e:	60e3      	str	r3, [r4, #12]
 8001050:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001054:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001058:	6665      	str	r5, [r4, #100]	@ 0x64
 800105a:	6025      	str	r5, [r4, #0]
 800105c:	61a5      	str	r5, [r4, #24]
 800105e:	2208      	movs	r2, #8
 8001060:	4629      	mov	r1, r5
 8001062:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 8001066:	f7ff f9a5 	bl	80003b4 <memset>
 800106a:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 800106e:	e9c4 5512 	strd	r5, r5, [r4, #72]	@ 0x48
 8001072:	4620      	mov	r0, r4
 8001074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001076:	683d      	ldr	r5, [r7, #0]
 8001078:	b10d      	cbz	r5, 800107e <__sfp+0x5e>
 800107a:	462f      	mov	r7, r5
 800107c:	e7d8      	b.n	8001030 <__sfp+0x10>
 800107e:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 8001082:	4630      	mov	r0, r6
 8001084:	f000 f936 	bl	80012f4 <_malloc_r>
 8001088:	4604      	mov	r4, r0
 800108a:	b180      	cbz	r0, 80010ae <__sfp+0x8e>
 800108c:	2304      	movs	r3, #4
 800108e:	e9c0 5300 	strd	r5, r3, [r0]
 8001092:	300c      	adds	r0, #12
 8001094:	4629      	mov	r1, r5
 8001096:	60a0      	str	r0, [r4, #8]
 8001098:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 800109c:	4625      	mov	r5, r4
 800109e:	f7ff f989 	bl	80003b4 <memset>
 80010a2:	603c      	str	r4, [r7, #0]
 80010a4:	462f      	mov	r7, r5
 80010a6:	e7c3      	b.n	8001030 <__sfp+0x10>
 80010a8:	f7ff ff52 	bl	8000f50 <global_stdio_init.part.0>
 80010ac:	e7bf      	b.n	800102e <__sfp+0xe>
 80010ae:	230c      	movs	r3, #12
 80010b0:	6038      	str	r0, [r7, #0]
 80010b2:	6033      	str	r3, [r6, #0]
 80010b4:	e7dd      	b.n	8001072 <__sfp+0x52>
 80010b6:	bf00      	nop
 80010b8:	200027d8 	.word	0x200027d8
 80010bc:	20000070 	.word	0x20000070
 80010c0:	ffff0001 	.word	0xffff0001

080010c4 <__sinit>:
 80010c4:	6a03      	ldr	r3, [r0, #32]
 80010c6:	b103      	cbz	r3, 80010ca <__sinit+0x6>
 80010c8:	4770      	bx	lr
 80010ca:	4b04      	ldr	r3, [pc, #16]	@ (80010dc <__sinit+0x18>)
 80010cc:	4a04      	ldr	r2, [pc, #16]	@ (80010e0 <__sinit+0x1c>)
 80010ce:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80010d2:	6202      	str	r2, [r0, #32]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d1f7      	bne.n	80010c8 <__sinit+0x4>
 80010d8:	e73a      	b.n	8000f50 <global_stdio_init.part.0>
 80010da:	bf00      	nop
 80010dc:	200027d8 	.word	0x200027d8
 80010e0:	08000f0d 	.word	0x08000f0d

080010e4 <__sfp_lock_acquire>:
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop

080010e8 <__sfp_lock_release>:
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop

080010ec <__fp_lock_all>:
 80010ec:	4a02      	ldr	r2, [pc, #8]	@ (80010f8 <__fp_lock_all+0xc>)
 80010ee:	4903      	ldr	r1, [pc, #12]	@ (80010fc <__fp_lock_all+0x10>)
 80010f0:	2000      	movs	r0, #0
 80010f2:	f000 ba5d 	b.w	80015b0 <_fwalk_sglue>
 80010f6:	bf00      	nop
 80010f8:	20000070 	.word	0x20000070
 80010fc:	08000ef1 	.word	0x08000ef1

08001100 <__fp_unlock_all>:
 8001100:	4a02      	ldr	r2, [pc, #8]	@ (800110c <__fp_unlock_all+0xc>)
 8001102:	4903      	ldr	r1, [pc, #12]	@ (8001110 <__fp_unlock_all+0x10>)
 8001104:	2000      	movs	r0, #0
 8001106:	f000 ba53 	b.w	80015b0 <_fwalk_sglue>
 800110a:	bf00      	nop
 800110c:	20000070 	.word	0x20000070
 8001110:	08000f4d 	.word	0x08000f4d

08001114 <__sflush_r>:
 8001114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001116:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 800111a:	071e      	lsls	r6, r3, #28
 800111c:	460c      	mov	r4, r1
 800111e:	4607      	mov	r7, r0
 8001120:	d439      	bmi.n	8001196 <__sflush_r+0x82>
 8001122:	684a      	ldr	r2, [r1, #4]
 8001124:	2a00      	cmp	r2, #0
 8001126:	dd53      	ble.n	80011d0 <__sflush_r+0xbc>
 8001128:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 800112a:	2d00      	cmp	r5, #0
 800112c:	d031      	beq.n	8001192 <__sflush_r+0x7e>
 800112e:	2200      	movs	r2, #0
 8001130:	683e      	ldr	r6, [r7, #0]
 8001132:	603a      	str	r2, [r7, #0]
 8001134:	f413 5280 	ands.w	r2, r3, #4096	@ 0x1000
 8001138:	6a21      	ldr	r1, [r4, #32]
 800113a:	d155      	bne.n	80011e8 <__sflush_r+0xd4>
 800113c:	2301      	movs	r3, #1
 800113e:	4638      	mov	r0, r7
 8001140:	47a8      	blx	r5
 8001142:	1c45      	adds	r5, r0, #1
 8001144:	4602      	mov	r2, r0
 8001146:	d063      	beq.n	8001210 <__sflush_r+0xfc>
 8001148:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800114c:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 800114e:	6a21      	ldr	r1, [r4, #32]
 8001150:	0758      	lsls	r0, r3, #29
 8001152:	d505      	bpl.n	8001160 <__sflush_r+0x4c>
 8001154:	6863      	ldr	r3, [r4, #4]
 8001156:	1ad2      	subs	r2, r2, r3
 8001158:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800115a:	b10b      	cbz	r3, 8001160 <__sflush_r+0x4c>
 800115c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800115e:	1ad2      	subs	r2, r2, r3
 8001160:	2300      	movs	r3, #0
 8001162:	4638      	mov	r0, r7
 8001164:	47a8      	blx	r5
 8001166:	1c42      	adds	r2, r0, #1
 8001168:	d040      	beq.n	80011ec <__sflush_r+0xd8>
 800116a:	2300      	movs	r3, #0
 800116c:	6063      	str	r3, [r4, #4]
 800116e:	6923      	ldr	r3, [r4, #16]
 8001170:	6023      	str	r3, [r4, #0]
 8001172:	89a3      	ldrh	r3, [r4, #12]
 8001174:	04db      	lsls	r3, r3, #19
 8001176:	d500      	bpl.n	800117a <__sflush_r+0x66>
 8001178:	6560      	str	r0, [r4, #84]	@ 0x54
 800117a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800117c:	603e      	str	r6, [r7, #0]
 800117e:	b141      	cbz	r1, 8001192 <__sflush_r+0x7e>
 8001180:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001184:	4299      	cmp	r1, r3
 8001186:	d002      	beq.n	800118e <__sflush_r+0x7a>
 8001188:	4638      	mov	r0, r7
 800118a:	f000 f933 	bl	80013f4 <_free_r>
 800118e:	2300      	movs	r3, #0
 8001190:	6363      	str	r3, [r4, #52]	@ 0x34
 8001192:	2000      	movs	r0, #0
 8001194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001196:	690e      	ldr	r6, [r1, #16]
 8001198:	2e00      	cmp	r6, #0
 800119a:	d0fa      	beq.n	8001192 <__sflush_r+0x7e>
 800119c:	079b      	lsls	r3, r3, #30
 800119e:	680d      	ldr	r5, [r1, #0]
 80011a0:	bf08      	it	eq
 80011a2:	694b      	ldreq	r3, [r1, #20]
 80011a4:	600e      	str	r6, [r1, #0]
 80011a6:	bf18      	it	ne
 80011a8:	2300      	movne	r3, #0
 80011aa:	1bad      	subs	r5, r5, r6
 80011ac:	608b      	str	r3, [r1, #8]
 80011ae:	e00c      	b.n	80011ca <__sflush_r+0xb6>
 80011b0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80011b4:	6a21      	ldr	r1, [r4, #32]
 80011b6:	462b      	mov	r3, r5
 80011b8:	4632      	mov	r2, r6
 80011ba:	4638      	mov	r0, r7
 80011bc:	47e0      	blx	ip
 80011be:	f1b0 0c00 	subs.w	ip, r0, #0
 80011c2:	eba5 050c 	sub.w	r5, r5, ip
 80011c6:	4466      	add	r6, ip
 80011c8:	dd06      	ble.n	80011d8 <__sflush_r+0xc4>
 80011ca:	2d00      	cmp	r5, #0
 80011cc:	dcf0      	bgt.n	80011b0 <__sflush_r+0x9c>
 80011ce:	e7e0      	b.n	8001192 <__sflush_r+0x7e>
 80011d0:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80011d2:	2a00      	cmp	r2, #0
 80011d4:	dca8      	bgt.n	8001128 <__sflush_r+0x14>
 80011d6:	e7dc      	b.n	8001192 <__sflush_r+0x7e>
 80011d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80011dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011e0:	81a3      	strh	r3, [r4, #12]
 80011e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80011e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80011ea:	e7b1      	b.n	8001150 <__sflush_r+0x3c>
 80011ec:	6839      	ldr	r1, [r7, #0]
 80011ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80011f2:	291d      	cmp	r1, #29
 80011f4:	d8f2      	bhi.n	80011dc <__sflush_r+0xc8>
 80011f6:	4a0b      	ldr	r2, [pc, #44]	@ (8001224 <__sflush_r+0x110>)
 80011f8:	40ca      	lsrs	r2, r1
 80011fa:	07d5      	lsls	r5, r2, #31
 80011fc:	d5ee      	bpl.n	80011dc <__sflush_r+0xc8>
 80011fe:	6922      	ldr	r2, [r4, #16]
 8001200:	6022      	str	r2, [r4, #0]
 8001202:	2200      	movs	r2, #0
 8001204:	6062      	str	r2, [r4, #4]
 8001206:	04da      	lsls	r2, r3, #19
 8001208:	d5b7      	bpl.n	800117a <__sflush_r+0x66>
 800120a:	2900      	cmp	r1, #0
 800120c:	d0b4      	beq.n	8001178 <__sflush_r+0x64>
 800120e:	e7b4      	b.n	800117a <__sflush_r+0x66>
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d098      	beq.n	8001148 <__sflush_r+0x34>
 8001216:	2b1d      	cmp	r3, #29
 8001218:	d001      	beq.n	800121e <__sflush_r+0x10a>
 800121a:	2b16      	cmp	r3, #22
 800121c:	d1dc      	bne.n	80011d8 <__sflush_r+0xc4>
 800121e:	603e      	str	r6, [r7, #0]
 8001220:	e7b7      	b.n	8001192 <__sflush_r+0x7e>
 8001222:	bf00      	nop
 8001224:	20400001 	.word	0x20400001

08001228 <_fflush_r>:
 8001228:	690b      	ldr	r3, [r1, #16]
 800122a:	b1b3      	cbz	r3, 800125a <_fflush_r+0x32>
 800122c:	b510      	push	{r4, lr}
 800122e:	4604      	mov	r4, r0
 8001230:	b082      	sub	sp, #8
 8001232:	b108      	cbz	r0, 8001238 <_fflush_r+0x10>
 8001234:	6a03      	ldr	r3, [r0, #32]
 8001236:	b15b      	cbz	r3, 8001250 <_fflush_r+0x28>
 8001238:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 800123c:	b913      	cbnz	r3, 8001244 <_fflush_r+0x1c>
 800123e:	2000      	movs	r0, #0
 8001240:	b002      	add	sp, #8
 8001242:	bd10      	pop	{r4, pc}
 8001244:	4620      	mov	r0, r4
 8001246:	b002      	add	sp, #8
 8001248:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800124c:	f7ff bf62 	b.w	8001114 <__sflush_r>
 8001250:	9101      	str	r1, [sp, #4]
 8001252:	f7ff ff37 	bl	80010c4 <__sinit>
 8001256:	9901      	ldr	r1, [sp, #4]
 8001258:	e7ee      	b.n	8001238 <_fflush_r+0x10>
 800125a:	2000      	movs	r0, #0
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop

08001260 <fflush>:
 8001260:	b1b8      	cbz	r0, 8001292 <fflush+0x32>
 8001262:	b538      	push	{r3, r4, r5, lr}
 8001264:	4a0d      	ldr	r2, [pc, #52]	@ (800129c <fflush+0x3c>)
 8001266:	6903      	ldr	r3, [r0, #16]
 8001268:	6815      	ldr	r5, [r2, #0]
 800126a:	4604      	mov	r4, r0
 800126c:	b12b      	cbz	r3, 800127a <fflush+0x1a>
 800126e:	b10d      	cbz	r5, 8001274 <fflush+0x14>
 8001270:	6a2b      	ldr	r3, [r5, #32]
 8001272:	b153      	cbz	r3, 800128a <fflush+0x2a>
 8001274:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001278:	b90b      	cbnz	r3, 800127e <fflush+0x1e>
 800127a:	2000      	movs	r0, #0
 800127c:	bd38      	pop	{r3, r4, r5, pc}
 800127e:	4621      	mov	r1, r4
 8001280:	4628      	mov	r0, r5
 8001282:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001286:	f7ff bf45 	b.w	8001114 <__sflush_r>
 800128a:	4628      	mov	r0, r5
 800128c:	f7ff ff1a 	bl	80010c4 <__sinit>
 8001290:	e7f0      	b.n	8001274 <fflush+0x14>
 8001292:	4a03      	ldr	r2, [pc, #12]	@ (80012a0 <fflush+0x40>)
 8001294:	4903      	ldr	r1, [pc, #12]	@ (80012a4 <fflush+0x44>)
 8001296:	4804      	ldr	r0, [pc, #16]	@ (80012a8 <fflush+0x48>)
 8001298:	f000 b98a 	b.w	80015b0 <_fwalk_sglue>
 800129c:	20000020 	.word	0x20000020
 80012a0:	20000070 	.word	0x20000070
 80012a4:	08001229 	.word	0x08001229
 80012a8:	20000024 	.word	0x20000024

080012ac <sbrk_aligned>:
 80012ac:	b570      	push	{r4, r5, r6, lr}
 80012ae:	4e10      	ldr	r6, [pc, #64]	@ (80012f0 <sbrk_aligned+0x44>)
 80012b0:	6833      	ldr	r3, [r6, #0]
 80012b2:	4605      	mov	r5, r0
 80012b4:	460c      	mov	r4, r1
 80012b6:	b1b3      	cbz	r3, 80012e6 <sbrk_aligned+0x3a>
 80012b8:	4621      	mov	r1, r4
 80012ba:	4628      	mov	r0, r5
 80012bc:	f000 fcf8 	bl	8001cb0 <_sbrk_r>
 80012c0:	1c43      	adds	r3, r0, #1
 80012c2:	d00c      	beq.n	80012de <sbrk_aligned+0x32>
 80012c4:	1cc4      	adds	r4, r0, #3
 80012c6:	f024 0403 	bic.w	r4, r4, #3
 80012ca:	42a0      	cmp	r0, r4
 80012cc:	d005      	beq.n	80012da <sbrk_aligned+0x2e>
 80012ce:	1a21      	subs	r1, r4, r0
 80012d0:	4628      	mov	r0, r5
 80012d2:	f000 fced 	bl	8001cb0 <_sbrk_r>
 80012d6:	3001      	adds	r0, #1
 80012d8:	d001      	beq.n	80012de <sbrk_aligned+0x32>
 80012da:	4620      	mov	r0, r4
 80012dc:	bd70      	pop	{r4, r5, r6, pc}
 80012de:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80012e2:	4620      	mov	r0, r4
 80012e4:	bd70      	pop	{r4, r5, r6, pc}
 80012e6:	4619      	mov	r1, r3
 80012e8:	f000 fce2 	bl	8001cb0 <_sbrk_r>
 80012ec:	6030      	str	r0, [r6, #0]
 80012ee:	e7e3      	b.n	80012b8 <sbrk_aligned+0xc>
 80012f0:	20002914 	.word	0x20002914

080012f4 <_malloc_r>:
 80012f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80012f8:	1ccd      	adds	r5, r1, #3
 80012fa:	f025 0503 	bic.w	r5, r5, #3
 80012fe:	3508      	adds	r5, #8
 8001300:	2d0c      	cmp	r5, #12
 8001302:	bf38      	it	cc
 8001304:	250c      	movcc	r5, #12
 8001306:	2d00      	cmp	r5, #0
 8001308:	4606      	mov	r6, r0
 800130a:	db18      	blt.n	800133e <_malloc_r+0x4a>
 800130c:	42a9      	cmp	r1, r5
 800130e:	d816      	bhi.n	800133e <_malloc_r+0x4a>
 8001310:	f8df 80dc 	ldr.w	r8, [pc, #220]	@ 80013f0 <_malloc_r+0xfc>
 8001314:	f000 fc2c 	bl	8001b70 <__malloc_lock>
 8001318:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800131c:	b1a2      	cbz	r2, 8001348 <_malloc_r+0x54>
 800131e:	4614      	mov	r4, r2
 8001320:	e003      	b.n	800132a <_malloc_r+0x36>
 8001322:	6863      	ldr	r3, [r4, #4]
 8001324:	4622      	mov	r2, r4
 8001326:	b17b      	cbz	r3, 8001348 <_malloc_r+0x54>
 8001328:	461c      	mov	r4, r3
 800132a:	6823      	ldr	r3, [r4, #0]
 800132c:	1b5b      	subs	r3, r3, r5
 800132e:	d4f8      	bmi.n	8001322 <_malloc_r+0x2e>
 8001330:	2b0b      	cmp	r3, #11
 8001332:	d81f      	bhi.n	8001374 <_malloc_r+0x80>
 8001334:	4294      	cmp	r4, r2
 8001336:	6863      	ldr	r3, [r4, #4]
 8001338:	d054      	beq.n	80013e4 <_malloc_r+0xf0>
 800133a:	6053      	str	r3, [r2, #4]
 800133c:	e00c      	b.n	8001358 <_malloc_r+0x64>
 800133e:	230c      	movs	r3, #12
 8001340:	6033      	str	r3, [r6, #0]
 8001342:	2000      	movs	r0, #0
 8001344:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001348:	4629      	mov	r1, r5
 800134a:	4630      	mov	r0, r6
 800134c:	f7ff ffae 	bl	80012ac <sbrk_aligned>
 8001350:	1c43      	adds	r3, r0, #1
 8001352:	4604      	mov	r4, r0
 8001354:	d019      	beq.n	800138a <_malloc_r+0x96>
 8001356:	6005      	str	r5, [r0, #0]
 8001358:	4630      	mov	r0, r6
 800135a:	f000 fc0b 	bl	8001b74 <__malloc_unlock>
 800135e:	f104 000b 	add.w	r0, r4, #11
 8001362:	1d23      	adds	r3, r4, #4
 8001364:	f020 0007 	bic.w	r0, r0, #7
 8001368:	1ac2      	subs	r2, r0, r3
 800136a:	bf1c      	itt	ne
 800136c:	1a1b      	subne	r3, r3, r0
 800136e:	50a3      	strne	r3, [r4, r2]
 8001370:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001374:	1961      	adds	r1, r4, r5
 8001376:	4294      	cmp	r4, r2
 8001378:	6025      	str	r5, [r4, #0]
 800137a:	bf14      	ite	ne
 800137c:	6051      	strne	r1, [r2, #4]
 800137e:	f8c8 1004 	streq.w	r1, [r8, #4]
 8001382:	5163      	str	r3, [r4, r5]
 8001384:	6863      	ldr	r3, [r4, #4]
 8001386:	604b      	str	r3, [r1, #4]
 8001388:	e7e6      	b.n	8001358 <_malloc_r+0x64>
 800138a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800138e:	b31f      	cbz	r7, 80013d8 <_malloc_r+0xe4>
 8001390:	463c      	mov	r4, r7
 8001392:	687f      	ldr	r7, [r7, #4]
 8001394:	2f00      	cmp	r7, #0
 8001396:	d1fb      	bne.n	8001390 <_malloc_r+0x9c>
 8001398:	6823      	ldr	r3, [r4, #0]
 800139a:	4639      	mov	r1, r7
 800139c:	4630      	mov	r0, r6
 800139e:	eb04 0903 	add.w	r9, r4, r3
 80013a2:	f000 fc85 	bl	8001cb0 <_sbrk_r>
 80013a6:	4581      	cmp	r9, r0
 80013a8:	d116      	bne.n	80013d8 <_malloc_r+0xe4>
 80013aa:	6823      	ldr	r3, [r4, #0]
 80013ac:	1aed      	subs	r5, r5, r3
 80013ae:	4629      	mov	r1, r5
 80013b0:	4630      	mov	r0, r6
 80013b2:	f7ff ff7b 	bl	80012ac <sbrk_aligned>
 80013b6:	3001      	adds	r0, #1
 80013b8:	d00e      	beq.n	80013d8 <_malloc_r+0xe4>
 80013ba:	6823      	ldr	r3, [r4, #0]
 80013bc:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80013c0:	442b      	add	r3, r5
 80013c2:	6023      	str	r3, [r4, #0]
 80013c4:	6853      	ldr	r3, [r2, #4]
 80013c6:	b183      	cbz	r3, 80013ea <_malloc_r+0xf6>
 80013c8:	42a3      	cmp	r3, r4
 80013ca:	d003      	beq.n	80013d4 <_malloc_r+0xe0>
 80013cc:	461a      	mov	r2, r3
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	429c      	cmp	r4, r3
 80013d2:	d1fb      	bne.n	80013cc <_malloc_r+0xd8>
 80013d4:	2300      	movs	r3, #0
 80013d6:	e7b0      	b.n	800133a <_malloc_r+0x46>
 80013d8:	230c      	movs	r3, #12
 80013da:	6033      	str	r3, [r6, #0]
 80013dc:	4630      	mov	r0, r6
 80013de:	f000 fbc9 	bl	8001b74 <__malloc_unlock>
 80013e2:	e7ae      	b.n	8001342 <_malloc_r+0x4e>
 80013e4:	f8c8 3004 	str.w	r3, [r8, #4]
 80013e8:	e7b6      	b.n	8001358 <_malloc_r+0x64>
 80013ea:	f8c8 7004 	str.w	r7, [r8, #4]
 80013ee:	e7b3      	b.n	8001358 <_malloc_r+0x64>
 80013f0:	20002914 	.word	0x20002914

080013f4 <_free_r>:
 80013f4:	2900      	cmp	r1, #0
 80013f6:	d050      	beq.n	800149a <_free_r+0xa6>
 80013f8:	b538      	push	{r3, r4, r5, lr}
 80013fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80013fe:	1f0c      	subs	r4, r1, #4
 8001400:	2b00      	cmp	r3, #0
 8001402:	bfb8      	it	lt
 8001404:	18e4      	addlt	r4, r4, r3
 8001406:	4605      	mov	r5, r0
 8001408:	f000 fbb2 	bl	8001b70 <__malloc_lock>
 800140c:	4a27      	ldr	r2, [pc, #156]	@ (80014ac <_free_r+0xb8>)
 800140e:	6813      	ldr	r3, [r2, #0]
 8001410:	b12b      	cbz	r3, 800141e <_free_r+0x2a>
 8001412:	42a3      	cmp	r3, r4
 8001414:	d90c      	bls.n	8001430 <_free_r+0x3c>
 8001416:	6821      	ldr	r1, [r4, #0]
 8001418:	1860      	adds	r0, r4, r1
 800141a:	4283      	cmp	r3, r0
 800141c:	d02c      	beq.n	8001478 <_free_r+0x84>
 800141e:	6063      	str	r3, [r4, #4]
 8001420:	4628      	mov	r0, r5
 8001422:	6014      	str	r4, [r2, #0]
 8001424:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001428:	f000 bba4 	b.w	8001b74 <__malloc_unlock>
 800142c:	42a3      	cmp	r3, r4
 800142e:	d80f      	bhi.n	8001450 <_free_r+0x5c>
 8001430:	461a      	mov	r2, r3
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d1f9      	bne.n	800142c <_free_r+0x38>
 8001438:	6811      	ldr	r1, [r2, #0]
 800143a:	1850      	adds	r0, r2, r1
 800143c:	4284      	cmp	r4, r0
 800143e:	d017      	beq.n	8001470 <_free_r+0x7c>
 8001440:	d32c      	bcc.n	800149c <_free_r+0xa8>
 8001442:	6063      	str	r3, [r4, #4]
 8001444:	6054      	str	r4, [r2, #4]
 8001446:	4628      	mov	r0, r5
 8001448:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800144c:	f000 bb92 	b.w	8001b74 <__malloc_unlock>
 8001450:	6811      	ldr	r1, [r2, #0]
 8001452:	1850      	adds	r0, r2, r1
 8001454:	42a0      	cmp	r0, r4
 8001456:	d014      	beq.n	8001482 <_free_r+0x8e>
 8001458:	d820      	bhi.n	800149c <_free_r+0xa8>
 800145a:	6821      	ldr	r1, [r4, #0]
 800145c:	1860      	adds	r0, r4, r1
 800145e:	4283      	cmp	r3, r0
 8001460:	d1ef      	bne.n	8001442 <_free_r+0x4e>
 8001462:	6818      	ldr	r0, [r3, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	4408      	add	r0, r1
 8001468:	e9c4 0300 	strd	r0, r3, [r4]
 800146c:	6054      	str	r4, [r2, #4]
 800146e:	e7ea      	b.n	8001446 <_free_r+0x52>
 8001470:	6823      	ldr	r3, [r4, #0]
 8001472:	440b      	add	r3, r1
 8001474:	6013      	str	r3, [r2, #0]
 8001476:	e7e6      	b.n	8001446 <_free_r+0x52>
 8001478:	6818      	ldr	r0, [r3, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	4408      	add	r0, r1
 800147e:	6020      	str	r0, [r4, #0]
 8001480:	e7cd      	b.n	800141e <_free_r+0x2a>
 8001482:	6820      	ldr	r0, [r4, #0]
 8001484:	4401      	add	r1, r0
 8001486:	1850      	adds	r0, r2, r1
 8001488:	4283      	cmp	r3, r0
 800148a:	6011      	str	r1, [r2, #0]
 800148c:	d1db      	bne.n	8001446 <_free_r+0x52>
 800148e:	e9d3 0400 	ldrd	r0, r4, [r3]
 8001492:	4401      	add	r1, r0
 8001494:	e9c2 1400 	strd	r1, r4, [r2]
 8001498:	e7d5      	b.n	8001446 <_free_r+0x52>
 800149a:	4770      	bx	lr
 800149c:	230c      	movs	r3, #12
 800149e:	602b      	str	r3, [r5, #0]
 80014a0:	4628      	mov	r0, r5
 80014a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80014a6:	f000 bb65 	b.w	8001b74 <__malloc_unlock>
 80014aa:	bf00      	nop
 80014ac:	20002918 	.word	0x20002918

080014b0 <memmove>:
 80014b0:	4288      	cmp	r0, r1
 80014b2:	d90e      	bls.n	80014d2 <memmove+0x22>
 80014b4:	188b      	adds	r3, r1, r2
 80014b6:	4283      	cmp	r3, r0
 80014b8:	d90b      	bls.n	80014d2 <memmove+0x22>
 80014ba:	eb00 0c02 	add.w	ip, r0, r2
 80014be:	2a00      	cmp	r2, #0
 80014c0:	d06e      	beq.n	80015a0 <memmove+0xf0>
 80014c2:	4662      	mov	r2, ip
 80014c4:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
 80014c8:	f802 cd01 	strb.w	ip, [r2, #-1]!
 80014cc:	4299      	cmp	r1, r3
 80014ce:	d1f9      	bne.n	80014c4 <memmove+0x14>
 80014d0:	4770      	bx	lr
 80014d2:	2a0f      	cmp	r2, #15
 80014d4:	d80f      	bhi.n	80014f6 <memmove+0x46>
 80014d6:	4603      	mov	r3, r0
 80014d8:	f102 3cff 	add.w	ip, r2, #4294967295	@ 0xffffffff
 80014dc:	2a00      	cmp	r2, #0
 80014de:	d05f      	beq.n	80015a0 <memmove+0xf0>
 80014e0:	f10c 0c01 	add.w	ip, ip, #1
 80014e4:	3b01      	subs	r3, #1
 80014e6:	448c      	add	ip, r1
 80014e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80014ec:	f803 2f01 	strb.w	r2, [r3, #1]!
 80014f0:	4561      	cmp	r1, ip
 80014f2:	d1f9      	bne.n	80014e8 <memmove+0x38>
 80014f4:	4770      	bx	lr
 80014f6:	ea40 0301 	orr.w	r3, r0, r1
 80014fa:	079b      	lsls	r3, r3, #30
 80014fc:	d151      	bne.n	80015a2 <memmove+0xf2>
 80014fe:	f1a2 0310 	sub.w	r3, r2, #16
 8001502:	b570      	push	{r4, r5, r6, lr}
 8001504:	f101 0c20 	add.w	ip, r1, #32
 8001508:	f023 050f 	bic.w	r5, r3, #15
 800150c:	f101 0e10 	add.w	lr, r1, #16
 8001510:	f100 0410 	add.w	r4, r0, #16
 8001514:	44ac      	add	ip, r5
 8001516:	091b      	lsrs	r3, r3, #4
 8001518:	f85e 5c10 	ldr.w	r5, [lr, #-16]
 800151c:	f844 5c10 	str.w	r5, [r4, #-16]
 8001520:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
 8001524:	f844 5c0c 	str.w	r5, [r4, #-12]
 8001528:	f85e 5c08 	ldr.w	r5, [lr, #-8]
 800152c:	f844 5c08 	str.w	r5, [r4, #-8]
 8001530:	f85e 5c04 	ldr.w	r5, [lr, #-4]
 8001534:	f844 5c04 	str.w	r5, [r4, #-4]
 8001538:	f10e 0e10 	add.w	lr, lr, #16
 800153c:	45e6      	cmp	lr, ip
 800153e:	f104 0410 	add.w	r4, r4, #16
 8001542:	d1e9      	bne.n	8001518 <memmove+0x68>
 8001544:	3301      	adds	r3, #1
 8001546:	f012 0f0c 	tst.w	r2, #12
 800154a:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800154e:	f002 040f 	and.w	r4, r2, #15
 8001552:	eb00 1303 	add.w	r3, r0, r3, lsl #4
 8001556:	d028      	beq.n	80015aa <memmove+0xfa>
 8001558:	3c04      	subs	r4, #4
 800155a:	f024 0603 	bic.w	r6, r4, #3
 800155e:	ea4f 0c94 	mov.w	ip, r4, lsr #2
 8001562:	441e      	add	r6, r3
 8001564:	1f1c      	subs	r4, r3, #4
 8001566:	468e      	mov	lr, r1
 8001568:	f85e 5b04 	ldr.w	r5, [lr], #4
 800156c:	f844 5f04 	str.w	r5, [r4, #4]!
 8001570:	42b4      	cmp	r4, r6
 8001572:	d1f9      	bne.n	8001568 <memmove+0xb8>
 8001574:	f10c 0401 	add.w	r4, ip, #1
 8001578:	f002 0203 	and.w	r2, r2, #3
 800157c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8001580:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8001584:	f102 3cff 	add.w	ip, r2, #4294967295	@ 0xffffffff
 8001588:	b14a      	cbz	r2, 800159e <memmove+0xee>
 800158a:	f10c 0c01 	add.w	ip, ip, #1
 800158e:	3b01      	subs	r3, #1
 8001590:	448c      	add	ip, r1
 8001592:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001596:	f803 2f01 	strb.w	r2, [r3, #1]!
 800159a:	4561      	cmp	r1, ip
 800159c:	d1f9      	bne.n	8001592 <memmove+0xe2>
 800159e:	bd70      	pop	{r4, r5, r6, pc}
 80015a0:	4770      	bx	lr
 80015a2:	f102 3cff 	add.w	ip, r2, #4294967295	@ 0xffffffff
 80015a6:	4603      	mov	r3, r0
 80015a8:	e79a      	b.n	80014e0 <memmove+0x30>
 80015aa:	4622      	mov	r2, r4
 80015ac:	e7ea      	b.n	8001584 <memmove+0xd4>
 80015ae:	bf00      	nop

080015b0 <_fwalk_sglue>:
 80015b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80015b4:	4607      	mov	r7, r0
 80015b6:	4688      	mov	r8, r1
 80015b8:	4616      	mov	r6, r2
 80015ba:	f04f 0900 	mov.w	r9, #0
 80015be:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
 80015c2:	3d01      	subs	r5, #1
 80015c4:	d410      	bmi.n	80015e8 <_fwalk_sglue+0x38>
 80015c6:	89a3      	ldrh	r3, [r4, #12]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d908      	bls.n	80015de <_fwalk_sglue+0x2e>
 80015cc:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80015d0:	3301      	adds	r3, #1
 80015d2:	4621      	mov	r1, r4
 80015d4:	4638      	mov	r0, r7
 80015d6:	d002      	beq.n	80015de <_fwalk_sglue+0x2e>
 80015d8:	47c0      	blx	r8
 80015da:	ea49 0900 	orr.w	r9, r9, r0
 80015de:	3d01      	subs	r5, #1
 80015e0:	1c6b      	adds	r3, r5, #1
 80015e2:	f104 0468 	add.w	r4, r4, #104	@ 0x68
 80015e6:	d1ee      	bne.n	80015c6 <_fwalk_sglue+0x16>
 80015e8:	6836      	ldr	r6, [r6, #0]
 80015ea:	2e00      	cmp	r6, #0
 80015ec:	d1e7      	bne.n	80015be <_fwalk_sglue+0xe>
 80015ee:	4648      	mov	r0, r9
 80015f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80015f4:	0000      	movs	r0, r0
 80015f6:	0000      	movs	r0, r0
 80015f8:	0000      	movs	r0, r0
 80015fa:	0000      	movs	r0, r0
 80015fc:	0000      	movs	r0, r0
 80015fe:	0000      	movs	r0, r0

08001600 <memchr>:
 8001600:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8001604:	2a10      	cmp	r2, #16
 8001606:	db2b      	blt.n	8001660 <memchr+0x60>
 8001608:	f010 0f07 	tst.w	r0, #7
 800160c:	d008      	beq.n	8001620 <memchr+0x20>
 800160e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001612:	3a01      	subs	r2, #1
 8001614:	428b      	cmp	r3, r1
 8001616:	d02d      	beq.n	8001674 <memchr+0x74>
 8001618:	f010 0f07 	tst.w	r0, #7
 800161c:	b342      	cbz	r2, 8001670 <memchr+0x70>
 800161e:	d1f6      	bne.n	800160e <memchr+0xe>
 8001620:	b4f0      	push	{r4, r5, r6, r7}
 8001622:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8001626:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800162a:	f022 0407 	bic.w	r4, r2, #7
 800162e:	f07f 0700 	mvns.w	r7, #0
 8001632:	2300      	movs	r3, #0
 8001634:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8001638:	3c08      	subs	r4, #8
 800163a:	ea85 0501 	eor.w	r5, r5, r1
 800163e:	ea86 0601 	eor.w	r6, r6, r1
 8001642:	fa85 f547 	uadd8	r5, r5, r7
 8001646:	faa3 f587 	sel	r5, r3, r7
 800164a:	fa86 f647 	uadd8	r6, r6, r7
 800164e:	faa5 f687 	sel	r6, r5, r7
 8001652:	b98e      	cbnz	r6, 8001678 <memchr+0x78>
 8001654:	d1ee      	bne.n	8001634 <memchr+0x34>
 8001656:	bcf0      	pop	{r4, r5, r6, r7}
 8001658:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800165c:	f002 0207 	and.w	r2, r2, #7
 8001660:	b132      	cbz	r2, 8001670 <memchr+0x70>
 8001662:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001666:	3a01      	subs	r2, #1
 8001668:	ea83 0301 	eor.w	r3, r3, r1
 800166c:	b113      	cbz	r3, 8001674 <memchr+0x74>
 800166e:	d1f8      	bne.n	8001662 <memchr+0x62>
 8001670:	2000      	movs	r0, #0
 8001672:	4770      	bx	lr
 8001674:	3801      	subs	r0, #1
 8001676:	4770      	bx	lr
 8001678:	2d00      	cmp	r5, #0
 800167a:	bf06      	itte	eq
 800167c:	4635      	moveq	r5, r6
 800167e:	3803      	subeq	r0, #3
 8001680:	3807      	subne	r0, #7
 8001682:	f015 0f01 	tst.w	r5, #1
 8001686:	d107      	bne.n	8001698 <memchr+0x98>
 8001688:	3001      	adds	r0, #1
 800168a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800168e:	bf02      	ittt	eq
 8001690:	3001      	addeq	r0, #1
 8001692:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8001696:	3001      	addeq	r0, #1
 8001698:	bcf0      	pop	{r4, r5, r6, r7}
 800169a:	3801      	subs	r0, #1
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop

080016a0 <__swsetup_r>:
 80016a0:	b538      	push	{r3, r4, r5, lr}
 80016a2:	4b2f      	ldr	r3, [pc, #188]	@ (8001760 <__swsetup_r+0xc0>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4605      	mov	r5, r0
 80016a8:	460c      	mov	r4, r1
 80016aa:	b113      	cbz	r3, 80016b2 <__swsetup_r+0x12>
 80016ac:	6a1a      	ldr	r2, [r3, #32]
 80016ae:	2a00      	cmp	r2, #0
 80016b0:	d04b      	beq.n	800174a <__swsetup_r+0xaa>
 80016b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80016b6:	0718      	lsls	r0, r3, #28
 80016b8:	d51c      	bpl.n	80016f4 <__swsetup_r+0x54>
 80016ba:	6922      	ldr	r2, [r4, #16]
 80016bc:	b322      	cbz	r2, 8001708 <__swsetup_r+0x68>
 80016be:	f013 0101 	ands.w	r1, r3, #1
 80016c2:	d007      	beq.n	80016d4 <__swsetup_r+0x34>
 80016c4:	6961      	ldr	r1, [r4, #20]
 80016c6:	2000      	movs	r0, #0
 80016c8:	4249      	negs	r1, r1
 80016ca:	60a0      	str	r0, [r4, #8]
 80016cc:	61a1      	str	r1, [r4, #24]
 80016ce:	b13a      	cbz	r2, 80016e0 <__swsetup_r+0x40>
 80016d0:	2000      	movs	r0, #0
 80016d2:	bd38      	pop	{r3, r4, r5, pc}
 80016d4:	0798      	lsls	r0, r3, #30
 80016d6:	bf58      	it	pl
 80016d8:	6961      	ldrpl	r1, [r4, #20]
 80016da:	60a1      	str	r1, [r4, #8]
 80016dc:	2a00      	cmp	r2, #0
 80016de:	d1f7      	bne.n	80016d0 <__swsetup_r+0x30>
 80016e0:	0619      	lsls	r1, r3, #24
 80016e2:	bf58      	it	pl
 80016e4:	4610      	movpl	r0, r2
 80016e6:	d5f4      	bpl.n	80016d2 <__swsetup_r+0x32>
 80016e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80016ec:	81a3      	strh	r3, [r4, #12]
 80016ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80016f2:	bd38      	pop	{r3, r4, r5, pc}
 80016f4:	06d9      	lsls	r1, r3, #27
 80016f6:	d52c      	bpl.n	8001752 <__swsetup_r+0xb2>
 80016f8:	075a      	lsls	r2, r3, #29
 80016fa:	d412      	bmi.n	8001722 <__swsetup_r+0x82>
 80016fc:	6922      	ldr	r2, [r4, #16]
 80016fe:	f043 0308 	orr.w	r3, r3, #8
 8001702:	81a3      	strh	r3, [r4, #12]
 8001704:	2a00      	cmp	r2, #0
 8001706:	d1da      	bne.n	80016be <__swsetup_r+0x1e>
 8001708:	f403 7120 	and.w	r1, r3, #640	@ 0x280
 800170c:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8001710:	d0d5      	beq.n	80016be <__swsetup_r+0x1e>
 8001712:	4621      	mov	r1, r4
 8001714:	4628      	mov	r0, r5
 8001716:	f000 fa2f 	bl	8001b78 <__smakebuf_r>
 800171a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800171e:	6922      	ldr	r2, [r4, #16]
 8001720:	e7cd      	b.n	80016be <__swsetup_r+0x1e>
 8001722:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001724:	b151      	cbz	r1, 800173c <__swsetup_r+0x9c>
 8001726:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800172a:	4291      	cmp	r1, r2
 800172c:	d004      	beq.n	8001738 <__swsetup_r+0x98>
 800172e:	4628      	mov	r0, r5
 8001730:	f7ff fe60 	bl	80013f4 <_free_r>
 8001734:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001738:	2200      	movs	r2, #0
 800173a:	6362      	str	r2, [r4, #52]	@ 0x34
 800173c:	6922      	ldr	r2, [r4, #16]
 800173e:	2100      	movs	r1, #0
 8001740:	e9c4 2100 	strd	r2, r1, [r4]
 8001744:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001748:	e7d9      	b.n	80016fe <__swsetup_r+0x5e>
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff fcba 	bl	80010c4 <__sinit>
 8001750:	e7af      	b.n	80016b2 <__swsetup_r+0x12>
 8001752:	2209      	movs	r2, #9
 8001754:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001758:	602a      	str	r2, [r5, #0]
 800175a:	81a3      	strh	r3, [r4, #12]
 800175c:	e7c7      	b.n	80016ee <__swsetup_r+0x4e>
 800175e:	bf00      	nop
 8001760:	20000020 	.word	0x20000020

08001764 <_realloc_r>:
 8001764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001768:	4614      	mov	r4, r2
 800176a:	b341      	cbz	r1, 80017be <_realloc_r+0x5a>
 800176c:	b30a      	cbz	r2, 80017b2 <_realloc_r+0x4e>
 800176e:	4606      	mov	r6, r0
 8001770:	460d      	mov	r5, r1
 8001772:	f000 faf9 	bl	8001d68 <_malloc_usable_size_r>
 8001776:	4284      	cmp	r4, r0
 8001778:	4607      	mov	r7, r0
 800177a:	d802      	bhi.n	8001782 <_realloc_r+0x1e>
 800177c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001780:	d813      	bhi.n	80017aa <_realloc_r+0x46>
 8001782:	4621      	mov	r1, r4
 8001784:	4630      	mov	r0, r6
 8001786:	f7ff fdb5 	bl	80012f4 <_malloc_r>
 800178a:	4680      	mov	r8, r0
 800178c:	b150      	cbz	r0, 80017a4 <_realloc_r+0x40>
 800178e:	42bc      	cmp	r4, r7
 8001790:	4622      	mov	r2, r4
 8001792:	4629      	mov	r1, r5
 8001794:	bf28      	it	cs
 8001796:	463a      	movcs	r2, r7
 8001798:	f7fe fe64 	bl	8000464 <memcpy>
 800179c:	4629      	mov	r1, r5
 800179e:	4630      	mov	r0, r6
 80017a0:	f7ff fe28 	bl	80013f4 <_free_r>
 80017a4:	4640      	mov	r0, r8
 80017a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80017aa:	46a8      	mov	r8, r5
 80017ac:	4640      	mov	r0, r8
 80017ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80017b2:	46a0      	mov	r8, r4
 80017b4:	f7ff fe1e 	bl	80013f4 <_free_r>
 80017b8:	4640      	mov	r0, r8
 80017ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80017be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80017c2:	4611      	mov	r1, r2
 80017c4:	f7ff bd96 	b.w	80012f4 <_malloc_r>

080017c8 <_printf_common>:
 80017c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017cc:	4692      	mov	sl, r2
 80017ce:	461f      	mov	r7, r3
 80017d0:	690a      	ldr	r2, [r1, #16]
 80017d2:	688b      	ldr	r3, [r1, #8]
 80017d4:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80017d8:	429a      	cmp	r2, r3
 80017da:	bfb8      	it	lt
 80017dc:	461a      	movlt	r2, r3
 80017de:	f8ca 2000 	str.w	r2, [sl]
 80017e2:	f891 3043 	ldrb.w	r3, [r1, #67]	@ 0x43
 80017e6:	460c      	mov	r4, r1
 80017e8:	4606      	mov	r6, r0
 80017ea:	b113      	cbz	r3, 80017f2 <_printf_common+0x2a>
 80017ec:	3201      	adds	r2, #1
 80017ee:	f8ca 2000 	str.w	r2, [sl]
 80017f2:	6822      	ldr	r2, [r4, #0]
 80017f4:	0691      	lsls	r1, r2, #26
 80017f6:	d55f      	bpl.n	80018b8 <_printf_common+0xf0>
 80017f8:	f8da 3000 	ldr.w	r3, [sl]
 80017fc:	3302      	adds	r3, #2
 80017fe:	f8ca 3000 	str.w	r3, [sl]
 8001802:	6822      	ldr	r2, [r4, #0]
 8001804:	f012 0f06 	tst.w	r2, #6
 8001808:	4611      	mov	r1, r2
 800180a:	d11d      	bne.n	8001848 <_printf_common+0x80>
 800180c:	68e1      	ldr	r1, [r4, #12]
 800180e:	4299      	cmp	r1, r3
 8001810:	bfd8      	it	le
 8001812:	4611      	movle	r1, r2
 8001814:	dd18      	ble.n	8001848 <_printf_common+0x80>
 8001816:	f04f 0800 	mov.w	r8, #0
 800181a:	f104 0b19 	add.w	fp, r4, #25
 800181e:	e005      	b.n	800182c <_printf_common+0x64>
 8001820:	68e5      	ldr	r5, [r4, #12]
 8001822:	f8da 3000 	ldr.w	r3, [sl]
 8001826:	1aed      	subs	r5, r5, r3
 8001828:	4545      	cmp	r5, r8
 800182a:	dd0c      	ble.n	8001846 <_printf_common+0x7e>
 800182c:	2301      	movs	r3, #1
 800182e:	465a      	mov	r2, fp
 8001830:	4639      	mov	r1, r7
 8001832:	4630      	mov	r0, r6
 8001834:	47c8      	blx	r9
 8001836:	3001      	adds	r0, #1
 8001838:	f108 0801 	add.w	r8, r8, #1
 800183c:	d1f0      	bne.n	8001820 <_printf_common+0x58>
 800183e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001842:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001846:	6821      	ldr	r1, [r4, #0]
 8001848:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800184c:	3b00      	subs	r3, #0
 800184e:	bf18      	it	ne
 8001850:	2301      	movne	r3, #1
 8001852:	068a      	lsls	r2, r1, #26
 8001854:	d50a      	bpl.n	800186c <_printf_common+0xa4>
 8001856:	18e1      	adds	r1, r4, r3
 8001858:	1c5a      	adds	r2, r3, #1
 800185a:	2030      	movs	r0, #48	@ 0x30
 800185c:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001860:	4422      	add	r2, r4
 8001862:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001866:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800186a:	3302      	adds	r3, #2
 800186c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001870:	4639      	mov	r1, r7
 8001872:	4630      	mov	r0, r6
 8001874:	47c8      	blx	r9
 8001876:	3001      	adds	r0, #1
 8001878:	d0e1      	beq.n	800183e <_printf_common+0x76>
 800187a:	6823      	ldr	r3, [r4, #0]
 800187c:	f8da 5000 	ldr.w	r5, [sl]
 8001880:	6921      	ldr	r1, [r4, #16]
 8001882:	f003 0306 	and.w	r3, r3, #6
 8001886:	2b04      	cmp	r3, #4
 8001888:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
 800188c:	d01b      	beq.n	80018c6 <_printf_common+0xfe>
 800188e:	428a      	cmp	r2, r1
 8001890:	dd20      	ble.n	80018d4 <_printf_common+0x10c>
 8001892:	f04f 0800 	mov.w	r8, #0
 8001896:	1a52      	subs	r2, r2, r1
 8001898:	4490      	add	r8, r2
 800189a:	341a      	adds	r4, #26
 800189c:	2500      	movs	r5, #0
 800189e:	e001      	b.n	80018a4 <_printf_common+0xdc>
 80018a0:	4545      	cmp	r5, r8
 80018a2:	da17      	bge.n	80018d4 <_printf_common+0x10c>
 80018a4:	2301      	movs	r3, #1
 80018a6:	4622      	mov	r2, r4
 80018a8:	4639      	mov	r1, r7
 80018aa:	4630      	mov	r0, r6
 80018ac:	47c8      	blx	r9
 80018ae:	3001      	adds	r0, #1
 80018b0:	f105 0501 	add.w	r5, r5, #1
 80018b4:	d1f4      	bne.n	80018a0 <_printf_common+0xd8>
 80018b6:	e7c2      	b.n	800183e <_printf_common+0x76>
 80018b8:	f012 0f06 	tst.w	r2, #6
 80018bc:	d00d      	beq.n	80018da <_printf_common+0x112>
 80018be:	3b00      	subs	r3, #0
 80018c0:	bf18      	it	ne
 80018c2:	2301      	movne	r3, #1
 80018c4:	e7d2      	b.n	800186c <_printf_common+0xa4>
 80018c6:	1b40      	subs	r0, r0, r5
 80018c8:	428a      	cmp	r2, r1
 80018ca:	ea20 78e0 	bic.w	r8, r0, r0, asr #31
 80018ce:	dce2      	bgt.n	8001896 <_printf_common+0xce>
 80018d0:	2800      	cmp	r0, #0
 80018d2:	dce2      	bgt.n	800189a <_printf_common+0xd2>
 80018d4:	2000      	movs	r0, #0
 80018d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018da:	68e1      	ldr	r1, [r4, #12]
 80018dc:	f8da 3000 	ldr.w	r3, [sl]
 80018e0:	4299      	cmp	r1, r3
 80018e2:	bfd8      	it	le
 80018e4:	4611      	movle	r1, r2
 80018e6:	dc96      	bgt.n	8001816 <_printf_common+0x4e>
 80018e8:	e7ae      	b.n	8001848 <_printf_common+0x80>
 80018ea:	bf00      	nop

080018ec <_printf_i>:
 80018ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80018f0:	4617      	mov	r7, r2
 80018f2:	b084      	sub	sp, #16
 80018f4:	7e0a      	ldrb	r2, [r1, #24]
 80018f6:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80018f8:	460c      	mov	r4, r1
 80018fa:	4606      	mov	r6, r0
 80018fc:	4698      	mov	r8, r3
 80018fe:	f101 0c43 	add.w	ip, r1, #67	@ 0x43
 8001902:	2a00      	cmp	r2, #0
 8001904:	d035      	beq.n	8001972 <_printf_i+0x86>
 8001906:	f1a2 0358 	sub.w	r3, r2, #88	@ 0x58
 800190a:	b2d9      	uxtb	r1, r3
 800190c:	2920      	cmp	r1, #32
 800190e:	d869      	bhi.n	80019e4 <_printf_i+0xf8>
 8001910:	2b20      	cmp	r3, #32
 8001912:	d867      	bhi.n	80019e4 <_printf_i+0xf8>
 8001914:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001918:	006600e6 	.word	0x006600e6
 800191c:	00660066 	.word	0x00660066
 8001920:	00660066 	.word	0x00660066
 8001924:	00660066 	.word	0x00660066
 8001928:	00660066 	.word	0x00660066
 800192c:	00ac0066 	.word	0x00ac0066
 8001930:	00660070 	.word	0x00660070
 8001934:	00660066 	.word	0x00660066
 8001938:	00700066 	.word	0x00700066
 800193c:	00660066 	.word	0x00660066
 8001940:	00660066 	.word	0x00660066
 8001944:	00830021 	.word	0x00830021
 8001948:	006600c6 	.word	0x006600c6
 800194c:	00b60066 	.word	0x00b60066
 8001950:	00830066 	.word	0x00830066
 8001954:	00660066 	.word	0x00660066
 8001958:	00ec      	.short	0x00ec
 800195a:	682b      	ldr	r3, [r5, #0]
 800195c:	6822      	ldr	r2, [r4, #0]
 800195e:	6961      	ldr	r1, [r4, #20]
 8001960:	1d18      	adds	r0, r3, #4
 8001962:	6028      	str	r0, [r5, #0]
 8001964:	0610      	lsls	r0, r2, #24
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	d402      	bmi.n	8001970 <_printf_i+0x84>
 800196a:	0652      	lsls	r2, r2, #25
 800196c:	f100 80e0 	bmi.w	8001b30 <_printf_i+0x244>
 8001970:	6019      	str	r1, [r3, #0]
 8001972:	2300      	movs	r3, #0
 8001974:	46e1      	mov	r9, ip
 8001976:	6123      	str	r3, [r4, #16]
 8001978:	f8cd 8000 	str.w	r8, [sp]
 800197c:	463b      	mov	r3, r7
 800197e:	aa03      	add	r2, sp, #12
 8001980:	4621      	mov	r1, r4
 8001982:	4630      	mov	r0, r6
 8001984:	f7ff ff20 	bl	80017c8 <_printf_common>
 8001988:	3001      	adds	r0, #1
 800198a:	d020      	beq.n	80019ce <_printf_i+0xe2>
 800198c:	6923      	ldr	r3, [r4, #16]
 800198e:	464a      	mov	r2, r9
 8001990:	4639      	mov	r1, r7
 8001992:	4630      	mov	r0, r6
 8001994:	47c0      	blx	r8
 8001996:	3001      	adds	r0, #1
 8001998:	d019      	beq.n	80019ce <_printf_i+0xe2>
 800199a:	6823      	ldr	r3, [r4, #0]
 800199c:	68e0      	ldr	r0, [r4, #12]
 800199e:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80019a2:	079b      	lsls	r3, r3, #30
 80019a4:	d518      	bpl.n	80019d8 <_printf_i+0xec>
 80019a6:	4548      	cmp	r0, r9
 80019a8:	dd16      	ble.n	80019d8 <_printf_i+0xec>
 80019aa:	2500      	movs	r5, #0
 80019ac:	f104 0a19 	add.w	sl, r4, #25
 80019b0:	e004      	b.n	80019bc <_printf_i+0xd0>
 80019b2:	68e0      	ldr	r0, [r4, #12]
 80019b4:	eba0 0309 	sub.w	r3, r0, r9
 80019b8:	42ab      	cmp	r3, r5
 80019ba:	dd0d      	ble.n	80019d8 <_printf_i+0xec>
 80019bc:	2301      	movs	r3, #1
 80019be:	4652      	mov	r2, sl
 80019c0:	4639      	mov	r1, r7
 80019c2:	4630      	mov	r0, r6
 80019c4:	47c0      	blx	r8
 80019c6:	3001      	adds	r0, #1
 80019c8:	f105 0501 	add.w	r5, r5, #1
 80019cc:	d1f1      	bne.n	80019b2 <_printf_i+0xc6>
 80019ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80019d2:	b004      	add	sp, #16
 80019d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80019d8:	4548      	cmp	r0, r9
 80019da:	bfb8      	it	lt
 80019dc:	4648      	movlt	r0, r9
 80019de:	b004      	add	sp, #16
 80019e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80019e4:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
 80019e8:	2001      	movs	r0, #1
 80019ea:	f104 0942 	add.w	r9, r4, #66	@ 0x42
 80019ee:	2300      	movs	r3, #0
 80019f0:	6120      	str	r0, [r4, #16]
 80019f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80019f6:	e7bf      	b.n	8001978 <_printf_i+0x8c>
 80019f8:	682a      	ldr	r2, [r5, #0]
 80019fa:	6823      	ldr	r3, [r4, #0]
 80019fc:	1d11      	adds	r1, r2, #4
 80019fe:	0618      	lsls	r0, r3, #24
 8001a00:	6029      	str	r1, [r5, #0]
 8001a02:	d402      	bmi.n	8001a0a <_printf_i+0x11e>
 8001a04:	0659      	lsls	r1, r3, #25
 8001a06:	f100 8095 	bmi.w	8001b34 <_printf_i+0x248>
 8001a0a:	6810      	ldr	r0, [r2, #0]
 8001a0c:	4601      	mov	r1, r0
 8001a0e:	2800      	cmp	r0, #0
 8001a10:	6862      	ldr	r2, [r4, #4]
 8001a12:	f2c0 8093 	blt.w	8001b3c <_printf_i+0x250>
 8001a16:	4854      	ldr	r0, [pc, #336]	@ (8001b68 <_printf_i+0x27c>)
 8001a18:	f04f 0e0a 	mov.w	lr, #10
 8001a1c:	e015      	b.n	8001a4a <_printf_i+0x15e>
 8001a1e:	6820      	ldr	r0, [r4, #0]
 8001a20:	682b      	ldr	r3, [r5, #0]
 8001a22:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8001a26:	f853 1b04 	ldr.w	r1, [r3], #4
 8001a2a:	d102      	bne.n	8001a32 <_printf_i+0x146>
 8001a2c:	0640      	lsls	r0, r0, #25
 8001a2e:	bf48      	it	mi
 8001a30:	b289      	uxthmi	r1, r1
 8001a32:	2a6f      	cmp	r2, #111	@ 0x6f
 8001a34:	484c      	ldr	r0, [pc, #304]	@ (8001b68 <_printf_i+0x27c>)
 8001a36:	602b      	str	r3, [r5, #0]
 8001a38:	bf14      	ite	ne
 8001a3a:	f04f 0e0a 	movne.w	lr, #10
 8001a3e:	f04f 0e08 	moveq.w	lr, #8
 8001a42:	2300      	movs	r3, #0
 8001a44:	6862      	ldr	r2, [r4, #4]
 8001a46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001a4a:	2a00      	cmp	r2, #0
 8001a4c:	60a2      	str	r2, [r4, #8]
 8001a4e:	db51      	blt.n	8001af4 <_printf_i+0x208>
 8001a50:	6823      	ldr	r3, [r4, #0]
 8001a52:	f023 0304 	bic.w	r3, r3, #4
 8001a56:	6023      	str	r3, [r4, #0]
 8001a58:	2900      	cmp	r1, #0
 8001a5a:	d14b      	bne.n	8001af4 <_printf_i+0x208>
 8001a5c:	2a00      	cmp	r2, #0
 8001a5e:	d17b      	bne.n	8001b58 <_printf_i+0x26c>
 8001a60:	46e1      	mov	r9, ip
 8001a62:	f1be 0f08 	cmp.w	lr, #8
 8001a66:	d056      	beq.n	8001b16 <_printf_i+0x22a>
 8001a68:	ebac 0309 	sub.w	r3, ip, r9
 8001a6c:	6123      	str	r3, [r4, #16]
 8001a6e:	e783      	b.n	8001978 <_printf_i+0x8c>
 8001a70:	682b      	ldr	r3, [r5, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	3304      	adds	r3, #4
 8001a76:	602b      	str	r3, [r5, #0]
 8001a78:	f104 0942 	add.w	r9, r4, #66	@ 0x42
 8001a7c:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
 8001a80:	2001      	movs	r0, #1
 8001a82:	e7b4      	b.n	80019ee <_printf_i+0x102>
 8001a84:	682b      	ldr	r3, [r5, #0]
 8001a86:	6862      	ldr	r2, [r4, #4]
 8001a88:	1d19      	adds	r1, r3, #4
 8001a8a:	6029      	str	r1, [r5, #0]
 8001a8c:	f8d3 9000 	ldr.w	r9, [r3]
 8001a90:	2100      	movs	r1, #0
 8001a92:	4648      	mov	r0, r9
 8001a94:	f7ff fdb4 	bl	8001600 <memchr>
 8001a98:	2800      	cmp	r0, #0
 8001a9a:	d063      	beq.n	8001b64 <_printf_i+0x278>
 8001a9c:	eba0 0009 	sub.w	r0, r0, r9
 8001aa0:	6060      	str	r0, [r4, #4]
 8001aa2:	e7a4      	b.n	80019ee <_printf_i+0x102>
 8001aa4:	6823      	ldr	r3, [r4, #0]
 8001aa6:	f043 0320 	orr.w	r3, r3, #32
 8001aaa:	6023      	str	r3, [r4, #0]
 8001aac:	2278      	movs	r2, #120	@ 0x78
 8001aae:	482f      	ldr	r0, [pc, #188]	@ (8001b6c <_printf_i+0x280>)
 8001ab0:	f884 2045 	strb.w	r2, [r4, #69]	@ 0x45
 8001ab4:	682a      	ldr	r2, [r5, #0]
 8001ab6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001aba:	f852 1b04 	ldr.w	r1, [r2], #4
 8001abe:	d103      	bne.n	8001ac8 <_printf_i+0x1dc>
 8001ac0:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8001ac4:	bf18      	it	ne
 8001ac6:	b289      	uxthne	r1, r1
 8001ac8:	602a      	str	r2, [r5, #0]
 8001aca:	07da      	lsls	r2, r3, #31
 8001acc:	bf44      	itt	mi
 8001ace:	f043 0320 	orrmi.w	r3, r3, #32
 8001ad2:	6023      	strmi	r3, [r4, #0]
 8001ad4:	b919      	cbnz	r1, 8001ade <_printf_i+0x1f2>
 8001ad6:	6823      	ldr	r3, [r4, #0]
 8001ad8:	f023 0320 	bic.w	r3, r3, #32
 8001adc:	6023      	str	r3, [r4, #0]
 8001ade:	f04f 0e10 	mov.w	lr, #16
 8001ae2:	e7ae      	b.n	8001a42 <_printf_i+0x156>
 8001ae4:	2358      	movs	r3, #88	@ 0x58
 8001ae6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8001aea:	481f      	ldr	r0, [pc, #124]	@ (8001b68 <_printf_i+0x27c>)
 8001aec:	6823      	ldr	r3, [r4, #0]
 8001aee:	e7e1      	b.n	8001ab4 <_printf_i+0x1c8>
 8001af0:	6823      	ldr	r3, [r4, #0]
 8001af2:	e7db      	b.n	8001aac <_printf_i+0x1c0>
 8001af4:	4675      	mov	r5, lr
 8001af6:	46e1      	mov	r9, ip
 8001af8:	fbb1 f3f5 	udiv	r3, r1, r5
 8001afc:	fb05 1a13 	mls	sl, r5, r3, r1
 8001b00:	460a      	mov	r2, r1
 8001b02:	42aa      	cmp	r2, r5
 8001b04:	f810 100a 	ldrb.w	r1, [r0, sl]
 8001b08:	f809 1d01 	strb.w	r1, [r9, #-1]!
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	d2f3      	bcs.n	8001af8 <_printf_i+0x20c>
 8001b10:	f1be 0f08 	cmp.w	lr, #8
 8001b14:	d1a8      	bne.n	8001a68 <_printf_i+0x17c>
 8001b16:	6823      	ldr	r3, [r4, #0]
 8001b18:	07dd      	lsls	r5, r3, #31
 8001b1a:	d5a5      	bpl.n	8001a68 <_printf_i+0x17c>
 8001b1c:	6862      	ldr	r2, [r4, #4]
 8001b1e:	6923      	ldr	r3, [r4, #16]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	dca1      	bgt.n	8001a68 <_printf_i+0x17c>
 8001b24:	2330      	movs	r3, #48	@ 0x30
 8001b26:	f809 3c01 	strb.w	r3, [r9, #-1]
 8001b2a:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8001b2e:	e79b      	b.n	8001a68 <_printf_i+0x17c>
 8001b30:	8019      	strh	r1, [r3, #0]
 8001b32:	e71e      	b.n	8001972 <_printf_i+0x86>
 8001b34:	f9b2 1000 	ldrsh.w	r1, [r2]
 8001b38:	4608      	mov	r0, r1
 8001b3a:	e768      	b.n	8001a0e <_printf_i+0x122>
 8001b3c:	202d      	movs	r0, #45	@ 0x2d
 8001b3e:	2a00      	cmp	r2, #0
 8001b40:	60a2      	str	r2, [r4, #8]
 8001b42:	f884 0043 	strb.w	r0, [r4, #67]	@ 0x43
 8001b46:	db02      	blt.n	8001b4e <_printf_i+0x262>
 8001b48:	f023 0304 	bic.w	r3, r3, #4
 8001b4c:	6023      	str	r3, [r4, #0]
 8001b4e:	250a      	movs	r5, #10
 8001b50:	4805      	ldr	r0, [pc, #20]	@ (8001b68 <_printf_i+0x27c>)
 8001b52:	4249      	negs	r1, r1
 8001b54:	46ae      	mov	lr, r5
 8001b56:	e7ce      	b.n	8001af6 <_printf_i+0x20a>
 8001b58:	7803      	ldrb	r3, [r0, #0]
 8001b5a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001b5e:	f104 0942 	add.w	r9, r4, #66	@ 0x42
 8001b62:	e77e      	b.n	8001a62 <_printf_i+0x176>
 8001b64:	6860      	ldr	r0, [r4, #4]
 8001b66:	e742      	b.n	80019ee <_printf_i+0x102>
 8001b68:	08005164 	.word	0x08005164
 8001b6c:	08005178 	.word	0x08005178

08001b70 <__malloc_lock>:
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop

08001b74 <__malloc_unlock>:
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop

08001b78 <__smakebuf_r>:
 8001b78:	b570      	push	{r4, r5, r6, lr}
 8001b7a:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8001b7e:	460c      	mov	r4, r1
 8001b80:	0799      	lsls	r1, r3, #30
 8001b82:	b096      	sub	sp, #88	@ 0x58
 8001b84:	d507      	bpl.n	8001b96 <__smakebuf_r+0x1e>
 8001b86:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	e9c4 3204 	strd	r3, r2, [r4, #16]
 8001b90:	6023      	str	r3, [r4, #0]
 8001b92:	b016      	add	sp, #88	@ 0x58
 8001b94:	bd70      	pop	{r4, r5, r6, pc}
 8001b96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001b9a:	2900      	cmp	r1, #0
 8001b9c:	4605      	mov	r5, r0
 8001b9e:	db29      	blt.n	8001bf4 <__smakebuf_r+0x7c>
 8001ba0:	466a      	mov	r2, sp
 8001ba2:	f000 f929 	bl	8001df8 <_fstat_r>
 8001ba6:	2800      	cmp	r0, #0
 8001ba8:	db22      	blt.n	8001bf0 <__smakebuf_r+0x78>
 8001baa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001bae:	4628      	mov	r0, r5
 8001bb0:	9e01      	ldr	r6, [sp, #4]
 8001bb2:	f7ff fb9f 	bl	80012f4 <_malloc_r>
 8001bb6:	b388      	cbz	r0, 8001c1c <__smakebuf_r+0xa4>
 8001bb8:	89a3      	ldrh	r3, [r4, #12]
 8001bba:	6020      	str	r0, [r4, #0]
 8001bbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001bc0:	f406 4670 	and.w	r6, r6, #61440	@ 0xf000
 8001bc4:	81a3      	strh	r3, [r4, #12]
 8001bc6:	f5b6 5f00 	cmp.w	r6, #8192	@ 0x2000
 8001bca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001bce:	e9c4 0304 	strd	r0, r3, [r4, #16]
 8001bd2:	d1de      	bne.n	8001b92 <__smakebuf_r+0x1a>
 8001bd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001bd8:	4628      	mov	r0, r5
 8001bda:	f000 f857 	bl	8001c8c <_isatty_r>
 8001bde:	2800      	cmp	r0, #0
 8001be0:	d0d7      	beq.n	8001b92 <__smakebuf_r+0x1a>
 8001be2:	89a3      	ldrh	r3, [r4, #12]
 8001be4:	f023 0303 	bic.w	r3, r3, #3
 8001be8:	f043 0301 	orr.w	r3, r3, #1
 8001bec:	81a3      	strh	r3, [r4, #12]
 8001bee:	e7d0      	b.n	8001b92 <__smakebuf_r+0x1a>
 8001bf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001bf4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001bf8:	bf14      	ite	ne
 8001bfa:	2640      	movne	r6, #64	@ 0x40
 8001bfc:	f44f 6680 	moveq.w	r6, #1024	@ 0x400
 8001c00:	4631      	mov	r1, r6
 8001c02:	4628      	mov	r0, r5
 8001c04:	f7ff fb76 	bl	80012f4 <_malloc_r>
 8001c08:	b140      	cbz	r0, 8001c1c <__smakebuf_r+0xa4>
 8001c0a:	89a3      	ldrh	r3, [r4, #12]
 8001c0c:	6020      	str	r0, [r4, #0]
 8001c0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c12:	e9c4 0604 	strd	r0, r6, [r4, #16]
 8001c16:	81a3      	strh	r3, [r4, #12]
 8001c18:	b016      	add	sp, #88	@ 0x58
 8001c1a:	bd70      	pop	{r4, r5, r6, pc}
 8001c1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001c20:	059a      	lsls	r2, r3, #22
 8001c22:	d4b6      	bmi.n	8001b92 <__smakebuf_r+0x1a>
 8001c24:	f023 0303 	bic.w	r3, r3, #3
 8001c28:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8001c2c:	f043 0302 	orr.w	r3, r3, #2
 8001c30:	2101      	movs	r1, #1
 8001c32:	e9c4 2104 	strd	r2, r1, [r4, #16]
 8001c36:	81a3      	strh	r3, [r4, #12]
 8001c38:	6022      	str	r2, [r4, #0]
 8001c3a:	e7aa      	b.n	8001b92 <__smakebuf_r+0x1a>

08001c3c <__swhatbuf_r>:
 8001c3c:	b570      	push	{r4, r5, r6, lr}
 8001c3e:	460c      	mov	r4, r1
 8001c40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c44:	2900      	cmp	r1, #0
 8001c46:	b096      	sub	sp, #88	@ 0x58
 8001c48:	4615      	mov	r5, r2
 8001c4a:	461e      	mov	r6, r3
 8001c4c:	db0f      	blt.n	8001c6e <__swhatbuf_r+0x32>
 8001c4e:	466a      	mov	r2, sp
 8001c50:	f000 f8d2 	bl	8001df8 <_fstat_r>
 8001c54:	2800      	cmp	r0, #0
 8001c56:	db0a      	blt.n	8001c6e <__swhatbuf_r+0x32>
 8001c58:	9b01      	ldr	r3, [sp, #4]
 8001c5a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8001c5e:	f5a3 5300 	sub.w	r3, r3, #8192	@ 0x2000
 8001c62:	fab3 f383 	clz	r3, r3
 8001c66:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c6a:	095b      	lsrs	r3, r3, #5
 8001c6c:	e008      	b.n	8001c80 <__swhatbuf_r+0x44>
 8001c6e:	89a2      	ldrh	r2, [r4, #12]
 8001c70:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8001c74:	f04f 0300 	mov.w	r3, #0
 8001c78:	bf14      	ite	ne
 8001c7a:	2240      	movne	r2, #64	@ 0x40
 8001c7c:	f44f 6280 	moveq.w	r2, #1024	@ 0x400
 8001c80:	2000      	movs	r0, #0
 8001c82:	6033      	str	r3, [r6, #0]
 8001c84:	602a      	str	r2, [r5, #0]
 8001c86:	b016      	add	sp, #88	@ 0x58
 8001c88:	bd70      	pop	{r4, r5, r6, pc}
 8001c8a:	bf00      	nop

08001c8c <_isatty_r>:
 8001c8c:	b538      	push	{r3, r4, r5, lr}
 8001c8e:	4d07      	ldr	r5, [pc, #28]	@ (8001cac <_isatty_r+0x20>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	4604      	mov	r4, r0
 8001c94:	4608      	mov	r0, r1
 8001c96:	602a      	str	r2, [r5, #0]
 8001c98:	f002 fa21 	bl	80040de <_isatty>
 8001c9c:	1c43      	adds	r3, r0, #1
 8001c9e:	d000      	beq.n	8001ca2 <_isatty_r+0x16>
 8001ca0:	bd38      	pop	{r3, r4, r5, pc}
 8001ca2:	682b      	ldr	r3, [r5, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d0fb      	beq.n	8001ca0 <_isatty_r+0x14>
 8001ca8:	6023      	str	r3, [r4, #0]
 8001caa:	bd38      	pop	{r3, r4, r5, pc}
 8001cac:	2000291c 	.word	0x2000291c

08001cb0 <_sbrk_r>:
 8001cb0:	b538      	push	{r3, r4, r5, lr}
 8001cb2:	4d07      	ldr	r5, [pc, #28]	@ (8001cd0 <_sbrk_r+0x20>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	4604      	mov	r4, r0
 8001cb8:	4608      	mov	r0, r1
 8001cba:	602a      	str	r2, [r5, #0]
 8001cbc:	f003 f89c 	bl	8004df8 <_sbrk>
 8001cc0:	1c43      	adds	r3, r0, #1
 8001cc2:	d000      	beq.n	8001cc6 <_sbrk_r+0x16>
 8001cc4:	bd38      	pop	{r3, r4, r5, pc}
 8001cc6:	682b      	ldr	r3, [r5, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d0fb      	beq.n	8001cc4 <_sbrk_r+0x14>
 8001ccc:	6023      	str	r3, [r4, #0]
 8001cce:	bd38      	pop	{r3, r4, r5, pc}
 8001cd0:	2000291c 	.word	0x2000291c

08001cd4 <__sread>:
 8001cd4:	b510      	push	{r4, lr}
 8001cd6:	460c      	mov	r4, r1
 8001cd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001cdc:	f000 f876 	bl	8001dcc <_read_r>
 8001ce0:	2800      	cmp	r0, #0
 8001ce2:	db03      	blt.n	8001cec <__sread+0x18>
 8001ce4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001ce6:	4403      	add	r3, r0
 8001ce8:	6563      	str	r3, [r4, #84]	@ 0x54
 8001cea:	bd10      	pop	{r4, pc}
 8001cec:	89a3      	ldrh	r3, [r4, #12]
 8001cee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001cf2:	81a3      	strh	r3, [r4, #12]
 8001cf4:	bd10      	pop	{r4, pc}
 8001cf6:	bf00      	nop

08001cf8 <__seofread>:
 8001cf8:	2000      	movs	r0, #0
 8001cfa:	4770      	bx	lr

08001cfc <__swrite>:
 8001cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d00:	460c      	mov	r4, r1
 8001d02:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
 8001d06:	461f      	mov	r7, r3
 8001d08:	05cb      	lsls	r3, r1, #23
 8001d0a:	4605      	mov	r5, r0
 8001d0c:	4616      	mov	r6, r2
 8001d0e:	d40b      	bmi.n	8001d28 <__swrite+0x2c>
 8001d10:	f421 5180 	bic.w	r1, r1, #4096	@ 0x1000
 8001d14:	81a1      	strh	r1, [r4, #12]
 8001d16:	463b      	mov	r3, r7
 8001d18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001d1c:	4632      	mov	r2, r6
 8001d1e:	4628      	mov	r0, r5
 8001d20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001d24:	f000 b894 	b.w	8001e50 <_write_r>
 8001d28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f000 f878 	bl	8001e24 <_lseek_r>
 8001d34:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8001d38:	e7ea      	b.n	8001d10 <__swrite+0x14>
 8001d3a:	bf00      	nop

08001d3c <__sseek>:
 8001d3c:	b510      	push	{r4, lr}
 8001d3e:	460c      	mov	r4, r1
 8001d40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d44:	f000 f86e 	bl	8001e24 <_lseek_r>
 8001d48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d4c:	1c42      	adds	r2, r0, #1
 8001d4e:	bf0e      	itee	eq
 8001d50:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001d54:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001d58:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001d5a:	81a3      	strh	r3, [r4, #12]
 8001d5c:	bd10      	pop	{r4, pc}
 8001d5e:	bf00      	nop

08001d60 <__sclose>:
 8001d60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d64:	f000 b820 	b.w	8001da8 <_close_r>

08001d68 <_malloc_usable_size_r>:
 8001d68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001d6c:	1f18      	subs	r0, r3, #4
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	bfbc      	itt	lt
 8001d72:	580b      	ldrlt	r3, [r1, r0]
 8001d74:	18c0      	addlt	r0, r0, r3
 8001d76:	4770      	bx	lr

08001d78 <_kill_r>:
 8001d78:	b570      	push	{r4, r5, r6, lr}
 8001d7a:	460c      	mov	r4, r1
 8001d7c:	4d08      	ldr	r5, [pc, #32]	@ (8001da0 <_kill_r+0x28>)
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2600      	movs	r6, #0
 8001d82:	4620      	mov	r0, r4
 8001d84:	4611      	mov	r1, r2
 8001d86:	461c      	mov	r4, r3
 8001d88:	602e      	str	r6, [r5, #0]
 8001d8a:	f002 f9a9 	bl	80040e0 <_kill>
 8001d8e:	1c43      	adds	r3, r0, #1
 8001d90:	d000      	beq.n	8001d94 <_kill_r+0x1c>
 8001d92:	bd70      	pop	{r4, r5, r6, pc}
 8001d94:	682b      	ldr	r3, [r5, #0]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d0fb      	beq.n	8001d92 <_kill_r+0x1a>
 8001d9a:	6023      	str	r3, [r4, #0]
 8001d9c:	bd70      	pop	{r4, r5, r6, pc}
 8001d9e:	bf00      	nop
 8001da0:	2000291c 	.word	0x2000291c

08001da4 <_getpid_r>:
 8001da4:	f002 b99a 	b.w	80040dc <_getpid>

08001da8 <_close_r>:
 8001da8:	b538      	push	{r3, r4, r5, lr}
 8001daa:	4d07      	ldr	r5, [pc, #28]	@ (8001dc8 <_close_r+0x20>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	4604      	mov	r4, r0
 8001db0:	4608      	mov	r0, r1
 8001db2:	602a      	str	r2, [r5, #0]
 8001db4:	f002 f990 	bl	80040d8 <_close>
 8001db8:	1c43      	adds	r3, r0, #1
 8001dba:	d000      	beq.n	8001dbe <_close_r+0x16>
 8001dbc:	bd38      	pop	{r3, r4, r5, pc}
 8001dbe:	682b      	ldr	r3, [r5, #0]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d0fb      	beq.n	8001dbc <_close_r+0x14>
 8001dc4:	6023      	str	r3, [r4, #0]
 8001dc6:	bd38      	pop	{r3, r4, r5, pc}
 8001dc8:	2000291c 	.word	0x2000291c

08001dcc <_read_r>:
 8001dcc:	b538      	push	{r3, r4, r5, lr}
 8001dce:	460c      	mov	r4, r1
 8001dd0:	4d08      	ldr	r5, [pc, #32]	@ (8001df4 <_read_r+0x28>)
 8001dd2:	4684      	mov	ip, r0
 8001dd4:	4611      	mov	r1, r2
 8001dd6:	4620      	mov	r0, r4
 8001dd8:	461a      	mov	r2, r3
 8001dda:	2300      	movs	r3, #0
 8001ddc:	602b      	str	r3, [r5, #0]
 8001dde:	4664      	mov	r4, ip
 8001de0:	f002 f980 	bl	80040e4 <_read>
 8001de4:	1c43      	adds	r3, r0, #1
 8001de6:	d000      	beq.n	8001dea <_read_r+0x1e>
 8001de8:	bd38      	pop	{r3, r4, r5, pc}
 8001dea:	682b      	ldr	r3, [r5, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d0fb      	beq.n	8001de8 <_read_r+0x1c>
 8001df0:	6023      	str	r3, [r4, #0]
 8001df2:	bd38      	pop	{r3, r4, r5, pc}
 8001df4:	2000291c 	.word	0x2000291c

08001df8 <_fstat_r>:
 8001df8:	b570      	push	{r4, r5, r6, lr}
 8001dfa:	460c      	mov	r4, r1
 8001dfc:	4d08      	ldr	r5, [pc, #32]	@ (8001e20 <_fstat_r+0x28>)
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2600      	movs	r6, #0
 8001e02:	4620      	mov	r0, r4
 8001e04:	4611      	mov	r1, r2
 8001e06:	461c      	mov	r4, r3
 8001e08:	602e      	str	r6, [r5, #0]
 8001e0a:	f002 f966 	bl	80040da <_fstat>
 8001e0e:	1c43      	adds	r3, r0, #1
 8001e10:	d000      	beq.n	8001e14 <_fstat_r+0x1c>
 8001e12:	bd70      	pop	{r4, r5, r6, pc}
 8001e14:	682b      	ldr	r3, [r5, #0]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d0fb      	beq.n	8001e12 <_fstat_r+0x1a>
 8001e1a:	6023      	str	r3, [r4, #0]
 8001e1c:	bd70      	pop	{r4, r5, r6, pc}
 8001e1e:	bf00      	nop
 8001e20:	2000291c 	.word	0x2000291c

08001e24 <_lseek_r>:
 8001e24:	b538      	push	{r3, r4, r5, lr}
 8001e26:	460c      	mov	r4, r1
 8001e28:	4d08      	ldr	r5, [pc, #32]	@ (8001e4c <_lseek_r+0x28>)
 8001e2a:	4684      	mov	ip, r0
 8001e2c:	4611      	mov	r1, r2
 8001e2e:	4620      	mov	r0, r4
 8001e30:	461a      	mov	r2, r3
 8001e32:	2300      	movs	r3, #0
 8001e34:	602b      	str	r3, [r5, #0]
 8001e36:	4664      	mov	r4, ip
 8001e38:	f002 f953 	bl	80040e2 <_lseek>
 8001e3c:	1c43      	adds	r3, r0, #1
 8001e3e:	d000      	beq.n	8001e42 <_lseek_r+0x1e>
 8001e40:	bd38      	pop	{r3, r4, r5, pc}
 8001e42:	682b      	ldr	r3, [r5, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d0fb      	beq.n	8001e40 <_lseek_r+0x1c>
 8001e48:	6023      	str	r3, [r4, #0]
 8001e4a:	bd38      	pop	{r3, r4, r5, pc}
 8001e4c:	2000291c 	.word	0x2000291c

08001e50 <_write_r>:
 8001e50:	b538      	push	{r3, r4, r5, lr}
 8001e52:	460c      	mov	r4, r1
 8001e54:	4d08      	ldr	r5, [pc, #32]	@ (8001e78 <_write_r+0x28>)
 8001e56:	4684      	mov	ip, r0
 8001e58:	4611      	mov	r1, r2
 8001e5a:	4620      	mov	r0, r4
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	2300      	movs	r3, #0
 8001e60:	602b      	str	r3, [r5, #0]
 8001e62:	4664      	mov	r4, ip
 8001e64:	f002 f93f 	bl	80040e6 <_write>
 8001e68:	1c43      	adds	r3, r0, #1
 8001e6a:	d000      	beq.n	8001e6e <_write_r+0x1e>
 8001e6c:	bd38      	pop	{r3, r4, r5, pc}
 8001e6e:	682b      	ldr	r3, [r5, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d0fb      	beq.n	8001e6c <_write_r+0x1c>
 8001e74:	6023      	str	r3, [r4, #0]
 8001e76:	bd38      	pop	{r3, r4, r5, pc}
 8001e78:	2000291c 	.word	0x2000291c

08001e7c <_exit>:
 8001e7c:	e7fe      	b.n	8001e7c <_exit>
 8001e7e:	bf00      	nop

08001e80 <insert_variable>:
    simpleserial_put('r', 35, puntero_prueba);
    return 0x00;
}

uint8_t insert_variable(uint8_t* pt, uint8_t len)
{
 8001e80:	b530      	push	{r4, r5, lr}
 8001e82:	4602      	mov	r2, r0
 8001e84:	490c      	ldr	r1, [pc, #48]	@ (8001eb8 <insert_variable+0x38>)
    // Insertar valores en sk
    int variable_type = pt[0];
 8001e86:	f812 5b03 	ldrb.w	r5, [r2], #3
 8001e8a:	f8b0 3001 	ldrh.w	r3, [r0, #1]
    int offset = pt[2] | pt[1] << 8;
    int total_data = pt[3];
 8001e8e:	78c4      	ldrb	r4, [r0, #3]
    uint8_t* ptr = variables[variable_type];
    int i;
    for (i = 0; i < total_data; i++){
 8001e90:	f851 1025 	ldr.w	r1, [r1, r5, lsl #2]
 8001e94:	f1c0 20ff 	rsb	r0, r0, #4278255360	@ 0xff00ff00
 8001e98:	ba5b      	rev16	r3, r3
 8001e9a:	f500 007f 	add.w	r0, r0, #16711680	@ 0xff0000
 8001e9e:	fa11 f383 	uxtah	r3, r1, r3
 8001ea2:	30fd      	adds	r0, #253	@ 0xfd
 8001ea4:	1881      	adds	r1, r0, r2
 8001ea6:	428c      	cmp	r4, r1
 8001ea8:	dc01      	bgt.n	8001eae <insert_variable+0x2e>
        ptr[offset+i] = pt[VARIABLE_TYPE_LEN+OFFSET_LEN+TOTAL_DATA_LEN+i];
    }
    return 0x00;
}
 8001eaa:	2000      	movs	r0, #0
 8001eac:	bd30      	pop	{r4, r5, pc}
        ptr[offset+i] = pt[VARIABLE_TYPE_LEN+OFFSET_LEN+TOTAL_DATA_LEN+i];
 8001eae:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8001eb2:	f803 1b01 	strb.w	r1, [r3], #1
    for (i = 0; i < total_data; i++){
 8001eb6:	e7f5      	b.n	8001ea4 <insert_variable+0x24>
 8001eb8:	20000000 	.word	0x20000000

08001ebc <generate_key>:
{
 8001ebc:	b510      	push	{r4, lr}
    trigger_high();
 8001ebe:	f002 f9b5 	bl	800422c <trigger_high>
    crypto_kem_keypair(pk, sk);
 8001ec2:	4907      	ldr	r1, [pc, #28]	@ (8001ee0 <generate_key+0x24>)
 8001ec4:	f501 6416 	add.w	r4, r1, #2400	@ 0x960
 8001ec8:	4620      	mov	r0, r4
 8001eca:	f001 fb6e 	bl	80035aa <crypto_kem_keypair>
    trigger_low();
 8001ece:	f002 f9b4 	bl	800423a <trigger_low>
    simpleserial_put('r', BUFFER_LEN, pk);
 8001ed2:	4622      	mov	r2, r4
 8001ed4:	213f      	movs	r1, #63	@ 0x3f
 8001ed6:	2072      	movs	r0, #114	@ 0x72
 8001ed8:	f002 f8fa 	bl	80040d0 <simpleserial_put>
}
 8001edc:	2000      	movs	r0, #0
 8001ede:	bd10      	pop	{r4, pc}
 8001ee0:	20000098 	.word	0x20000098

08001ee4 <clock_signal>:
{
 8001ee4:	b500      	push	{lr}
 8001ee6:	b093      	sub	sp, #76	@ 0x4c
    trigger_high();
 8001ee8:	f002 f9a0 	bl	800422c <trigger_high>
    trigger_low();
 8001eec:	f002 f9a5 	bl	800423a <trigger_low>
    uint8_t puntero[70] = {
 8001ef0:	4906      	ldr	r1, [pc, #24]	@ (8001f0c <clock_signal+0x28>)
 8001ef2:	2246      	movs	r2, #70	@ 0x46
 8001ef4:	4668      	mov	r0, sp
 8001ef6:	f7fe fab5 	bl	8000464 <memcpy>
    simpleserial_put('r', BUFFER_LEN, puntero);
 8001efa:	466a      	mov	r2, sp
 8001efc:	213f      	movs	r1, #63	@ 0x3f
 8001efe:	2072      	movs	r0, #114	@ 0x72
 8001f00:	f002 f8e6 	bl	80040d0 <simpleserial_put>
}
 8001f04:	2000      	movs	r0, #0
 8001f06:	b013      	add	sp, #76	@ 0x4c
 8001f08:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f0c:	08005060 	.word	0x08005060

08001f10 <prueba>:
{
 8001f10:	b570      	push	{r4, r5, r6, lr}
 8001f12:	b08a      	sub	sp, #40	@ 0x28
    trigger_high();
 8001f14:	f002 f98a 	bl	800422c <trigger_high>
    trigger_low();
 8001f18:	f002 f98f 	bl	800423a <trigger_low>
    uint8_t puntero_prueba[35] = {
 8001f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f4c <prueba+0x3c>)
 8001f1e:	ac01      	add	r4, sp, #4
 8001f20:	f103 0620 	add.w	r6, r3, #32
 8001f24:	4622      	mov	r2, r4
 8001f26:	6818      	ldr	r0, [r3, #0]
 8001f28:	6859      	ldr	r1, [r3, #4]
 8001f2a:	4625      	mov	r5, r4
 8001f2c:	c503      	stmia	r5!, {r0, r1}
 8001f2e:	3308      	adds	r3, #8
 8001f30:	42b3      	cmp	r3, r6
 8001f32:	462c      	mov	r4, r5
 8001f34:	d1f7      	bne.n	8001f26 <prueba+0x16>
 8001f36:	8819      	ldrh	r1, [r3, #0]
 8001f38:	789b      	ldrb	r3, [r3, #2]
 8001f3a:	8029      	strh	r1, [r5, #0]
 8001f3c:	70ab      	strb	r3, [r5, #2]
    simpleserial_put('r', 35, puntero_prueba);
 8001f3e:	2123      	movs	r1, #35	@ 0x23
 8001f40:	2072      	movs	r0, #114	@ 0x72
 8001f42:	f002 f8c5 	bl	80040d0 <simpleserial_put>
}
 8001f46:	2000      	movs	r0, #0
 8001f48:	b00a      	add	sp, #40	@ 0x28
 8001f4a:	bd70      	pop	{r4, r5, r6, pc}
 8001f4c:	080050a7 	.word	0x080050a7

08001f50 <encapsulate>:
{
 8001f50:	b510      	push	{r4, lr}
	trigger_high();
 8001f52:	f002 f96b 	bl	800422c <trigger_high>
	crypto_kem_enc(ct, ss, pk);
 8001f56:	4809      	ldr	r0, [pc, #36]	@ (8001f7c <encapsulate+0x2c>)
 8001f58:	f500 6416 	add.w	r4, r0, #2400	@ 0x960
 8001f5c:	4622      	mov	r2, r4
 8001f5e:	f500 6160 	add.w	r1, r0, #3584	@ 0xe00
 8001f62:	f500 6062 	add.w	r0, r0, #3616	@ 0xe20
 8001f66:	f001 fb3f 	bl	80035e8 <crypto_kem_enc>
	trigger_low();
 8001f6a:	f002 f966 	bl	800423a <trigger_low>
    simpleserial_put('r', BUFFER_LEN, pk);
 8001f6e:	4622      	mov	r2, r4
 8001f70:	213f      	movs	r1, #63	@ 0x3f
 8001f72:	2072      	movs	r0, #114	@ 0x72
 8001f74:	f002 f8ac 	bl	80040d0 <simpleserial_put>
}
 8001f78:	2000      	movs	r0, #0
 8001f7a:	bd10      	pop	{r4, pc}
 8001f7c:	20000098 	.word	0x20000098

08001f80 <decapsulate>:
{
 8001f80:	b510      	push	{r4, lr}
	trigger_high();
 8001f82:	f002 f953 	bl	800422c <trigger_high>
	crypto_kem_dec(ss, ct, sk);
 8001f86:	4a08      	ldr	r2, [pc, #32]	@ (8001fa8 <decapsulate+0x28>)
 8001f88:	f502 6460 	add.w	r4, r2, #3584	@ 0xe00
 8001f8c:	f502 6162 	add.w	r1, r2, #3616	@ 0xe20
 8001f90:	4620      	mov	r0, r4
 8001f92:	f001 fb5a 	bl	800364a <crypto_kem_dec>
	trigger_low();
 8001f96:	f002 f950 	bl	800423a <trigger_low>
    simpleserial_put('r', BUFFER_LEN, ss);
 8001f9a:	4622      	mov	r2, r4
 8001f9c:	213f      	movs	r1, #63	@ 0x3f
 8001f9e:	2072      	movs	r0, #114	@ 0x72
 8001fa0:	f002 f896 	bl	80040d0 <simpleserial_put>
}
 8001fa4:	2000      	movs	r0, #0
 8001fa6:	bd10      	pop	{r4, pc}
 8001fa8:	20000098 	.word	0x20000098

08001fac <temp_decapsulate>:
{
 8001fac:	b508      	push	{r3, lr}
	trigger_high();
 8001fae:	f002 f93d 	bl	800422c <trigger_high>
	crypto_kem_dec(ss_temp, ct_temp, sk_temp);
 8001fb2:	4809      	ldr	r0, [pc, #36]	@ (8001fd8 <temp_decapsulate+0x2c>)
 8001fb4:	f500 72b4 	add.w	r2, r0, #360	@ 0x168
 8001fb8:	f600 21c8 	addw	r1, r0, #2760	@ 0xac8
 8001fbc:	f600 7008 	addw	r0, r0, #3848	@ 0xf08
 8001fc0:	f001 fb43 	bl	800364a <crypto_kem_dec>
	trigger_low();
 8001fc4:	f002 f939 	bl	800423a <trigger_low>
    simpleserial_put('r', BUFFER_LEN, ss);
 8001fc8:	4a04      	ldr	r2, [pc, #16]	@ (8001fdc <temp_decapsulate+0x30>)
 8001fca:	213f      	movs	r1, #63	@ 0x3f
 8001fcc:	2072      	movs	r0, #114	@ 0x72
 8001fce:	f002 f87f 	bl	80040d0 <simpleserial_put>
}
 8001fd2:	2000      	movs	r0, #0
 8001fd4:	bd08      	pop	{r3, pc}
 8001fd6:	bf00      	nop
 8001fd8:	20001190 	.word	0x20001190
 8001fdc:	20000e98 	.word	0x20000e98

08001fe0 <return_variable>:

uint8_t return_variable(uint8_t* pt, uint8_t len)
{
 8001fe0:	b570      	push	{r4, r5, r6, lr}
    // Devolver puntero desde offset especificado
    int variable_type = pt[0];
    int offset = pt[2] | pt[1] << 8;
    int total_data = pt[3];
    uint8_t* ptr = variables[variable_type];
 8001fe2:	4b11      	ldr	r3, [pc, #68]	@ (8002028 <return_variable+0x48>)
    int variable_type = pt[0];
 8001fe4:	7802      	ldrb	r2, [r0, #0]
 8001fe6:	f8b0 4001 	ldrh.w	r4, [r0, #1]
    uint8_t* ptr = variables[variable_type];
 8001fea:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
    int total_data = pt[3];
 8001fee:	78c6      	ldrb	r6, [r0, #3]
{
 8001ff0:	b090      	sub	sp, #64	@ 0x40
 8001ff2:	ba64      	rev16	r4, r4
    uint8_t new_ptr[BUFFER_LEN];
    memset(new_ptr, 0x00, BUFFER_LEN);
 8001ff4:	223f      	movs	r2, #63	@ 0x3f
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	b2a4      	uxth	r4, r4
 8001ffa:	4668      	mov	r0, sp
 8001ffc:	f7fe f9da 	bl	80003b4 <memset>
    int i;
    for (i = 0; i < total_data; i++){
 8002000:	192b      	adds	r3, r5, r4
 8002002:	4669      	mov	r1, sp
 8002004:	2200      	movs	r2, #0
 8002006:	42b2      	cmp	r2, r6
 8002008:	db07      	blt.n	800201a <return_variable+0x3a>
        new_ptr[i] = ptr[offset+i];
    }
    simpleserial_put('r', BUFFER_LEN, new_ptr);
 800200a:	466a      	mov	r2, sp
 800200c:	213f      	movs	r1, #63	@ 0x3f
 800200e:	2072      	movs	r0, #114	@ 0x72
 8002010:	f002 f85e 	bl	80040d0 <simpleserial_put>

    return 0x00;
}
 8002014:	2000      	movs	r0, #0
 8002016:	b010      	add	sp, #64	@ 0x40
 8002018:	bd70      	pop	{r4, r5, r6, pc}
        new_ptr[i] = ptr[offset+i];
 800201a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800201e:	f801 0b01 	strb.w	r0, [r1], #1
    for (i = 0; i < total_data; i++){
 8002022:	3201      	adds	r2, #1
 8002024:	e7ef      	b.n	8002006 <return_variable+0x26>
 8002026:	bf00      	nop
 8002028:	20000000 	.word	0x20000000

0800202c <main>:

int main(void)
{
 800202c:	b508      	push	{r3, lr}
    // Inicializar chipwhisperer
    platform_init();
 800202e:	f002 f85b 	bl	80040e8 <platform_init>
	init_uart();
 8002032:	f002 f899 	bl	8004168 <init_uart>
	trigger_setup();
 8002036:	f002 f8d5 	bl	80041e4 <trigger_setup>

	simpleserial_init();
 800203a:	f001 ffd5 	bl	8003fe8 <simpleserial_init>
            
        }
    }
    */
    
	simpleserial_addcmd('g', BUFFER_LEN, generate_key);
 800203e:	4a15      	ldr	r2, [pc, #84]	@ (8002094 <main+0x68>)
 8002040:	213f      	movs	r1, #63	@ 0x3f
 8002042:	2067      	movs	r0, #103	@ 0x67
 8002044:	f001 ffcc 	bl	8003fe0 <simpleserial_addcmd>
	simpleserial_addcmd('e', BUFFER_LEN, encapsulate);
 8002048:	4a13      	ldr	r2, [pc, #76]	@ (8002098 <main+0x6c>)
 800204a:	213f      	movs	r1, #63	@ 0x3f
 800204c:	2065      	movs	r0, #101	@ 0x65
 800204e:	f001 ffc7 	bl	8003fe0 <simpleserial_addcmd>
	simpleserial_addcmd('d', BUFFER_LEN, decapsulate);
 8002052:	4a12      	ldr	r2, [pc, #72]	@ (800209c <main+0x70>)
 8002054:	213f      	movs	r1, #63	@ 0x3f
 8002056:	2064      	movs	r0, #100	@ 0x64
 8002058:	f001 ffc2 	bl	8003fe0 <simpleserial_addcmd>
	simpleserial_addcmd('t', BUFFER_LEN, temp_decapsulate);
 800205c:	4a10      	ldr	r2, [pc, #64]	@ (80020a0 <main+0x74>)
 800205e:	213f      	movs	r1, #63	@ 0x3f
 8002060:	2074      	movs	r0, #116	@ 0x74
 8002062:	f001 ffbd 	bl	8003fe0 <simpleserial_addcmd>
    simpleserial_addcmd('c', BUFFER_LEN, clock_signal);
 8002066:	4a0f      	ldr	r2, [pc, #60]	@ (80020a4 <main+0x78>)
 8002068:	213f      	movs	r1, #63	@ 0x3f
 800206a:	2063      	movs	r0, #99	@ 0x63
 800206c:	f001 ffb8 	bl	8003fe0 <simpleserial_addcmd>
    simpleserial_addcmd('i', BUFFER_LEN, insert_variable);
 8002070:	4a0d      	ldr	r2, [pc, #52]	@ (80020a8 <main+0x7c>)
 8002072:	213f      	movs	r1, #63	@ 0x3f
 8002074:	2069      	movs	r0, #105	@ 0x69
 8002076:	f001 ffb3 	bl	8003fe0 <simpleserial_addcmd>
    simpleserial_addcmd('r', BUFFER_LEN, return_variable);
 800207a:	4a0c      	ldr	r2, [pc, #48]	@ (80020ac <main+0x80>)
 800207c:	213f      	movs	r1, #63	@ 0x3f
 800207e:	2072      	movs	r0, #114	@ 0x72
 8002080:	f001 ffae 	bl	8003fe0 <simpleserial_addcmd>
    simpleserial_addcmd('p', 1, prueba);
 8002084:	4a0a      	ldr	r2, [pc, #40]	@ (80020b0 <main+0x84>)
 8002086:	2101      	movs	r1, #1
 8002088:	2070      	movs	r0, #112	@ 0x70
 800208a:	f001 ffa9 	bl	8003fe0 <simpleserial_addcmd>

	while(1)
		simpleserial_get();
 800208e:	f001 ffc1 	bl	8004014 <simpleserial_get>
	while(1)
 8002092:	e7fc      	b.n	800208e <main+0x62>
 8002094:	08001ebd 	.word	0x08001ebd
 8002098:	08001f51 	.word	0x08001f51
 800209c:	08001f81 	.word	0x08001f81
 80020a0:	08001fad 	.word	0x08001fad
 80020a4:	08001ee5 	.word	0x08001ee5
 80020a8:	08001e81 	.word	0x08001e81
 80020ac:	08001fe1 	.word	0x08001fe1
 80020b0:	08001f11 	.word	0x08001f11

080020b4 <cbd2>:
*
* Arguments:   - poly *r: pointer to output polynomial
*              - const uint8_t *buf: pointer to input byte array
**************************************************/
static void cbd2(poly *r, const uint8_t buf[2*KYBER_N/4])
{
 80020b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020b6:	2500      	movs	r5, #0
  r |= (uint32_t)x[3] << 24;
 80020b8:	680b      	ldr	r3, [r1, #0]
  uint32_t t,d;
  int16_t a,b;

  for(i=0;i<KYBER_N/8;i++) {
    t  = load32_littleendian(buf+4*i);
    d  = t & 0x55555555;
 80020ba:	f003 3255 	and.w	r2, r3, #1431655765	@ 0x55555555
    d += (t>>1) & 0x55555555;
 80020be:	085b      	lsrs	r3, r3, #1
 80020c0:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 80020c4:	4413      	add	r3, r2

    for(j=0;j<8;j++) {
 80020c6:	eb00 0745 	add.w	r7, r0, r5, lsl #1
    d += (t>>1) & 0x55555555;
 80020ca:	2402      	movs	r4, #2
      a = (d >> (4*j+0)) & 0x3;
 80020cc:	1ea2      	subs	r2, r4, #2
      b = (d >> (4*j+2)) & 0x3;
 80020ce:	fa23 f604 	lsr.w	r6, r3, r4
      a = (d >> (4*j+0)) & 0x3;
 80020d2:	fa23 f202 	lsr.w	r2, r3, r2
 80020d6:	f002 0203 	and.w	r2, r2, #3
      b = (d >> (4*j+2)) & 0x3;
 80020da:	f006 0603 	and.w	r6, r6, #3
    for(j=0;j<8;j++) {
 80020de:	3404      	adds	r4, #4
      r->coeffs[8*i+j] = a - b;
 80020e0:	1b92      	subs	r2, r2, r6
    for(j=0;j<8;j++) {
 80020e2:	2c22      	cmp	r4, #34	@ 0x22
      r->coeffs[8*i+j] = a - b;
 80020e4:	f827 2b02 	strh.w	r2, [r7], #2
    for(j=0;j<8;j++) {
 80020e8:	d1f0      	bne.n	80020cc <cbd2+0x18>
  for(i=0;i<KYBER_N/8;i++) {
 80020ea:	3508      	adds	r5, #8
 80020ec:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 80020f0:	f101 0104 	add.w	r1, r1, #4
 80020f4:	d1e0      	bne.n	80020b8 <cbd2+0x4>
    }
  }
}
 80020f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020f8 <poly_cbd_eta1>:
}
#endif

void poly_cbd_eta1(poly *r, const uint8_t buf[KYBER_ETA1*KYBER_N/4])
{
  cbd2(r, buf);
 80020f8:	f7ff bfdc 	b.w	80020b4 <cbd2>

080020fc <poly_cbd_eta2>:
}

void poly_cbd_eta2(poly *r, const uint8_t buf[KYBER_ETA2*KYBER_N/4])
 80020fc:	f7ff bfda 	b.w	80020b4 <cbd2>

08002100 <KeccakF1600_StatePermute>:
* Description: The Keccak F1600 Permutation
*
* Arguments:   - uint64_t *state: pointer to input/output Keccak state
**************************************************/
static void KeccakF1600_StatePermute(uint64_t state[25])
{
 8002100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002104:	b0bd      	sub	sp, #244	@ 0xf4
        uint64_t Eka, Eke, Eki, Eko, Eku;
        uint64_t Ema, Eme, Emi, Emo, Emu;
        uint64_t Esa, Ese, Esi, Eso, Esu;

        //copyFromState(A, state)
        Aba = state[ 0];
 8002106:	6803      	ldr	r3, [r0, #0]
 8002108:	930a      	str	r3, [sp, #40]	@ 0x28
 800210a:	6843      	ldr	r3, [r0, #4]
 800210c:	930b      	str	r3, [sp, #44]	@ 0x2c
        Abe = state[ 1];
 800210e:	6883      	ldr	r3, [r0, #8]
 8002110:	930c      	str	r3, [sp, #48]	@ 0x30
 8002112:	68c3      	ldr	r3, [r0, #12]
 8002114:	930d      	str	r3, [sp, #52]	@ 0x34
        Abi = state[ 2];
 8002116:	6903      	ldr	r3, [r0, #16]
 8002118:	930e      	str	r3, [sp, #56]	@ 0x38
 800211a:	6943      	ldr	r3, [r0, #20]
 800211c:	930f      	str	r3, [sp, #60]	@ 0x3c
        Abo = state[ 3];
 800211e:	6983      	ldr	r3, [r0, #24]
 8002120:	9310      	str	r3, [sp, #64]	@ 0x40
 8002122:	69c3      	ldr	r3, [r0, #28]
 8002124:	9311      	str	r3, [sp, #68]	@ 0x44
        Abu = state[ 4];
 8002126:	6a03      	ldr	r3, [r0, #32]
 8002128:	9312      	str	r3, [sp, #72]	@ 0x48
 800212a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800212c:	9313      	str	r3, [sp, #76]	@ 0x4c
        Aga = state[ 5];
 800212e:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8002130:	9314      	str	r3, [sp, #80]	@ 0x50
 8002132:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8002134:	9315      	str	r3, [sp, #84]	@ 0x54
        Age = state[ 6];
 8002136:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002138:	9316      	str	r3, [sp, #88]	@ 0x58
 800213a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800213c:	9317      	str	r3, [sp, #92]	@ 0x5c
        Agi = state[ 7];
 800213e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8002140:	9318      	str	r3, [sp, #96]	@ 0x60
 8002142:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8002144:	9319      	str	r3, [sp, #100]	@ 0x64
        Ago = state[ 8];
 8002146:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8002148:	931a      	str	r3, [sp, #104]	@ 0x68
 800214a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800214c:	931b      	str	r3, [sp, #108]	@ 0x6c
        Agu = state[ 9];
 800214e:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8002150:	931c      	str	r3, [sp, #112]	@ 0x70
 8002152:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8002154:	931d      	str	r3, [sp, #116]	@ 0x74
        Aka = state[10];
 8002156:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8002158:	931e      	str	r3, [sp, #120]	@ 0x78
 800215a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800215c:	931f      	str	r3, [sp, #124]	@ 0x7c
        Ake = state[11];
 800215e:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8002160:	9320      	str	r3, [sp, #128]	@ 0x80
 8002162:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8002164:	9321      	str	r3, [sp, #132]	@ 0x84
        Aki = state[12];
 8002166:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8002168:	9322      	str	r3, [sp, #136]	@ 0x88
 800216a:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 800216c:	9323      	str	r3, [sp, #140]	@ 0x8c
        Ako = state[13];
 800216e:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8002170:	9324      	str	r3, [sp, #144]	@ 0x90
 8002172:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8002174:	9325      	str	r3, [sp, #148]	@ 0x94
        Aku = state[14];
 8002176:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 8002178:	9326      	str	r3, [sp, #152]	@ 0x98
 800217a:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 800217c:	9327      	str	r3, [sp, #156]	@ 0x9c
        Ama = state[15];
 800217e:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 8002180:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002182:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8002184:	9329      	str	r3, [sp, #164]	@ 0xa4
        Ame = state[16];
 8002186:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 800218a:	932a      	str	r3, [sp, #168]	@ 0xa8
 800218c:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 8002190:	932b      	str	r3, [sp, #172]	@ 0xac
        Ami = state[17];
 8002192:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8002196:	932c      	str	r3, [sp, #176]	@ 0xb0
 8002198:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 800219c:	932d      	str	r3, [sp, #180]	@ 0xb4
        Amo = state[18];
 800219e:	f8d0 3090 	ldr.w	r3, [r0, #144]	@ 0x90
 80021a2:	932e      	str	r3, [sp, #184]	@ 0xb8
 80021a4:	f8d0 3094 	ldr.w	r3, [r0, #148]	@ 0x94
 80021a8:	932f      	str	r3, [sp, #188]	@ 0xbc
        Amu = state[19];
 80021aa:	f8d0 3098 	ldr.w	r3, [r0, #152]	@ 0x98
 80021ae:	9330      	str	r3, [sp, #192]	@ 0xc0
 80021b0:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 80021b4:	9331      	str	r3, [sp, #196]	@ 0xc4
        Asa = state[20];
 80021b6:	f8d0 30a0 	ldr.w	r3, [r0, #160]	@ 0xa0
 80021ba:	9332      	str	r3, [sp, #200]	@ 0xc8
 80021bc:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 80021c0:	9333      	str	r3, [sp, #204]	@ 0xcc
        Ase = state[21];
 80021c2:	f8d0 30a8 	ldr.w	r3, [r0, #168]	@ 0xa8
 80021c6:	9334      	str	r3, [sp, #208]	@ 0xd0
 80021c8:	f8d0 30ac 	ldr.w	r3, [r0, #172]	@ 0xac
 80021cc:	9335      	str	r3, [sp, #212]	@ 0xd4
        Asi = state[22];
 80021ce:	f8d0 30b0 	ldr.w	r3, [r0, #176]	@ 0xb0
 80021d2:	9336      	str	r3, [sp, #216]	@ 0xd8
 80021d4:	f8d0 30b4 	ldr.w	r3, [r0, #180]	@ 0xb4
 80021d8:	9337      	str	r3, [sp, #220]	@ 0xdc
        Aso = state[23];
 80021da:	f8d0 30b8 	ldr.w	r3, [r0, #184]	@ 0xb8
 80021de:	9338      	str	r3, [sp, #224]	@ 0xe0
 80021e0:	f8d0 30bc 	ldr.w	r3, [r0, #188]	@ 0xbc
 80021e4:	9339      	str	r3, [sp, #228]	@ 0xe4
        Asu = state[24];
 80021e6:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 80021ea:	933a      	str	r3, [sp, #232]	@ 0xe8
 80021ec:	f8d0 60c4 	ldr.w	r6, [r0, #196]	@ 0xc4

        for(round = 0; round < NROUNDS; round += 2) {
 80021f0:	4b01      	ldr	r3, [pc, #4]	@ (80021f8 <KeccakF1600_StatePermute+0xf8>)
 80021f2:	9300      	str	r3, [sp, #0]
 80021f4:	e002      	b.n	80021fc <KeccakF1600_StatePermute+0xfc>
 80021f6:	bf00      	nop
 80021f8:	08004e90 	.word	0x08004e90
            //    prepareTheta
            BCa = Aba^Aga^Aka^Ama^Asa;
 80021fc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80021fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002200:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8002202:	4053      	eors	r3, r2
 8002204:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8002206:	ea82 0501 	eor.w	r5, r2, r1
 800220a:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800220c:	4053      	eors	r3, r2
 800220e:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8002210:	4055      	eors	r5, r2
 8002212:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8002214:	4053      	eors	r3, r2
 8002216:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8002218:	4055      	eors	r5, r2
 800221a:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 800221c:	4053      	eors	r3, r2
 800221e:	9a33      	ldr	r2, [sp, #204]	@ 0xcc
 8002220:	9308      	str	r3, [sp, #32]
 8002222:	4055      	eors	r5, r2
            BCe = Abe^Age^Ake^Ame^Ase;
 8002224:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8002226:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8002228:	ea83 0902 	eor.w	r9, r3, r2
 800222c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800222e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8002230:	ea83 0802 	eor.w	r8, r3, r2
 8002234:	9b20      	ldr	r3, [sp, #128]	@ 0x80
            BCi = Abi^Agi^Aki^Ami^Asi;
 8002236:	9a18      	ldr	r2, [sp, #96]	@ 0x60
            BCe = Abe^Age^Ake^Ame^Ase;
 8002238:	ea89 0903 	eor.w	r9, r9, r3
 800223c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800223e:	ea88 0803 	eor.w	r8, r8, r3
 8002242:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8002244:	ea89 0903 	eor.w	r9, r9, r3
 8002248:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 800224a:	ea88 0803 	eor.w	r8, r8, r3
 800224e:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 8002250:	ea89 0903 	eor.w	r9, r9, r3
 8002254:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 8002256:	ea88 0803 	eor.w	r8, r8, r3
            BCi = Abi^Agi^Aki^Ami^Asi;
 800225a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800225c:	ea83 0c02 	eor.w	ip, r3, r2
 8002260:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8002262:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8002264:	ea83 0702 	eor.w	r7, r3, r2
 8002268:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800226a:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800226c:	ea8c 0c03 	eor.w	ip, ip, r3
 8002270:	4057      	eors	r7, r2
 8002272:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8002274:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8002276:	ea8c 0c03 	eor.w	ip, ip, r3
 800227a:	4057      	eors	r7, r2
 800227c:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 800227e:	9a37      	ldr	r2, [sp, #220]	@ 0xdc
 8002280:	ea8c 0c03 	eor.w	ip, ip, r3
 8002284:	4057      	eors	r7, r2
            BCo = Abo^Ago^Ako^Amo^Aso;
 8002286:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8002288:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
            BCu = Abu^Agu^Aku^Amu^Asu;
 800228a:	f8dd e074 	ldr.w	lr, [sp, #116]	@ 0x74
            BCo = Abo^Ago^Ako^Amo^Aso;
 800228e:	ea83 0402 	eor.w	r4, r3, r2
 8002292:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8002294:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8002296:	ea83 0102 	eor.w	r1, r3, r2
 800229a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
            BCu = Abu^Agu^Aku^Amu^Asu;
 800229c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
            BCo = Abo^Ago^Ako^Amo^Aso;
 800229e:	4054      	eors	r4, r2
 80022a0:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 80022a2:	4051      	eors	r1, r2
 80022a4:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
 80022a6:	4054      	eors	r4, r2
 80022a8:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 80022aa:	4051      	eors	r1, r2
 80022ac:	9a38      	ldr	r2, [sp, #224]	@ 0xe0
 80022ae:	4054      	eors	r4, r2
 80022b0:	9a39      	ldr	r2, [sp, #228]	@ 0xe4
 80022b2:	4051      	eors	r1, r2
            BCu = Abu^Agu^Aku^Amu^Asu;
 80022b4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80022b6:	405a      	eors	r2, r3
 80022b8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80022ba:	ea83 0e0e 	eor.w	lr, r3, lr
 80022be:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80022c0:	405a      	eors	r2, r3
 80022c2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80022c4:	ea8e 0e03 	eor.w	lr, lr, r3
 80022c8:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80022ca:	405a      	eors	r2, r3
 80022cc:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 80022ce:	ea8e 0e03 	eor.w	lr, lr, r3
 80022d2:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8

            //thetaRhoPiChiIotaPrepareTheta(round, A, E)
            Da = BCu^ROL(BCe, 1);
 80022d4:	ea4f 0b49 	mov.w	fp, r9, lsl #1
            BCu = Abu^Agu^Aku^Amu^Asu;
 80022d8:	405a      	eors	r2, r3
            Da = BCu^ROL(BCe, 1);
 80022da:	ea4b 7bd8 	orr.w	fp, fp, r8, lsr #31
 80022de:	ea4f 0a48 	mov.w	sl, r8, lsl #1
            BCu = Abu^Agu^Aku^Amu^Asu;
 80022e2:	ea8e 0e06 	eor.w	lr, lr, r6
            Da = BCu^ROL(BCe, 1);
 80022e6:	ea8b 0302 	eor.w	r3, fp, r2
 80022ea:	ea4a 7ad9 	orr.w	sl, sl, r9, lsr #31
 80022ee:	9301      	str	r3, [sp, #4]
 80022f0:	ea8a 030e 	eor.w	r3, sl, lr
 80022f4:	9302      	str	r3, [sp, #8]
            De = BCa^ROL(BCi, 1);
 80022f6:	ea4f 0b4c 	mov.w	fp, ip, lsl #1
 80022fa:	9b08      	ldr	r3, [sp, #32]
 80022fc:	ea4b 7bd7 	orr.w	fp, fp, r7, lsr #31
 8002300:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 8002304:	ea4a 7adc 	orr.w	sl, sl, ip, lsr #31
 8002308:	ea8b 0303 	eor.w	r3, fp, r3
 800230c:	9303      	str	r3, [sp, #12]
 800230e:	ea8a 0305 	eor.w	r3, sl, r5
            Di = BCe^ROL(BCo, 1);
 8002312:	ea4f 0a41 	mov.w	sl, r1, lsl #1
 8002316:	ea4a 7ad4 	orr.w	sl, sl, r4, lsr #31
            De = BCa^ROL(BCi, 1);
 800231a:	9304      	str	r3, [sp, #16]
            Di = BCe^ROL(BCo, 1);
 800231c:	ea8a 0308 	eor.w	r3, sl, r8
            Do = BCi^ROL(BCu, 1);
 8002320:	ea4f 084e 	mov.w	r8, lr, lsl #1
 8002324:	ea48 78d2 	orr.w	r8, r8, r2, lsr #31
 8002328:	0052      	lsls	r2, r2, #1
 800232a:	ea42 72de 	orr.w	r2, r2, lr, lsr #31
            Di = BCe^ROL(BCo, 1);
 800232e:	9305      	str	r3, [sp, #20]
            Do = BCi^ROL(BCu, 1);
 8002330:	ea82 030c 	eor.w	r3, r2, ip
 8002334:	9306      	str	r3, [sp, #24]
 8002336:	ea88 0307 	eor.w	r3, r8, r7
 800233a:	9307      	str	r3, [sp, #28]
            Du = BCo^ROL(BCa, 1);
 800233c:	9b08      	ldr	r3, [sp, #32]
 800233e:	006a      	lsls	r2, r5, #1
 8002340:	ea42 72d3 	orr.w	r2, r2, r3, lsr #31
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	ea43 73d5 	orr.w	r3, r3, r5, lsr #31
 800234a:	4063      	eors	r3, r4
 800234c:	9308      	str	r3, [sp, #32]
 800234e:	ea82 0301 	eor.w	r3, r2, r1
            Di = BCe^ROL(BCo, 1);
 8002352:	ea4f 0b44 	mov.w	fp, r4, lsl #1

            Aba ^= Da;
 8002356:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
            Du = BCo^ROL(BCa, 1);
 8002358:	9309      	str	r3, [sp, #36]	@ 0x24
            Aba ^= Da;
 800235a:	9b01      	ldr	r3, [sp, #4]
            Di = BCe^ROL(BCo, 1);
 800235c:	ea4b 7bd1 	orr.w	fp, fp, r1, lsr #31
 8002360:	ea8b 0b09 	eor.w	fp, fp, r9
            Aba ^= Da;
 8002364:	ea83 0902 	eor.w	r9, r3, r2
 8002368:	9b02      	ldr	r3, [sp, #8]
 800236a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
            BCa = Aba;
            Age ^= De;
 800236c:	9917      	ldr	r1, [sp, #92]	@ 0x5c
            BCe = ROL(Age, 44);
            Aki ^= Di;
 800236e:	9c23      	ldr	r4, [sp, #140]	@ 0x8c
            BCi = ROL(Aki, 43);
            Amo ^= Do;
 8002370:	9f2f      	ldr	r7, [sp, #188]	@ 0xbc
            Aba ^= Da;
 8002372:	ea83 0a02 	eor.w	sl, r3, r2
            Age ^= De;
 8002376:	9b03      	ldr	r3, [sp, #12]
 8002378:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800237a:	405a      	eors	r2, r3
 800237c:	9b04      	ldr	r3, [sp, #16]
            BCe = ROL(Age, 44);
 800237e:	0d15      	lsrs	r5, r2, #20
            Age ^= De;
 8002380:	404b      	eors	r3, r1
            BCe = ROL(Age, 44);
 8002382:	ea45 3503 	orr.w	r5, r5, r3, lsl #12
 8002386:	0d1b      	lsrs	r3, r3, #20
 8002388:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
            Aki ^= Di;
 800238c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800238e:	9905      	ldr	r1, [sp, #20]
 8002390:	ea8b 0202 	eor.w	r2, fp, r2
 8002394:	404c      	eors	r4, r1
            BCi = ROL(Aki, 43);
 8002396:	ea4f 5852 	mov.w	r8, r2, lsr #21
 800239a:	ea48 28c4 	orr.w	r8, r8, r4, lsl #11
 800239e:	0d64      	lsrs	r4, r4, #21
 80023a0:	ea44 24c2 	orr.w	r4, r4, r2, lsl #11
            Amo ^= Do;
 80023a4:	992e      	ldr	r1, [sp, #184]	@ 0xb8
 80023a6:	9a06      	ldr	r2, [sp, #24]
 80023a8:	4051      	eors	r1, r2
 80023aa:	9a07      	ldr	r2, [sp, #28]
 80023ac:	407a      	eors	r2, r7
            BCo = ROL(Amo, 21);
 80023ae:	ea4f 5e42 	mov.w	lr, r2, lsl #21
 80023b2:	ea4e 2ed1 	orr.w	lr, lr, r1, lsr #11
 80023b6:	0549      	lsls	r1, r1, #21
            Asu ^= Du;
 80023b8:	9f3a      	ldr	r7, [sp, #232]	@ 0xe8
            BCo = ROL(Amo, 21);
 80023ba:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
            Asu ^= Du;
 80023be:	9a08      	ldr	r2, [sp, #32]
 80023c0:	407a      	eors	r2, r7
 80023c2:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 80023c4:	407e      	eors	r6, r7
            BCu = ROL(Asu, 14);
 80023c6:	ea4f 3c86 	mov.w	ip, r6, lsl #14
 80023ca:	ea4c 4c92 	orr.w	ip, ip, r2, lsr #18
 80023ce:	0392      	lsls	r2, r2, #14
 80023d0:	ea42 4296 	orr.w	r2, r2, r6, lsr #18
            Eba =   BCa ^((~BCe)&  BCi );
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
 80023d4:	9e00      	ldr	r6, [sp, #0]
 80023d6:	e9d6 7600 	ldrd	r7, r6, [r6]
 80023da:	ea8a 0606 	eor.w	r6, sl, r6
 80023de:	960b      	str	r6, [sp, #44]	@ 0x2c
 80023e0:	ea89 0707 	eor.w	r7, r9, r7
 80023e4:	ea28 0605 	bic.w	r6, r8, r5
 80023e8:	407e      	eors	r6, r7
 80023ea:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80023ec:	960a      	str	r6, [sp, #40]	@ 0x28
 80023ee:	ea24 0603 	bic.w	r6, r4, r3
 80023f2:	4077      	eors	r7, r6
            Ebe =   BCe ^((~BCi)&  BCo );
 80023f4:	ea2e 0604 	bic.w	r6, lr, r4
 80023f8:	405e      	eors	r6, r3
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
 80023fa:	970b      	str	r7, [sp, #44]	@ 0x2c
            Ebe =   BCe ^((~BCi)&  BCo );
 80023fc:	ea21 0708 	bic.w	r7, r1, r8
 8002400:	406f      	eors	r7, r5
 8002402:	9623      	str	r6, [sp, #140]	@ 0x8c
            Ebi =   BCi ^((~BCo)&  BCu );
            Ebo =   BCo ^((~BCu)&  BCa );
            Ebu =   BCu ^((~BCa)&  BCe );
 8002404:	ea25 0509 	bic.w	r5, r5, r9
            Ebi =   BCi ^((~BCo)&  BCu );
 8002408:	ea2c 060e 	bic.w	r6, ip, lr
            Ebu =   BCu ^((~BCa)&  BCe );
 800240c:	ea23 030a 	bic.w	r3, r3, sl
            Ebi =   BCi ^((~BCo)&  BCu );
 8002410:	4074      	eors	r4, r6
            Ebu =   BCu ^((~BCa)&  BCe );
 8002412:	ea83 030c 	eor.w	r3, r3, ip
            Ebo =   BCo ^((~BCu)&  BCa );
 8002416:	ea29 0602 	bic.w	r6, r9, r2
            Ebe =   BCe ^((~BCi)&  BCo );
 800241a:	9722      	str	r7, [sp, #136]	@ 0x88
            Ebi =   BCi ^((~BCo)&  BCu );
 800241c:	ea22 0701 	bic.w	r7, r2, r1
            Ebu =   BCu ^((~BCa)&  BCe );
 8002420:	406a      	eors	r2, r5
            Ebo =   BCo ^((~BCu)&  BCa );
 8002422:	4071      	eors	r1, r6
            Ebi =   BCi ^((~BCo)&  BCu );
 8002424:	943b      	str	r4, [sp, #236]	@ 0xec
            Ebu =   BCu ^((~BCa)&  BCe );
 8002426:	922e      	str	r2, [sp, #184]	@ 0xb8
            Ebo =   BCo ^((~BCu)&  BCa );
 8002428:	ea2a 040c 	bic.w	r4, sl, ip

            Abo ^= Do;
 800242c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
            Ebu =   BCu ^((~BCa)&  BCe );
 800242e:	932f      	str	r3, [sp, #188]	@ 0xbc
            Abo ^= Do;
 8002430:	9b06      	ldr	r3, [sp, #24]
            Ebo =   BCo ^((~BCu)&  BCa );
 8002432:	9116      	str	r1, [sp, #88]	@ 0x58
            Ebi =   BCi ^((~BCo)&  BCu );
 8002434:	ea87 0708 	eor.w	r7, r7, r8
            Ebo =   BCo ^((~BCu)&  BCa );
 8002438:	ea84 010e 	eor.w	r1, r4, lr
            Ebi =   BCi ^((~BCo)&  BCu );
 800243c:	973a      	str	r7, [sp, #232]	@ 0xe8
            Ebo =   BCo ^((~BCu)&  BCa );
 800243e:	9117      	str	r1, [sp, #92]	@ 0x5c
            Abo ^= Do;
 8002440:	ea83 0102 	eor.w	r1, r3, r2
 8002444:	9b07      	ldr	r3, [sp, #28]
 8002446:	9a11      	ldr	r2, [sp, #68]	@ 0x44
            BCa = ROL(Abo, 28);
            Agu ^= Du;
 8002448:	9c1d      	ldr	r4, [sp, #116]	@ 0x74
            BCe = ROL(Agu, 20);
            Aka ^= Da;
            BCi = ROL(Aka,  3);
            Ame ^= De;
 800244a:	9f2b      	ldr	r7, [sp, #172]	@ 0xac
            Abo ^= Do;
 800244c:	4053      	eors	r3, r2
            BCa = ROL(Abo, 28);
 800244e:	ea4f 7c03 	mov.w	ip, r3, lsl #28
 8002452:	ea4c 1c11 	orr.w	ip, ip, r1, lsr #4
 8002456:	0709      	lsls	r1, r1, #28
 8002458:	ea41 1113 	orr.w	r1, r1, r3, lsr #4
            Agu ^= Du;
 800245c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800245e:	9b08      	ldr	r3, [sp, #32]
 8002460:	4053      	eors	r3, r2
 8002462:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002464:	4062      	eors	r2, r4
            BCe = ROL(Agu, 20);
 8002466:	0516      	lsls	r6, r2, #20
 8002468:	ea46 3613 	orr.w	r6, r6, r3, lsr #12
 800246c:	051b      	lsls	r3, r3, #20
            Aka ^= Da;
 800246e:	9c1e      	ldr	r4, [sp, #120]	@ 0x78
            BCe = ROL(Agu, 20);
 8002470:	ea43 3312 	orr.w	r3, r3, r2, lsr #12
            Aka ^= Da;
 8002474:	9a01      	ldr	r2, [sp, #4]
 8002476:	ea82 0504 	eor.w	r5, r2, r4
 800247a:	9c1f      	ldr	r4, [sp, #124]	@ 0x7c
 800247c:	9a02      	ldr	r2, [sp, #8]
 800247e:	4062      	eors	r2, r4
            BCi = ROL(Aka,  3);
 8002480:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8002484:	ea48 7855 	orr.w	r8, r8, r5, lsr #29
 8002488:	00ed      	lsls	r5, r5, #3
            Ame ^= De;
 800248a:	9c2a      	ldr	r4, [sp, #168]	@ 0xa8
            BCi = ROL(Aka,  3);
 800248c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
            Ame ^= De;
 8002490:	9a03      	ldr	r2, [sp, #12]
 8002492:	4062      	eors	r2, r4
 8002494:	9c04      	ldr	r4, [sp, #16]
            BCo = ROL(Ame, 45);
 8002496:	ea4f 4ed2 	mov.w	lr, r2, lsr #19
            Ame ^= De;
 800249a:	407c      	eors	r4, r7
            BCo = ROL(Ame, 45);
 800249c:	ea4e 3e44 	orr.w	lr, lr, r4, lsl #13
 80024a0:	0ce4      	lsrs	r4, r4, #19
 80024a2:	ea44 3442 	orr.w	r4, r4, r2, lsl #13
            Asi ^= Di;
 80024a6:	9a36      	ldr	r2, [sp, #216]	@ 0xd8
 80024a8:	9f37      	ldr	r7, [sp, #220]	@ 0xdc
 80024aa:	ea8b 0902 	eor.w	r9, fp, r2
 80024ae:	9a05      	ldr	r2, [sp, #20]
 80024b0:	407a      	eors	r2, r7
            BCu = ROL(Asi, 61);
 80024b2:	ea4f 07d9 	mov.w	r7, r9, lsr #3
 80024b6:	ea47 7742 	orr.w	r7, r7, r2, lsl #29
            Ega =   BCa ^((~BCe)&  BCi );
 80024ba:	ea25 0a03 	bic.w	sl, r5, r3
            BCu = ROL(Asi, 61);
 80024be:	08d2      	lsrs	r2, r2, #3
 80024c0:	ea42 7249 	orr.w	r2, r2, r9, lsl #29
            Ega =   BCa ^((~BCe)&  BCi );
 80024c4:	ea8a 0a01 	eor.w	sl, sl, r1
 80024c8:	ea28 0906 	bic.w	r9, r8, r6
 80024cc:	ea89 090c 	eor.w	r9, r9, ip
 80024d0:	f8cd a0a8 	str.w	sl, [sp, #168]	@ 0xa8
            Ege =   BCe ^((~BCi)&  BCo );
 80024d4:	ea2e 0a05 	bic.w	sl, lr, r5
 80024d8:	ea8a 0a03 	eor.w	sl, sl, r3
            Ega =   BCa ^((~BCe)&  BCi );
 80024dc:	f8cd 90ac 	str.w	r9, [sp, #172]	@ 0xac
            Ege =   BCe ^((~BCi)&  BCo );
 80024e0:	ea24 0908 	bic.w	r9, r4, r8
 80024e4:	ea89 0906 	eor.w	r9, r9, r6
 80024e8:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
            Egi =   BCi ^((~BCo)&  BCu );
            Ego =   BCo ^((~BCu)&  BCa );
            Egu =   BCu ^((~BCa)&  BCe );
 80024ec:	ea23 0301 	bic.w	r3, r3, r1
            Egi =   BCi ^((~BCo)&  BCu );
 80024f0:	ea27 0a0e 	bic.w	sl, r7, lr
 80024f4:	ea8a 0505 	eor.w	r5, sl, r5
            Egu =   BCu ^((~BCa)&  BCe );
 80024f8:	ea26 060c 	bic.w	r6, r6, ip
 80024fc:	407b      	eors	r3, r7
            Ege =   BCe ^((~BCi)&  BCo );
 80024fe:	f8cd 9044 	str.w	r9, [sp, #68]	@ 0x44
            Egi =   BCi ^((~BCo)&  BCu );
 8002502:	ea22 0904 	bic.w	r9, r2, r4
 8002506:	951e      	str	r5, [sp, #120]	@ 0x78
            Egu =   BCu ^((~BCa)&  BCe );
 8002508:	931c      	str	r3, [sp, #112]	@ 0x70
            Egi =   BCi ^((~BCo)&  BCu );
 800250a:	ea89 0508 	eor.w	r5, r9, r8
            Egu =   BCu ^((~BCa)&  BCe );
 800250e:	ea86 0302 	eor.w	r3, r6, r2
            Egi =   BCi ^((~BCo)&  BCu );
 8002512:	951f      	str	r5, [sp, #124]	@ 0x7c
            Egu =   BCu ^((~BCa)&  BCe );
 8002514:	931d      	str	r3, [sp, #116]	@ 0x74
            Ego =   BCo ^((~BCu)&  BCa );
 8002516:	ea2c 0502 	bic.w	r5, ip, r2

            Abe ^= De;
 800251a:	9b03      	ldr	r3, [sp, #12]
 800251c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
            Ego =   BCo ^((~BCu)&  BCa );
 800251e:	ea21 0807 	bic.w	r8, r1, r7
            Abe ^= De;
 8002522:	ea83 0102 	eor.w	r1, r3, r2
 8002526:	9b04      	ldr	r3, [sp, #16]
 8002528:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800252a:	4053      	eors	r3, r2
            BCa = ROL(Abe,  1);
 800252c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8002530:	ea4c 7cd1 	orr.w	ip, ip, r1, lsr #31
            Ego =   BCo ^((~BCu)&  BCa );
 8002534:	ea88 0e0e 	eor.w	lr, r8, lr
 8002538:	406c      	eors	r4, r5
            BCa = ROL(Abe,  1);
 800253a:	0049      	lsls	r1, r1, #1
 800253c:	ea41 71d3 	orr.w	r1, r1, r3, lsr #31
            Ego =   BCo ^((~BCu)&  BCa );
 8002540:	f8cd e0d8 	str.w	lr, [sp, #216]	@ 0xd8
            Agi ^= Di;
 8002544:	9b18      	ldr	r3, [sp, #96]	@ 0x60
            Ego =   BCo ^((~BCu)&  BCa );
 8002546:	9437      	str	r4, [sp, #220]	@ 0xdc
            Agi ^= Di;
 8002548:	9a05      	ldr	r2, [sp, #20]
 800254a:	9c19      	ldr	r4, [sp, #100]	@ 0x64
            BCe = ROL(Agi,  6);
            Ako ^= Do;
            BCi = ROL(Ako, 25);
            Amu ^= Du;
 800254c:	9f31      	ldr	r7, [sp, #196]	@ 0xc4
            BCo = ROL(Amu,  8);
            Asa ^= Da;
 800254e:	f8dd 90cc 	ldr.w	r9, [sp, #204]	@ 0xcc
            Agi ^= Di;
 8002552:	4062      	eors	r2, r4
 8002554:	ea8b 0303 	eor.w	r3, fp, r3
            BCe = ROL(Agi,  6);
 8002558:	0196      	lsls	r6, r2, #6
 800255a:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 800255e:	019b      	lsls	r3, r3, #6
            Ako ^= Do;
 8002560:	9c24      	ldr	r4, [sp, #144]	@ 0x90
            BCe = ROL(Agi,  6);
 8002562:	ea43 6392 	orr.w	r3, r3, r2, lsr #26
            Ako ^= Do;
 8002566:	9a06      	ldr	r2, [sp, #24]
 8002568:	ea82 0504 	eor.w	r5, r2, r4
 800256c:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 800256e:	9a07      	ldr	r2, [sp, #28]
 8002570:	4062      	eors	r2, r4
            BCi = ROL(Ako, 25);
 8002572:	ea4f 6842 	mov.w	r8, r2, lsl #25
 8002576:	ea48 18d5 	orr.w	r8, r8, r5, lsr #7
 800257a:	066d      	lsls	r5, r5, #25
 800257c:	ea45 15d2 	orr.w	r5, r5, r2, lsr #7
            Amu ^= Du;
 8002580:	9c30      	ldr	r4, [sp, #192]	@ 0xc0
 8002582:	9a08      	ldr	r2, [sp, #32]
 8002584:	4054      	eors	r4, r2
 8002586:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002588:	407a      	eors	r2, r7
            BCo = ROL(Amu,  8);
 800258a:	ea4f 2e02 	mov.w	lr, r2, lsl #8
 800258e:	ea4e 6e14 	orr.w	lr, lr, r4, lsr #24
 8002592:	0224      	lsls	r4, r4, #8
            Asa ^= Da;
 8002594:	9f32      	ldr	r7, [sp, #200]	@ 0xc8
            BCo = ROL(Amu,  8);
 8002596:	ea44 6412 	orr.w	r4, r4, r2, lsr #24
            Asa ^= Da;
 800259a:	9a01      	ldr	r2, [sp, #4]
 800259c:	407a      	eors	r2, r7
 800259e:	9f02      	ldr	r7, [sp, #8]
 80025a0:	ea87 0909 	eor.w	r9, r7, r9
            BCu = ROL(Asa, 18);
 80025a4:	ea4f 4789 	mov.w	r7, r9, lsl #18
 80025a8:	ea47 3792 	orr.w	r7, r7, r2, lsr #14
            Eka =   BCa ^((~BCe)&  BCi );
 80025ac:	ea25 0a03 	bic.w	sl, r5, r3
            BCu = ROL(Asa, 18);
 80025b0:	0492      	lsls	r2, r2, #18
 80025b2:	ea42 3299 	orr.w	r2, r2, r9, lsr #14
            Eka =   BCa ^((~BCe)&  BCi );
 80025b6:	ea8a 0a01 	eor.w	sl, sl, r1
 80025ba:	ea28 0906 	bic.w	r9, r8, r6
 80025be:	ea89 090c 	eor.w	r9, r9, ip
 80025c2:	f8cd a060 	str.w	sl, [sp, #96]	@ 0x60
            Eke =   BCe ^((~BCi)&  BCo );
 80025c6:	ea24 0a05 	bic.w	sl, r4, r5
 80025ca:	ea8a 0a03 	eor.w	sl, sl, r3
            Eka =   BCa ^((~BCe)&  BCi );
 80025ce:	f8cd 9064 	str.w	r9, [sp, #100]	@ 0x64
            Eki =   BCi ^((~BCo)&  BCu );
            Eko =   BCo ^((~BCu)&  BCa );
            Eku =   BCu ^((~BCa)&  BCe );
 80025d2:	ea23 0301 	bic.w	r3, r3, r1
            Eke =   BCe ^((~BCi)&  BCo );
 80025d6:	ea2e 0908 	bic.w	r9, lr, r8
 80025da:	ea89 0906 	eor.w	r9, r9, r6
            Eku =   BCu ^((~BCa)&  BCe );
 80025de:	4053      	eors	r3, r2
 80025e0:	ea26 060c 	bic.w	r6, r6, ip
            Eke =   BCe ^((~BCi)&  BCo );
 80025e4:	f8cd a0c0 	str.w	sl, [sp, #192]	@ 0xc0
            Eki =   BCi ^((~BCo)&  BCu );
 80025e8:	ea22 0a04 	bic.w	sl, r2, r4
 80025ec:	ea8a 0505 	eor.w	r5, sl, r5
            Eke =   BCe ^((~BCi)&  BCo );
 80025f0:	f8cd 90c4 	str.w	r9, [sp, #196]	@ 0xc4
            Eku =   BCu ^((~BCa)&  BCe );
 80025f4:	9332      	str	r3, [sp, #200]	@ 0xc8
            Eki =   BCi ^((~BCo)&  BCu );
 80025f6:	ea27 090e 	bic.w	r9, r7, lr
            Eku =   BCu ^((~BCa)&  BCe );
 80025fa:	ea86 0307 	eor.w	r3, r6, r7
            Eki =   BCi ^((~BCo)&  BCu );
 80025fe:	950c      	str	r5, [sp, #48]	@ 0x30
            Eku =   BCu ^((~BCa)&  BCe );
 8002600:	9333      	str	r3, [sp, #204]	@ 0xcc
            Eki =   BCi ^((~BCo)&  BCu );
 8002602:	ea89 0508 	eor.w	r5, r9, r8

            Abu ^= Du;
 8002606:	9b08      	ldr	r3, [sp, #32]
            Eki =   BCi ^((~BCo)&  BCu );
 8002608:	950d      	str	r5, [sp, #52]	@ 0x34
            Eko =   BCo ^((~BCu)&  BCa );
 800260a:	ea21 0802 	bic.w	r8, r1, r2
            Abu ^= Du;
 800260e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8002610:	ea83 0102 	eor.w	r1, r3, r2
 8002614:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8002616:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002618:	4053      	eors	r3, r2
            Eko =   BCo ^((~BCu)&  BCa );
 800261a:	ea2c 0507 	bic.w	r5, ip, r7
            BCa = ROL(Abu, 27);
 800261e:	ea4f 6cc3 	mov.w	ip, r3, lsl #27
 8002622:	ea4c 1c51 	orr.w	ip, ip, r1, lsr #5
 8002626:	06c9      	lsls	r1, r1, #27
 8002628:	ea41 1153 	orr.w	r1, r1, r3, lsr #5
            Eko =   BCo ^((~BCu)&  BCa );
 800262c:	ea88 0404 	eor.w	r4, r8, r4
            Aga ^= Da;
 8002630:	9b01      	ldr	r3, [sp, #4]
 8002632:	9a14      	ldr	r2, [sp, #80]	@ 0x50
            Eko =   BCo ^((~BCu)&  BCa );
 8002634:	9424      	str	r4, [sp, #144]	@ 0x90
 8002636:	ea85 040e 	eor.w	r4, r5, lr
            Aga ^= Da;
 800263a:	405a      	eors	r2, r3
            Eko =   BCo ^((~BCu)&  BCa );
 800263c:	9425      	str	r4, [sp, #148]	@ 0x94
            Aga ^= Da;
 800263e:	9b02      	ldr	r3, [sp, #8]
 8002640:	9c15      	ldr	r4, [sp, #84]	@ 0x54
            BCe = ROL(Aga, 36);
 8002642:	0f16      	lsrs	r6, r2, #28
            Aga ^= Da;
 8002644:	4063      	eors	r3, r4
            BCe = ROL(Aga, 36);
 8002646:	ea46 1603 	orr.w	r6, r6, r3, lsl #4
 800264a:	0f1b      	lsrs	r3, r3, #28
 800264c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
            Ake ^= De;
 8002650:	9a03      	ldr	r2, [sp, #12]
 8002652:	9c20      	ldr	r4, [sp, #128]	@ 0x80
            BCi = ROL(Ake, 10);
            Ami ^= Di;
 8002654:	9f2d      	ldr	r7, [sp, #180]	@ 0xb4
            Ake ^= De;
 8002656:	ea82 0504 	eor.w	r5, r2, r4
 800265a:	9c21      	ldr	r4, [sp, #132]	@ 0x84
 800265c:	9a04      	ldr	r2, [sp, #16]
 800265e:	4062      	eors	r2, r4
            BCi = ROL(Ake, 10);
 8002660:	ea4f 2882 	mov.w	r8, r2, lsl #10
 8002664:	ea48 5895 	orr.w	r8, r8, r5, lsr #22
 8002668:	02ad      	lsls	r5, r5, #10
 800266a:	ea45 5592 	orr.w	r5, r5, r2, lsr #22
            Ami ^= Di;
 800266e:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 8002670:	ea8b 0402 	eor.w	r4, fp, r2
 8002674:	9a05      	ldr	r2, [sp, #20]
 8002676:	407a      	eors	r2, r7
            BCo = ROL(Ami, 15);
 8002678:	ea4f 3ec2 	mov.w	lr, r2, lsl #15
 800267c:	ea4e 4e54 	orr.w	lr, lr, r4, lsr #17
 8002680:	03e4      	lsls	r4, r4, #15
            Aso ^= Do;
 8002682:	9f38      	ldr	r7, [sp, #224]	@ 0xe0
            BCo = ROL(Ami, 15);
 8002684:	ea44 4452 	orr.w	r4, r4, r2, lsr #17
            Aso ^= Do;
 8002688:	9a06      	ldr	r2, [sp, #24]
 800268a:	ea82 0907 	eor.w	r9, r2, r7
 800268e:	9f39      	ldr	r7, [sp, #228]	@ 0xe4
 8002690:	9a07      	ldr	r2, [sp, #28]
 8002692:	407a      	eors	r2, r7
            BCu = ROL(Aso, 56);
 8002694:	ea4f 2719 	mov.w	r7, r9, lsr #8
 8002698:	ea47 6702 	orr.w	r7, r7, r2, lsl #24
            Ema =   BCa ^((~BCe)&  BCi );
 800269c:	ea25 0a06 	bic.w	sl, r5, r6
            BCu = ROL(Aso, 56);
 80026a0:	0a12      	lsrs	r2, r2, #8
 80026a2:	ea42 6209 	orr.w	r2, r2, r9, lsl #24
            Ema =   BCa ^((~BCe)&  BCi );
 80026a6:	ea8a 0a01 	eor.w	sl, sl, r1
 80026aa:	ea28 0903 	bic.w	r9, r8, r3
 80026ae:	ea89 090c 	eor.w	r9, r9, ip
 80026b2:	f8cd a0e0 	str.w	sl, [sp, #224]	@ 0xe0
            Eme =   BCe ^((~BCi)&  BCo );
 80026b6:	ea24 0a05 	bic.w	sl, r4, r5
 80026ba:	ea8a 0a06 	eor.w	sl, sl, r6
            Ema =   BCa ^((~BCe)&  BCi );
 80026be:	f8cd 90e4 	str.w	r9, [sp, #228]	@ 0xe4
            Eme =   BCe ^((~BCi)&  BCo );
 80026c2:	ea2e 0908 	bic.w	r9, lr, r8
 80026c6:	ea89 0903 	eor.w	r9, r9, r3
 80026ca:	f8cd a050 	str.w	sl, [sp, #80]	@ 0x50
            Emi =   BCi ^((~BCo)&  BCu );
            Emo =   BCo ^((~BCu)&  BCa );
            Emu =   BCu ^((~BCa)&  BCe );
 80026ce:	ea23 030c 	bic.w	r3, r3, ip
            Emi =   BCi ^((~BCo)&  BCu );
 80026d2:	ea27 0a04 	bic.w	sl, r7, r4
 80026d6:	ea8a 0505 	eor.w	r5, sl, r5
            Emu =   BCu ^((~BCa)&  BCe );
 80026da:	4053      	eors	r3, r2
            Eme =   BCe ^((~BCi)&  BCo );
 80026dc:	f8cd 9054 	str.w	r9, [sp, #84]	@ 0x54
            Emu =   BCu ^((~BCa)&  BCe );
 80026e0:	ea26 0601 	bic.w	r6, r6, r1
            Emi =   BCi ^((~BCo)&  BCu );
 80026e4:	ea22 090e 	bic.w	r9, r2, lr
 80026e8:	952c      	str	r5, [sp, #176]	@ 0xb0
            Emu =   BCu ^((~BCa)&  BCe );
 80026ea:	9321      	str	r3, [sp, #132]	@ 0x84
            Emi =   BCi ^((~BCo)&  BCu );
 80026ec:	ea89 0508 	eor.w	r5, r9, r8

            Abi ^= Di;
 80026f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
            Emi =   BCi ^((~BCo)&  BCu );
 80026f2:	952d      	str	r5, [sp, #180]	@ 0xb4
            Emo =   BCo ^((~BCu)&  BCa );
 80026f4:	ea21 0807 	bic.w	r8, r1, r7
            Emu =   BCu ^((~BCa)&  BCe );
 80026f8:	ea86 0107 	eor.w	r1, r6, r7
            Emo =   BCo ^((~BCu)&  BCa );
 80026fc:	ea2c 0502 	bic.w	r5, ip, r2
 8002700:	ea88 0404 	eor.w	r4, r8, r4
            Abi ^= Di;
 8002704:	9a05      	ldr	r2, [sp, #20]
            Emu =   BCu ^((~BCa)&  BCe );
 8002706:	9120      	str	r1, [sp, #128]	@ 0x80
            Abi ^= Di;
 8002708:	990f      	ldr	r1, [sp, #60]	@ 0x3c
            Emo =   BCo ^((~BCu)&  BCa );
 800270a:	9412      	str	r4, [sp, #72]	@ 0x48
            Abi ^= Di;
 800270c:	ea8b 0303 	eor.w	r3, fp, r3
            Emo =   BCo ^((~BCu)&  BCa );
 8002710:	ea85 040e 	eor.w	r4, r5, lr
 8002714:	9413      	str	r4, [sp, #76]	@ 0x4c
            BCa = ROL(Abi, 62);
 8002716:	089d      	lsrs	r5, r3, #2
            Abi ^= Di;
 8002718:	ea82 0401 	eor.w	r4, r2, r1
            BCa = ROL(Abi, 62);
 800271c:	ea45 7584 	orr.w	r5, r5, r4, lsl #30
 8002720:	08a4      	lsrs	r4, r4, #2
 8002722:	ea44 7483 	orr.w	r4, r4, r3, lsl #30
            Ago ^= Do;
 8002726:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8002728:	9b06      	ldr	r3, [sp, #24]
            BCe = ROL(Ago, 55);
            Aku ^= Du;
 800272a:	9e26      	ldr	r6, [sp, #152]	@ 0x98
 800272c:	9f27      	ldr	r7, [sp, #156]	@ 0x9c
            Ago ^= Do;
 800272e:	ea83 0102 	eor.w	r1, r3, r2
 8002732:	9b07      	ldr	r3, [sp, #28]
 8002734:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8002736:	405a      	eors	r2, r3
            BCe = ROL(Ago, 55);
 8002738:	0a4b      	lsrs	r3, r1, #9
 800273a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800273e:	0a52      	lsrs	r2, r2, #9
 8002740:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
            Aku ^= Du;
 8002744:	9908      	ldr	r1, [sp, #32]
 8002746:	4071      	eors	r1, r6
 8002748:	9e09      	ldr	r6, [sp, #36]	@ 0x24
            BCi = ROL(Aku, 39);
 800274a:	ea4f 6c51 	mov.w	ip, r1, lsr #25
            Aku ^= Du;
 800274e:	4077      	eors	r7, r6
            BCi = ROL(Aku, 39);
 8002750:	ea4c 1cc7 	orr.w	ip, ip, r7, lsl #7
 8002754:	0e7f      	lsrs	r7, r7, #25
 8002756:	ea47 17c1 	orr.w	r7, r7, r1, lsl #7
            Ama ^= Da;
 800275a:	9901      	ldr	r1, [sp, #4]
 800275c:	9e28      	ldr	r6, [sp, #160]	@ 0xa0
 800275e:	f8dd e0a4 	ldr.w	lr, [sp, #164]	@ 0xa4
            BCo = ROL(Ama, 41);
            Ase ^= De;
 8002762:	f8dd 90d4 	ldr.w	r9, [sp, #212]	@ 0xd4
            Ama ^= Da;
 8002766:	4071      	eors	r1, r6
 8002768:	9e02      	ldr	r6, [sp, #8]
            BCo = ROL(Ama, 41);
 800276a:	ea4f 58d1 	mov.w	r8, r1, lsr #23
            Ama ^= Da;
 800276e:	ea86 060e 	eor.w	r6, r6, lr
            BCo = ROL(Ama, 41);
 8002772:	ea48 2846 	orr.w	r8, r8, r6, lsl #9
 8002776:	0df6      	lsrs	r6, r6, #23
            Ase ^= De;
 8002778:	f8dd e0d0 	ldr.w	lr, [sp, #208]	@ 0xd0
            BCo = ROL(Ama, 41);
 800277c:	ea46 2641 	orr.w	r6, r6, r1, lsl #9
            Ase ^= De;
 8002780:	9903      	ldr	r1, [sp, #12]
 8002782:	ea81 010e 	eor.w	r1, r1, lr
 8002786:	f8dd e010 	ldr.w	lr, [sp, #16]
 800278a:	ea8e 0909 	eor.w	r9, lr, r9
            BCu = ROL(Ase,  2);
 800278e:	ea4f 0e89 	mov.w	lr, r9, lsl #2
 8002792:	ea4e 7e91 	orr.w	lr, lr, r1, lsr #30
            Esa =   BCa ^((~BCe)&  BCi );
 8002796:	ea2c 0a03 	bic.w	sl, ip, r3
            BCu = ROL(Ase,  2);
 800279a:	0089      	lsls	r1, r1, #2
 800279c:	ea41 7199 	orr.w	r1, r1, r9, lsr #30
            Esa =   BCa ^((~BCe)&  BCi );
 80027a0:	ea8a 0a05 	eor.w	sl, sl, r5
 80027a4:	ea27 0902 	bic.w	r9, r7, r2
 80027a8:	f8cd a098 	str.w	sl, [sp, #152]	@ 0x98
 80027ac:	ea89 0904 	eor.w	r9, r9, r4
            Ese =   BCe ^((~BCi)&  BCo );
 80027b0:	ea28 0a0c 	bic.w	sl, r8, ip
            Esa =   BCa ^((~BCe)&  BCi );
 80027b4:	f8cd 909c 	str.w	r9, [sp, #156]	@ 0x9c
            Ese =   BCe ^((~BCi)&  BCo );
 80027b8:	ea8a 0a03 	eor.w	sl, sl, r3
 80027bc:	ea26 0907 	bic.w	r9, r6, r7
            Esi =   BCi ^((~BCo)&  BCu );
            Eso =   BCo ^((~BCu)&  BCa );
            Esu =   BCu ^((~BCa)&  BCe );
 80027c0:	ea23 0305 	bic.w	r3, r3, r5
            Ese =   BCe ^((~BCi)&  BCo );
 80027c4:	ea89 0902 	eor.w	r9, r9, r2
            Esu =   BCu ^((~BCa)&  BCe );
 80027c8:	404b      	eors	r3, r1
 80027ca:	ea22 0204 	bic.w	r2, r2, r4
 80027ce:	930e      	str	r3, [sp, #56]	@ 0x38
 80027d0:	ea82 030e 	eor.w	r3, r2, lr
            Ese =   BCe ^((~BCi)&  BCo );
 80027d4:	f8cd a0d0 	str.w	sl, [sp, #208]	@ 0xd0

            //    prepareTheta
            BCa = Eba^Ega^Eka^Ema^Esa;
 80027d8:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
            Ese =   BCe ^((~BCi)&  BCo );
 80027da:	f8cd 90d4 	str.w	r9, [sp, #212]	@ 0xd4
            Esi =   BCi ^((~BCo)&  BCu );
 80027de:	ea21 0a08 	bic.w	sl, r1, r8
 80027e2:	ea2e 0906 	bic.w	r9, lr, r6
            Esu =   BCu ^((~BCa)&  BCe );
 80027e6:	930f      	str	r3, [sp, #60]	@ 0x3c
            BCa = Eba^Ega^Eka^Ema^Esa;
 80027e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
            Esi =   BCi ^((~BCo)&  BCu );
 80027ea:	ea8a 0c0c 	eor.w	ip, sl, ip
 80027ee:	ea89 0707 	eor.w	r7, r9, r7
 80027f2:	f8cd c068 	str.w	ip, [sp, #104]	@ 0x68
 80027f6:	971b      	str	r7, [sp, #108]	@ 0x6c
            Eso =   BCo ^((~BCu)&  BCa );
 80027f8:	ea25 0c01 	bic.w	ip, r5, r1
 80027fc:	ea24 070e 	bic.w	r7, r4, lr
            BCa = Eba^Ega^Eka^Ema^Esa;
 8002800:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8002802:	405a      	eors	r2, r3
 8002804:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
            Eso =   BCo ^((~BCu)&  BCa );
 8002806:	407e      	eors	r6, r7
 8002808:	9629      	str	r6, [sp, #164]	@ 0xa4
            BCa = Eba^Ega^Eka^Ema^Esa;
 800280a:	ea83 0601 	eor.w	r6, r3, r1
 800280e:	9918      	ldr	r1, [sp, #96]	@ 0x60
            BCe = Ebe^Ege^Eke^Eme^Ese;
 8002810:	9b22      	ldr	r3, [sp, #136]	@ 0x88
            BCa = Eba^Ega^Eka^Ema^Esa;
 8002812:	404a      	eors	r2, r1
 8002814:	9919      	ldr	r1, [sp, #100]	@ 0x64
 8002816:	404e      	eors	r6, r1
 8002818:	9938      	ldr	r1, [sp, #224]	@ 0xe0
 800281a:	404a      	eors	r2, r1
 800281c:	9939      	ldr	r1, [sp, #228]	@ 0xe4
 800281e:	404e      	eors	r6, r1
 8002820:	9926      	ldr	r1, [sp, #152]	@ 0x98
 8002822:	404a      	eors	r2, r1
 8002824:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 8002826:	404e      	eors	r6, r1
            BCe = Ebe^Ege^Eke^Eme^Ese;
 8002828:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800282a:	ea83 0901 	eor.w	r9, r3, r1
 800282e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8002830:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
            Eso =   BCo ^((~BCu)&  BCa );
 8002832:	ea8c 0c08 	eor.w	ip, ip, r8
 8002836:	f8cd c0a0 	str.w	ip, [sp, #160]	@ 0xa0
            BCe = Ebe^Ege^Eke^Eme^Ese;
 800283a:	ea83 0801 	eor.w	r8, r3, r1
 800283e:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
            BCi = Ebi^Egi^Eki^Emi^Esi;
 8002840:	991e      	ldr	r1, [sp, #120]	@ 0x78
            BCo = Ebo^Ego^Eko^Emo^Eso;
            BCu = Ebu^Egu^Eku^Emu^Esu;
 8002842:	f8dd e0cc 	ldr.w	lr, [sp, #204]	@ 0xcc
            BCe = Ebe^Ege^Eke^Eme^Ese;
 8002846:	ea89 0903 	eor.w	r9, r9, r3
 800284a:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 800284c:	ea88 0803 	eor.w	r8, r8, r3
 8002850:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8002852:	ea89 0903 	eor.w	r9, r9, r3
 8002856:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8002858:	ea88 0803 	eor.w	r8, r8, r3
 800285c:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 800285e:	ea89 0903 	eor.w	r9, r9, r3
 8002862:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 8002864:	ea88 0803 	eor.w	r8, r8, r3
            BCi = Ebi^Egi^Eki^Emi^Esi;
 8002868:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 800286a:	ea83 0c01 	eor.w	ip, r3, r1
 800286e:	9b3b      	ldr	r3, [sp, #236]	@ 0xec
 8002870:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 8002872:	ea83 0701 	eor.w	r7, r3, r1
 8002876:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8002878:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800287a:	ea8c 0c03 	eor.w	ip, ip, r3
 800287e:	404f      	eors	r7, r1
 8002880:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8002882:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 8002884:	ea8c 0c03 	eor.w	ip, ip, r3
 8002888:	404f      	eors	r7, r1
 800288a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800288c:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800288e:	ea8c 0c03 	eor.w	ip, ip, r3
 8002892:	404f      	eors	r7, r1
            BCo = Ebo^Ego^Eko^Emo^Eso;
 8002894:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8002896:	9936      	ldr	r1, [sp, #216]	@ 0xd8
 8002898:	ea83 0501 	eor.w	r5, r3, r1
 800289c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800289e:	9937      	ldr	r1, [sp, #220]	@ 0xdc
 80028a0:	ea83 0401 	eor.w	r4, r3, r1
 80028a4:	9924      	ldr	r1, [sp, #144]	@ 0x90
            BCu = Ebu^Egu^Eku^Emu^Esu;
 80028a6:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
            BCo = Ebo^Ego^Eko^Emo^Eso;
 80028a8:	404d      	eors	r5, r1
 80028aa:	9925      	ldr	r1, [sp, #148]	@ 0x94
 80028ac:	404c      	eors	r4, r1
 80028ae:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80028b0:	404d      	eors	r5, r1
 80028b2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80028b4:	404c      	eors	r4, r1
 80028b6:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 80028b8:	404d      	eors	r5, r1
 80028ba:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 80028bc:	404c      	eors	r4, r1
            BCu = Ebu^Egu^Eku^Emu^Esu;
 80028be:	9932      	ldr	r1, [sp, #200]	@ 0xc8
 80028c0:	4059      	eors	r1, r3
 80028c2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80028c4:	ea83 0e0e 	eor.w	lr, r3, lr
 80028c8:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 80028ca:	4059      	eors	r1, r3
 80028cc:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 80028ce:	ea8e 0e03 	eor.w	lr, lr, r3
 80028d2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80028d4:	4059      	eors	r1, r3
 80028d6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80028d8:	ea8e 0e03 	eor.w	lr, lr, r3
 80028dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38

            //thetaRhoPiChiIotaPrepareTheta(round+1, E, A)
            Da = BCu^ROL(BCe, 1);
 80028de:	ea4f 0b49 	mov.w	fp, r9, lsl #1
            BCu = Ebu^Egu^Eku^Emu^Esu;
 80028e2:	4059      	eors	r1, r3
 80028e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
            Da = BCu^ROL(BCe, 1);
 80028e6:	ea4b 7bd8 	orr.w	fp, fp, r8, lsr #31
 80028ea:	ea4f 0a48 	mov.w	sl, r8, lsl #1
            BCu = Ebu^Egu^Eku^Emu^Esu;
 80028ee:	ea8e 0e03 	eor.w	lr, lr, r3
            Da = BCu^ROL(BCe, 1);
 80028f2:	ea4a 7ad9 	orr.w	sl, sl, r9, lsr #31
 80028f6:	ea8b 0301 	eor.w	r3, fp, r1
            De = BCa^ROL(BCi, 1);
 80028fa:	ea4f 0b4c 	mov.w	fp, ip, lsl #1
            Da = BCu^ROL(BCe, 1);
 80028fe:	9301      	str	r3, [sp, #4]
            De = BCa^ROL(BCi, 1);
 8002900:	ea4b 7bd7 	orr.w	fp, fp, r7, lsr #31
            Da = BCu^ROL(BCe, 1);
 8002904:	ea8a 030e 	eor.w	r3, sl, lr
            De = BCa^ROL(BCi, 1);
 8002908:	ea4f 0a47 	mov.w	sl, r7, lsl #1
            Da = BCu^ROL(BCe, 1);
 800290c:	9302      	str	r3, [sp, #8]
            De = BCa^ROL(BCi, 1);
 800290e:	ea4a 7adc 	orr.w	sl, sl, ip, lsr #31
 8002912:	ea8b 0302 	eor.w	r3, fp, r2
 8002916:	9303      	str	r3, [sp, #12]
 8002918:	ea8a 0306 	eor.w	r3, sl, r6
            Di = BCe^ROL(BCo, 1);
 800291c:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 8002920:	ea4a 7ad5 	orr.w	sl, sl, r5, lsr #31
            De = BCa^ROL(BCi, 1);
 8002924:	9304      	str	r3, [sp, #16]
            Di = BCe^ROL(BCo, 1);
 8002926:	ea8a 0308 	eor.w	r3, sl, r8
            Do = BCi^ROL(BCu, 1);
 800292a:	ea4f 084e 	mov.w	r8, lr, lsl #1
 800292e:	ea48 78d1 	orr.w	r8, r8, r1, lsr #31
 8002932:	0049      	lsls	r1, r1, #1
 8002934:	ea41 71de 	orr.w	r1, r1, lr, lsr #31
            Di = BCe^ROL(BCo, 1);
 8002938:	9305      	str	r3, [sp, #20]
            Do = BCi^ROL(BCu, 1);
 800293a:	ea81 030c 	eor.w	r3, r1, ip
            Du = BCo^ROL(BCa, 1);
 800293e:	0071      	lsls	r1, r6, #1
 8002940:	ea41 71d2 	orr.w	r1, r1, r2, lsr #31
 8002944:	0052      	lsls	r2, r2, #1
            Do = BCi^ROL(BCu, 1);
 8002946:	9306      	str	r3, [sp, #24]
            Du = BCo^ROL(BCa, 1);
 8002948:	ea42 72d6 	orr.w	r2, r2, r6, lsr #31
            Do = BCi^ROL(BCu, 1);
 800294c:	ea88 0307 	eor.w	r3, r8, r7
 8002950:	9307      	str	r3, [sp, #28]
            Du = BCo^ROL(BCa, 1);
 8002952:	ea82 0305 	eor.w	r3, r2, r5
 8002956:	9308      	str	r3, [sp, #32]
 8002958:	ea81 0304 	eor.w	r3, r1, r4

            Eba ^= Da;
 800295c:	9a01      	ldr	r2, [sp, #4]
            Du = BCo^ROL(BCa, 1);
 800295e:	9309      	str	r3, [sp, #36]	@ 0x24
            Di = BCe^ROL(BCo, 1);
 8002960:	ea4f 0b45 	mov.w	fp, r5, lsl #1
            Eba ^= Da;
 8002964:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
            BCa = Eba;
            Ege ^= De;
            BCe = ROL(Ege, 44);
            Eki ^= Di;
            BCi = ROL(Eki, 43);
            Emo ^= Do;
 8002966:	9e07      	ldr	r6, [sp, #28]
            BCo = ROL(Emo, 21);
            Esu ^= Du;
 8002968:	9f09      	ldr	r7, [sp, #36]	@ 0x24
            Di = BCe^ROL(BCo, 1);
 800296a:	ea4b 7bd4 	orr.w	fp, fp, r4, lsr #31
 800296e:	ea8b 0b09 	eor.w	fp, fp, r9
            Eba ^= Da;
 8002972:	ea83 0902 	eor.w	r9, r3, r2
 8002976:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002978:	9a02      	ldr	r2, [sp, #8]
            Eki ^= Di;
 800297a:	9c05      	ldr	r4, [sp, #20]
            Eba ^= Da;
 800297c:	ea83 0a02 	eor.w	sl, r3, r2
            Ege ^= De;
 8002980:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8002982:	9a03      	ldr	r2, [sp, #12]
 8002984:	ea83 0102 	eor.w	r1, r3, r2
 8002988:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800298a:	9a04      	ldr	r2, [sp, #16]
            BCe = ROL(Ege, 44);
 800298c:	0d0d      	lsrs	r5, r1, #20
            Ege ^= De;
 800298e:	405a      	eors	r2, r3
            Eki ^= Di;
 8002990:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
            BCe = ROL(Ege, 44);
 8002992:	ea45 3502 	orr.w	r5, r5, r2, lsl #12
 8002996:	0d12      	lsrs	r2, r2, #20
 8002998:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
            Eki ^= Di;
 800299c:	ea83 010b 	eor.w	r1, r3, fp
 80029a0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
            BCi = ROL(Eki, 43);
 80029a2:	ea4f 5851 	mov.w	r8, r1, lsr #21
            Eki ^= Di;
 80029a6:	405c      	eors	r4, r3
            BCi = ROL(Eki, 43);
 80029a8:	ea48 28c4 	orr.w	r8, r8, r4, lsl #11
 80029ac:	0d64      	lsrs	r4, r4, #21
 80029ae:	ea44 24c1 	orr.w	r4, r4, r1, lsl #11
            Emo ^= Do;
 80029b2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80029b4:	9906      	ldr	r1, [sp, #24]
 80029b6:	4059      	eors	r1, r3
 80029b8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80029ba:	405e      	eors	r6, r3
            BCo = ROL(Emo, 21);
 80029bc:	ea4f 5e46 	mov.w	lr, r6, lsl #21
 80029c0:	ea4e 2ed1 	orr.w	lr, lr, r1, lsr #11
 80029c4:	0549      	lsls	r1, r1, #21
 80029c6:	ea41 21d6 	orr.w	r1, r1, r6, lsr #11
            Esu ^= Du;
 80029ca:	9b08      	ldr	r3, [sp, #32]
 80029cc:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 80029ce:	405e      	eors	r6, r3
 80029d0:	4633      	mov	r3, r6
 80029d2:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 80029d4:	407e      	eors	r6, r7
            BCu = ROL(Esu, 14);
 80029d6:	ea4f 3c86 	mov.w	ip, r6, lsl #14
 80029da:	ea4c 4c93 	orr.w	ip, ip, r3, lsr #18
 80029de:	039b      	lsls	r3, r3, #14
 80029e0:	ea43 4396 	orr.w	r3, r3, r6, lsr #18
            Aba =   BCa ^((~BCe)&  BCi );
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
 80029e4:	9e00      	ldr	r6, [sp, #0]
 80029e6:	e9d6 7602 	ldrd	r7, r6, [r6, #8]
 80029ea:	ea8a 0606 	eor.w	r6, sl, r6
 80029ee:	960b      	str	r6, [sp, #44]	@ 0x2c
 80029f0:	ea89 0707 	eor.w	r7, r9, r7
 80029f4:	ea28 0605 	bic.w	r6, r8, r5
 80029f8:	407e      	eors	r6, r7
 80029fa:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80029fc:	960a      	str	r6, [sp, #40]	@ 0x28
 80029fe:	ea24 0602 	bic.w	r6, r4, r2
 8002a02:	4077      	eors	r7, r6
            Abe =   BCe ^((~BCi)&  BCo );
 8002a04:	ea2e 0604 	bic.w	r6, lr, r4
 8002a08:	4056      	eors	r6, r2
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
 8002a0a:	970b      	str	r7, [sp, #44]	@ 0x2c
            Abe =   BCe ^((~BCi)&  BCo );
 8002a0c:	ea21 0708 	bic.w	r7, r1, r8
 8002a10:	406f      	eors	r7, r5
 8002a12:	960d      	str	r6, [sp, #52]	@ 0x34
            Abi =   BCi ^((~BCo)&  BCu );
            Abo =   BCo ^((~BCu)&  BCa );
            Abu =   BCu ^((~BCa)&  BCe );
 8002a14:	ea25 0509 	bic.w	r5, r5, r9
            Abi =   BCi ^((~BCo)&  BCu );
 8002a18:	ea2c 060e 	bic.w	r6, ip, lr
 8002a1c:	4074      	eors	r4, r6
            Abu =   BCu ^((~BCa)&  BCe );
 8002a1e:	ea22 020a 	bic.w	r2, r2, sl
            Abo =   BCo ^((~BCu)&  BCa );
 8002a22:	ea29 0603 	bic.w	r6, r9, r3
            Abe =   BCe ^((~BCi)&  BCo );
 8002a26:	970c      	str	r7, [sp, #48]	@ 0x30
            Abi =   BCi ^((~BCo)&  BCu );
 8002a28:	ea23 0701 	bic.w	r7, r3, r1
            Abu =   BCu ^((~BCa)&  BCe );
 8002a2c:	406b      	eors	r3, r5
 8002a2e:	9312      	str	r3, [sp, #72]	@ 0x48
 8002a30:	ea82 030c 	eor.w	r3, r2, ip
            Abo =   BCo ^((~BCu)&  BCa );
 8002a34:	4071      	eors	r1, r6

            Ebo ^= Do;
 8002a36:	9a06      	ldr	r2, [sp, #24]
            Abi =   BCi ^((~BCo)&  BCu );
 8002a38:	940f      	str	r4, [sp, #60]	@ 0x3c
            Abu =   BCu ^((~BCa)&  BCe );
 8002a3a:	9313      	str	r3, [sp, #76]	@ 0x4c
            Abo =   BCo ^((~BCu)&  BCa );
 8002a3c:	ea2a 040c 	bic.w	r4, sl, ip
            Ebo ^= Do;
 8002a40:	9b16      	ldr	r3, [sp, #88]	@ 0x58
            Abo =   BCo ^((~BCu)&  BCa );
 8002a42:	9110      	str	r1, [sp, #64]	@ 0x40
 8002a44:	ea84 010e 	eor.w	r1, r4, lr
 8002a48:	9111      	str	r1, [sp, #68]	@ 0x44
            Ebo ^= Do;
 8002a4a:	ea83 0102 	eor.w	r1, r3, r2
 8002a4e:	9a07      	ldr	r2, [sp, #28]
 8002a50:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
            BCa = ROL(Ebo, 28);
            Egu ^= Du;
 8002a52:	9c09      	ldr	r4, [sp, #36]	@ 0x24
            Ebo ^= Do;
 8002a54:	4053      	eors	r3, r2
            BCa = ROL(Ebo, 28);
 8002a56:	ea4f 7c03 	mov.w	ip, r3, lsl #28
 8002a5a:	ea4c 1c11 	orr.w	ip, ip, r1, lsr #4
 8002a5e:	0709      	lsls	r1, r1, #28
 8002a60:	ea41 1113 	orr.w	r1, r1, r3, lsr #4
            Egu ^= Du;
 8002a64:	9a08      	ldr	r2, [sp, #32]
 8002a66:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8002a68:	4053      	eors	r3, r2
 8002a6a:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8002a6c:	4062      	eors	r2, r4
            BCe = ROL(Egu, 20);
 8002a6e:	0516      	lsls	r6, r2, #20
 8002a70:	ea46 3613 	orr.w	r6, r6, r3, lsr #12
 8002a74:	051b      	lsls	r3, r3, #20
 8002a76:	ea43 3312 	orr.w	r3, r3, r2, lsr #12
            Eka ^= Da;
 8002a7a:	9c01      	ldr	r4, [sp, #4]
 8002a7c:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8002a7e:	ea82 0504 	eor.w	r5, r2, r4
 8002a82:	9c02      	ldr	r4, [sp, #8]
 8002a84:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8002a86:	4062      	eors	r2, r4
            Abi =   BCi ^((~BCo)&  BCu );
 8002a88:	ea87 0708 	eor.w	r7, r7, r8
            BCi = ROL(Eka, 3);
 8002a8c:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8002a90:	ea48 7855 	orr.w	r8, r8, r5, lsr #29
 8002a94:	00ed      	lsls	r5, r5, #3
 8002a96:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
            Eme ^= De;
 8002a9a:	9c03      	ldr	r4, [sp, #12]
 8002a9c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
            Abi =   BCi ^((~BCo)&  BCu );
 8002a9e:	970e      	str	r7, [sp, #56]	@ 0x38
            Eme ^= De;
 8002aa0:	4062      	eors	r2, r4
 8002aa2:	9f04      	ldr	r7, [sp, #16]
 8002aa4:	9c15      	ldr	r4, [sp, #84]	@ 0x54
            BCo = ROL(Eme, 45);
 8002aa6:	ea4f 4ed2 	mov.w	lr, r2, lsr #19
            Eme ^= De;
 8002aaa:	407c      	eors	r4, r7
            BCo = ROL(Eme, 45);
 8002aac:	ea4e 3e44 	orr.w	lr, lr, r4, lsl #13
 8002ab0:	0ce4      	lsrs	r4, r4, #19
 8002ab2:	ea44 3442 	orr.w	r4, r4, r2, lsl #13
            Esi ^= Di;
 8002ab6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8002ab8:	ea82 090b 	eor.w	r9, r2, fp
 8002abc:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8002abe:	9f05      	ldr	r7, [sp, #20]
 8002ac0:	407a      	eors	r2, r7
            BCu = ROL(Esi, 61);
 8002ac2:	ea4f 07d9 	mov.w	r7, r9, lsr #3
 8002ac6:	ea47 7742 	orr.w	r7, r7, r2, lsl #29
            Aga =   BCa ^((~BCe)&  BCi );
 8002aca:	ea25 0a03 	bic.w	sl, r5, r3
            BCu = ROL(Esi, 61);
 8002ace:	08d2      	lsrs	r2, r2, #3
 8002ad0:	ea42 7249 	orr.w	r2, r2, r9, lsl #29
            Aga =   BCa ^((~BCe)&  BCi );
 8002ad4:	ea8a 0a01 	eor.w	sl, sl, r1
 8002ad8:	ea28 0906 	bic.w	r9, r8, r6
 8002adc:	ea89 090c 	eor.w	r9, r9, ip
 8002ae0:	f8cd a050 	str.w	sl, [sp, #80]	@ 0x50
            Age =   BCe ^((~BCi)&  BCo );
 8002ae4:	ea2e 0a05 	bic.w	sl, lr, r5
 8002ae8:	ea8a 0a03 	eor.w	sl, sl, r3
            Aga =   BCa ^((~BCe)&  BCi );
 8002aec:	f8cd 9054 	str.w	r9, [sp, #84]	@ 0x54
            Age =   BCe ^((~BCi)&  BCo );
 8002af0:	ea24 0908 	bic.w	r9, r4, r8
 8002af4:	ea89 0906 	eor.w	r9, r9, r6
 8002af8:	f8cd a058 	str.w	sl, [sp, #88]	@ 0x58
            Agi =   BCi ^((~BCo)&  BCu );
            Ago =   BCo ^((~BCu)&  BCa );
            Agu =   BCu ^((~BCa)&  BCe );
 8002afc:	ea23 0301 	bic.w	r3, r3, r1
            Agi =   BCi ^((~BCo)&  BCu );
 8002b00:	ea27 0a0e 	bic.w	sl, r7, lr
 8002b04:	ea8a 0505 	eor.w	r5, sl, r5
            Agu =   BCu ^((~BCa)&  BCe );
 8002b08:	ea26 060c 	bic.w	r6, r6, ip
 8002b0c:	407b      	eors	r3, r7
            Age =   BCe ^((~BCi)&  BCo );
 8002b0e:	f8cd 905c 	str.w	r9, [sp, #92]	@ 0x5c
            Agi =   BCi ^((~BCo)&  BCu );
 8002b12:	ea22 0904 	bic.w	r9, r2, r4
 8002b16:	9518      	str	r5, [sp, #96]	@ 0x60
            Agu =   BCu ^((~BCa)&  BCe );
 8002b18:	931c      	str	r3, [sp, #112]	@ 0x70
            Agi =   BCi ^((~BCo)&  BCu );
 8002b1a:	ea89 0508 	eor.w	r5, r9, r8
            Agu =   BCu ^((~BCa)&  BCe );
 8002b1e:	ea86 0302 	eor.w	r3, r6, r2
            Agi =   BCi ^((~BCo)&  BCu );
 8002b22:	9519      	str	r5, [sp, #100]	@ 0x64
            Agu =   BCu ^((~BCa)&  BCe );
 8002b24:	931d      	str	r3, [sp, #116]	@ 0x74
            Ago =   BCo ^((~BCu)&  BCa );
 8002b26:	ea2c 0502 	bic.w	r5, ip, r2

            Ebe ^= De;
 8002b2a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8002b2c:	9a03      	ldr	r2, [sp, #12]
            BCe = ROL(Egi, 6);
            Eko ^= Do;
            BCi = ROL(Eko, 25);
            Emu ^= Du;
            BCo = ROL(Emu, 8);
            Esa ^= Da;
 8002b2e:	f8dd 9008 	ldr.w	r9, [sp, #8]
            Ago =   BCo ^((~BCu)&  BCa );
 8002b32:	ea21 0807 	bic.w	r8, r1, r7
            Ebe ^= De;
 8002b36:	ea83 0102 	eor.w	r1, r3, r2
 8002b3a:	9a04      	ldr	r2, [sp, #16]
 8002b3c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
            Emu ^= Du;
 8002b3e:	9f09      	ldr	r7, [sp, #36]	@ 0x24
            Ebe ^= De;
 8002b40:	4053      	eors	r3, r2
            Ago =   BCo ^((~BCu)&  BCa );
 8002b42:	406c      	eors	r4, r5
            BCa = ROL(Ebe, 1);
 8002b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8002b48:	ea4c 7cd1 	orr.w	ip, ip, r1, lsr #31
            Egi ^= Di;
 8002b4c:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
            Ago =   BCo ^((~BCu)&  BCa );
 8002b4e:	941b      	str	r4, [sp, #108]	@ 0x6c
            BCa = ROL(Ebe, 1);
 8002b50:	0049      	lsls	r1, r1, #1
            Egi ^= Di;
 8002b52:	9c05      	ldr	r4, [sp, #20]
            BCa = ROL(Ebe, 1);
 8002b54:	ea41 71d3 	orr.w	r1, r1, r3, lsr #31
            Egi ^= Di;
 8002b58:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8002b5a:	4062      	eors	r2, r4
 8002b5c:	ea83 030b 	eor.w	r3, r3, fp
            BCe = ROL(Egi, 6);
 8002b60:	0196      	lsls	r6, r2, #6
 8002b62:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8002b66:	019b      	lsls	r3, r3, #6
 8002b68:	ea43 6392 	orr.w	r3, r3, r2, lsr #26
            Eko ^= Do;
 8002b6c:	9c06      	ldr	r4, [sp, #24]
 8002b6e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8002b70:	ea82 0504 	eor.w	r5, r2, r4
 8002b74:	9c07      	ldr	r4, [sp, #28]
 8002b76:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8002b78:	4062      	eors	r2, r4
            Ago =   BCo ^((~BCu)&  BCa );
 8002b7a:	ea88 0e0e 	eor.w	lr, r8, lr
            BCi = ROL(Eko, 25);
 8002b7e:	ea4f 6842 	mov.w	r8, r2, lsl #25
 8002b82:	ea48 18d5 	orr.w	r8, r8, r5, lsr #7
 8002b86:	066d      	lsls	r5, r5, #25
 8002b88:	ea45 15d2 	orr.w	r5, r5, r2, lsr #7
            Emu ^= Du;
 8002b8c:	9c08      	ldr	r4, [sp, #32]
 8002b8e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
            Ago =   BCo ^((~BCu)&  BCa );
 8002b90:	f8cd e068 	str.w	lr, [sp, #104]	@ 0x68
            Emu ^= Du;
 8002b94:	4054      	eors	r4, r2
 8002b96:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8002b98:	407a      	eors	r2, r7
            BCo = ROL(Emu, 8);
 8002b9a:	ea4f 2e02 	mov.w	lr, r2, lsl #8
 8002b9e:	ea4e 6e14 	orr.w	lr, lr, r4, lsr #24
 8002ba2:	0224      	lsls	r4, r4, #8
 8002ba4:	ea44 6412 	orr.w	r4, r4, r2, lsr #24
            Esa ^= Da;
 8002ba8:	9f01      	ldr	r7, [sp, #4]
 8002baa:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8002bac:	407a      	eors	r2, r7
 8002bae:	9f27      	ldr	r7, [sp, #156]	@ 0x9c
 8002bb0:	ea87 0909 	eor.w	r9, r7, r9
            BCu = ROL(Esa, 18);
 8002bb4:	ea4f 4789 	mov.w	r7, r9, lsl #18
 8002bb8:	ea47 3792 	orr.w	r7, r7, r2, lsr #14
            Aka =   BCa ^((~BCe)&  BCi );
 8002bbc:	ea25 0a03 	bic.w	sl, r5, r3
            BCu = ROL(Esa, 18);
 8002bc0:	0492      	lsls	r2, r2, #18
 8002bc2:	ea42 3299 	orr.w	r2, r2, r9, lsr #14
            Aka =   BCa ^((~BCe)&  BCi );
 8002bc6:	ea8a 0a01 	eor.w	sl, sl, r1
 8002bca:	ea28 0906 	bic.w	r9, r8, r6
 8002bce:	ea89 090c 	eor.w	r9, r9, ip
 8002bd2:	f8cd a078 	str.w	sl, [sp, #120]	@ 0x78
            Ake =   BCe ^((~BCi)&  BCo );
 8002bd6:	ea24 0a05 	bic.w	sl, r4, r5
            Aka =   BCa ^((~BCe)&  BCi );
 8002bda:	f8cd 907c 	str.w	r9, [sp, #124]	@ 0x7c
            Ake =   BCe ^((~BCi)&  BCo );
 8002bde:	ea8a 0a03 	eor.w	sl, sl, r3
 8002be2:	ea2e 0908 	bic.w	r9, lr, r8
            Aki =   BCi ^((~BCo)&  BCu );
            Ako =   BCo ^((~BCu)&  BCa );
            Aku =   BCu ^((~BCa)&  BCe );
 8002be6:	ea23 0301 	bic.w	r3, r3, r1
            Ake =   BCe ^((~BCi)&  BCo );
 8002bea:	ea89 0906 	eor.w	r9, r9, r6
            Aku =   BCu ^((~BCa)&  BCe );
 8002bee:	4053      	eors	r3, r2
 8002bf0:	ea26 060c 	bic.w	r6, r6, ip
            Ake =   BCe ^((~BCi)&  BCo );
 8002bf4:	f8cd a080 	str.w	sl, [sp, #128]	@ 0x80
            Aki =   BCi ^((~BCo)&  BCu );
 8002bf8:	ea22 0a04 	bic.w	sl, r2, r4
 8002bfc:	ea8a 0505 	eor.w	r5, sl, r5
            Ake =   BCe ^((~BCi)&  BCo );
 8002c00:	f8cd 9084 	str.w	r9, [sp, #132]	@ 0x84
            Aku =   BCu ^((~BCa)&  BCe );
 8002c04:	9326      	str	r3, [sp, #152]	@ 0x98
            Aki =   BCi ^((~BCo)&  BCu );
 8002c06:	ea27 090e 	bic.w	r9, r7, lr
            Aku =   BCu ^((~BCa)&  BCe );
 8002c0a:	ea86 0307 	eor.w	r3, r6, r7
            Aki =   BCi ^((~BCo)&  BCu );
 8002c0e:	9522      	str	r5, [sp, #136]	@ 0x88
            Aku =   BCu ^((~BCa)&  BCe );
 8002c10:	9327      	str	r3, [sp, #156]	@ 0x9c
            Aki =   BCi ^((~BCo)&  BCu );
 8002c12:	ea89 0508 	eor.w	r5, r9, r8

            Ebu ^= Du;
 8002c16:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
            Aki =   BCi ^((~BCo)&  BCu );
 8002c18:	9523      	str	r5, [sp, #140]	@ 0x8c
            Ako =   BCo ^((~BCu)&  BCa );
 8002c1a:	ea21 0802 	bic.w	r8, r1, r2
            Ebu ^= Du;
 8002c1e:	9a08      	ldr	r2, [sp, #32]
 8002c20:	ea83 0102 	eor.w	r1, r3, r2
 8002c24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002c26:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 8002c28:	4053      	eors	r3, r2
            Ako =   BCo ^((~BCu)&  BCa );
 8002c2a:	ea2c 0507 	bic.w	r5, ip, r7
            BCa = ROL(Ebu, 27);
 8002c2e:	ea4f 6cc3 	mov.w	ip, r3, lsl #27
 8002c32:	ea4c 1c51 	orr.w	ip, ip, r1, lsr #5
 8002c36:	06c9      	lsls	r1, r1, #27
 8002c38:	ea41 1153 	orr.w	r1, r1, r3, lsr #5
            Ako =   BCo ^((~BCu)&  BCa );
 8002c3c:	ea88 0404 	eor.w	r4, r8, r4
            Ega ^= Da;
 8002c40:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8002c42:	9a01      	ldr	r2, [sp, #4]
            Ako =   BCo ^((~BCu)&  BCa );
 8002c44:	9424      	str	r4, [sp, #144]	@ 0x90
 8002c46:	ea85 040e 	eor.w	r4, r5, lr
            Ega ^= Da;
 8002c4a:	405a      	eors	r2, r3
            Ako =   BCo ^((~BCu)&  BCa );
 8002c4c:	9425      	str	r4, [sp, #148]	@ 0x94
            Ega ^= Da;
 8002c4e:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8002c50:	9c02      	ldr	r4, [sp, #8]
            BCe = ROL(Ega, 36);
            Eke ^= De;
            BCi = ROL(Eke, 10);
            Emi ^= Di;
 8002c52:	9f05      	ldr	r7, [sp, #20]
            Ega ^= Da;
 8002c54:	4063      	eors	r3, r4
            BCe = ROL(Ega, 36);
 8002c56:	0f16      	lsrs	r6, r2, #28
 8002c58:	ea46 1603 	orr.w	r6, r6, r3, lsl #4
 8002c5c:	0f1b      	lsrs	r3, r3, #28
 8002c5e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
            Eke ^= De;
 8002c62:	9c03      	ldr	r4, [sp, #12]
 8002c64:	9a30      	ldr	r2, [sp, #192]	@ 0xc0
 8002c66:	ea82 0504 	eor.w	r5, r2, r4
 8002c6a:	9c04      	ldr	r4, [sp, #16]
 8002c6c:	9a31      	ldr	r2, [sp, #196]	@ 0xc4
 8002c6e:	4062      	eors	r2, r4
            BCi = ROL(Eke, 10);
 8002c70:	ea4f 2882 	mov.w	r8, r2, lsl #10
 8002c74:	ea48 5895 	orr.w	r8, r8, r5, lsr #22
 8002c78:	02ad      	lsls	r5, r5, #10
 8002c7a:	ea45 5592 	orr.w	r5, r5, r2, lsr #22
            Emi ^= Di;
 8002c7e:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 8002c80:	ea82 040b 	eor.w	r4, r2, fp
 8002c84:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8002c86:	407a      	eors	r2, r7
            BCo = ROL(Emi, 15);
 8002c88:	ea4f 3ec2 	mov.w	lr, r2, lsl #15
 8002c8c:	ea4e 4e54 	orr.w	lr, lr, r4, lsr #17
 8002c90:	03e4      	lsls	r4, r4, #15
 8002c92:	ea44 4452 	orr.w	r4, r4, r2, lsr #17
            Eso ^= Do;
 8002c96:	9f06      	ldr	r7, [sp, #24]
 8002c98:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8002c9a:	ea82 0907 	eor.w	r9, r2, r7
 8002c9e:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8002ca0:	9f07      	ldr	r7, [sp, #28]
 8002ca2:	407a      	eors	r2, r7
            BCu = ROL(Eso, 56);
 8002ca4:	ea4f 2719 	mov.w	r7, r9, lsr #8
 8002ca8:	ea47 6702 	orr.w	r7, r7, r2, lsl #24
            Ama =   BCa ^((~BCe)&  BCi );
 8002cac:	ea25 0a06 	bic.w	sl, r5, r6
            BCu = ROL(Eso, 56);
 8002cb0:	0a12      	lsrs	r2, r2, #8
 8002cb2:	ea42 6209 	orr.w	r2, r2, r9, lsl #24
            Ama =   BCa ^((~BCe)&  BCi );
 8002cb6:	ea8a 0a01 	eor.w	sl, sl, r1
 8002cba:	ea28 0903 	bic.w	r9, r8, r3
 8002cbe:	ea89 090c 	eor.w	r9, r9, ip
 8002cc2:	f8cd a0a0 	str.w	sl, [sp, #160]	@ 0xa0
            Ame =   BCe ^((~BCi)&  BCo );
 8002cc6:	ea24 0a05 	bic.w	sl, r4, r5
 8002cca:	ea8a 0a06 	eor.w	sl, sl, r6
            Ama =   BCa ^((~BCe)&  BCi );
 8002cce:	f8cd 90a4 	str.w	r9, [sp, #164]	@ 0xa4
            Ame =   BCe ^((~BCi)&  BCo );
 8002cd2:	ea2e 0908 	bic.w	r9, lr, r8
 8002cd6:	ea89 0903 	eor.w	r9, r9, r3
 8002cda:	f8cd a0a8 	str.w	sl, [sp, #168]	@ 0xa8
            Ami =   BCi ^((~BCo)&  BCu );
 8002cde:	ea27 0a04 	bic.w	sl, r7, r4
 8002ce2:	ea8a 0505 	eor.w	r5, sl, r5
            Ame =   BCe ^((~BCi)&  BCo );
 8002ce6:	f8cd 90ac 	str.w	r9, [sp, #172]	@ 0xac
            Amo =   BCo ^((~BCu)&  BCa );
            Amu =   BCu ^((~BCa)&  BCe );
 8002cea:	ea23 030c 	bic.w	r3, r3, ip
            Ami =   BCi ^((~BCo)&  BCu );
 8002cee:	ea22 090e 	bic.w	r9, r2, lr
            Amu =   BCu ^((~BCa)&  BCe );
 8002cf2:	4053      	eors	r3, r2
            Ami =   BCi ^((~BCo)&  BCu );
 8002cf4:	952c      	str	r5, [sp, #176]	@ 0xb0
            Amu =   BCu ^((~BCa)&  BCe );
 8002cf6:	ea26 0601 	bic.w	r6, r6, r1
            Ami =   BCi ^((~BCo)&  BCu );
 8002cfa:	ea89 0508 	eor.w	r5, r9, r8
 8002cfe:	952d      	str	r5, [sp, #180]	@ 0xb4
            Amo =   BCo ^((~BCu)&  BCa );
 8002d00:	ea21 0807 	bic.w	r8, r1, r7
            Amu =   BCu ^((~BCa)&  BCe );
 8002d04:	9331      	str	r3, [sp, #196]	@ 0xc4
 8002d06:	ea86 0107 	eor.w	r1, r6, r7

            Ebi ^= Di;
 8002d0a:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
            Amu =   BCu ^((~BCa)&  BCe );
 8002d0c:	9130      	str	r1, [sp, #192]	@ 0xc0
            Amo =   BCo ^((~BCu)&  BCa );
 8002d0e:	ea2c 0502 	bic.w	r5, ip, r2
            Ebi ^= Di;
 8002d12:	9905      	ldr	r1, [sp, #20]
 8002d14:	9a3b      	ldr	r2, [sp, #236]	@ 0xec
            BCa = ROL(Ebi, 62);
            Ego ^= Do;
            BCe = ROL(Ego, 55);
            Eku ^= Du;
            BCi = ROL(Eku, 39);
            Ema ^= Da;
 8002d16:	9f02      	ldr	r7, [sp, #8]
            BCo = ROL(Ema, 41);
            Ese ^= De;
 8002d18:	f8dd 9010 	ldr.w	r9, [sp, #16]
            Ebi ^= Di;
 8002d1c:	ea83 030b 	eor.w	r3, r3, fp
 8002d20:	404a      	eors	r2, r1
            BCa = ROL(Ebi, 62);
 8002d22:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8002d26:	ea4c 7c82 	orr.w	ip, ip, r2, lsl #30
 8002d2a:	0892      	lsrs	r2, r2, #2
 8002d2c:	ea42 7283 	orr.w	r2, r2, r3, lsl #30
            Ego ^= Do;
 8002d30:	9906      	ldr	r1, [sp, #24]
 8002d32:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
            Amo =   BCo ^((~BCu)&  BCa );
 8002d34:	ea88 0404 	eor.w	r4, r8, r4
 8002d38:	942e      	str	r4, [sp, #184]	@ 0xb8
 8002d3a:	ea85 040e 	eor.w	r4, r5, lr
            Ego ^= Do;
 8002d3e:	404b      	eors	r3, r1
            Amo =   BCo ^((~BCu)&  BCa );
 8002d40:	942f      	str	r4, [sp, #188]	@ 0xbc
            Ego ^= Do;
 8002d42:	9937      	ldr	r1, [sp, #220]	@ 0xdc
 8002d44:	9c07      	ldr	r4, [sp, #28]
            BCe = ROL(Ego, 55);
 8002d46:	0a5d      	lsrs	r5, r3, #9
            Ego ^= Do;
 8002d48:	ea81 0604 	eor.w	r6, r1, r4
            BCe = ROL(Ego, 55);
 8002d4c:	ea45 55c6 	orr.w	r5, r5, r6, lsl #23
 8002d50:	0a76      	lsrs	r6, r6, #9
 8002d52:	ea46 56c3 	orr.w	r6, r6, r3, lsl #23
            Eku ^= Du;
 8002d56:	9908      	ldr	r1, [sp, #32]
 8002d58:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 8002d5a:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8002d5c:	404b      	eors	r3, r1
 8002d5e:	9933      	ldr	r1, [sp, #204]	@ 0xcc
            BCi = ROL(Eku, 39);
 8002d60:	ea4f 6853 	mov.w	r8, r3, lsr #25
            Eku ^= Du;
 8002d64:	404c      	eors	r4, r1
            BCi = ROL(Eku, 39);
 8002d66:	ea48 18c4 	orr.w	r8, r8, r4, lsl #7
 8002d6a:	0e64      	lsrs	r4, r4, #25
 8002d6c:	ea44 14c3 	orr.w	r4, r4, r3, lsl #7
            Ema ^= Da;
 8002d70:	9901      	ldr	r1, [sp, #4]
 8002d72:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 8002d74:	404b      	eors	r3, r1
 8002d76:	9939      	ldr	r1, [sp, #228]	@ 0xe4
            BCo = ROL(Ema, 41);
 8002d78:	ea4f 5ed3 	mov.w	lr, r3, lsr #23
            Ema ^= Da;
 8002d7c:	4079      	eors	r1, r7
            BCo = ROL(Ema, 41);
 8002d7e:	ea4e 2e41 	orr.w	lr, lr, r1, lsl #9
 8002d82:	0dc9      	lsrs	r1, r1, #23
 8002d84:	ea41 2143 	orr.w	r1, r1, r3, lsl #9
            Ese ^= De;
 8002d88:	9f03      	ldr	r7, [sp, #12]
 8002d8a:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 8002d8c:	407b      	eors	r3, r7
 8002d8e:	9f35      	ldr	r7, [sp, #212]	@ 0xd4
 8002d90:	ea87 0909 	eor.w	r9, r7, r9
            BCu = ROL(Ese, 2);
 8002d94:	ea4f 0789 	mov.w	r7, r9, lsl #2
 8002d98:	ea47 7793 	orr.w	r7, r7, r3, lsr #30
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	ea43 7399 	orr.w	r3, r3, r9, lsr #30
            Asa =   BCa ^((~BCe)&  BCi );
 8002da2:	ea28 0a05 	bic.w	sl, r8, r5
 8002da6:	ea24 0906 	bic.w	r9, r4, r6
 8002daa:	ea89 0902 	eor.w	r9, r9, r2
 8002dae:	ea8a 0a0c 	eor.w	sl, sl, ip
 8002db2:	f8cd a0c8 	str.w	sl, [sp, #200]	@ 0xc8
 8002db6:	f8cd 90cc 	str.w	r9, [sp, #204]	@ 0xcc
            Ase =   BCe ^((~BCi)&  BCo );
 8002dba:	ea2e 0a08 	bic.w	sl, lr, r8
 8002dbe:	ea21 0904 	bic.w	r9, r1, r4
 8002dc2:	ea8a 0a05 	eor.w	sl, sl, r5
 8002dc6:	ea89 0906 	eor.w	r9, r9, r6
 8002dca:	f8cd a0d0 	str.w	sl, [sp, #208]	@ 0xd0
 8002dce:	f8cd 90d4 	str.w	r9, [sp, #212]	@ 0xd4
            Asi =   BCi ^((~BCo)&  BCu );
 8002dd2:	ea23 0a0e 	bic.w	sl, r3, lr
 8002dd6:	ea27 0901 	bic.w	r9, r7, r1
 8002dda:	ea8a 0808 	eor.w	r8, sl, r8
 8002dde:	ea89 0404 	eor.w	r4, r9, r4
 8002de2:	f8cd 80d8 	str.w	r8, [sp, #216]	@ 0xd8
 8002de6:	9437      	str	r4, [sp, #220]	@ 0xdc
            Aso =   BCo ^((~BCu)&  BCa );
 8002de8:	ea2c 0803 	bic.w	r8, ip, r3
 8002dec:	ea22 0407 	bic.w	r4, r2, r7
            Asu =   BCu ^((~BCa)&  BCe );
 8002df0:	ea25 050c 	bic.w	r5, r5, ip
 8002df4:	406b      	eors	r3, r5
            Aso =   BCo ^((~BCu)&  BCa );
 8002df6:	ea88 0e0e 	eor.w	lr, r8, lr
 8002dfa:	4061      	eors	r1, r4
 8002dfc:	f8cd e0e0 	str.w	lr, [sp, #224]	@ 0xe0
 8002e00:	9139      	str	r1, [sp, #228]	@ 0xe4
            Asu =   BCu ^((~BCa)&  BCe );
 8002e02:	933a      	str	r3, [sp, #232]	@ 0xe8
        for(round = 0; round < NROUNDS; round += 2) {
 8002e04:	9b00      	ldr	r3, [sp, #0]
 8002e06:	3310      	adds	r3, #16
 8002e08:	9300      	str	r3, [sp, #0]
            Asu =   BCu ^((~BCa)&  BCe );
 8002e0a:	ea26 0602 	bic.w	r6, r6, r2
        for(round = 0; round < NROUNDS; round += 2) {
 8002e0e:	4b3d      	ldr	r3, [pc, #244]	@ (8002f04 <KeccakF1600_StatePermute+0xe04>)
 8002e10:	9a00      	ldr	r2, [sp, #0]
 8002e12:	4293      	cmp	r3, r2
            Asu =   BCu ^((~BCa)&  BCe );
 8002e14:	ea86 0607 	eor.w	r6, r6, r7
        for(round = 0; round < NROUNDS; round += 2) {
 8002e18:	f47f a9f0 	bne.w	80021fc <KeccakF1600_StatePermute+0xfc>
        }

        //copyToState(state, A)
        state[ 0] = Aba;
 8002e1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002e1e:	6003      	str	r3, [r0, #0]
 8002e20:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002e22:	6043      	str	r3, [r0, #4]
        state[ 1] = Abe;
 8002e24:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8002e26:	6083      	str	r3, [r0, #8]
 8002e28:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002e2a:	60c3      	str	r3, [r0, #12]
        state[ 2] = Abi;
 8002e2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002e2e:	6103      	str	r3, [r0, #16]
 8002e30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8002e32:	6143      	str	r3, [r0, #20]
        state[ 3] = Abo;
 8002e34:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8002e36:	6183      	str	r3, [r0, #24]
 8002e38:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8002e3a:	61c3      	str	r3, [r0, #28]
        state[ 4] = Abu;
 8002e3c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8002e3e:	6203      	str	r3, [r0, #32]
 8002e40:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8002e42:	6243      	str	r3, [r0, #36]	@ 0x24
        state[ 5] = Aga;
 8002e44:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8002e46:	6283      	str	r3, [r0, #40]	@ 0x28
 8002e48:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8002e4a:	62c3      	str	r3, [r0, #44]	@ 0x2c
        state[ 6] = Age;
 8002e4c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8002e4e:	6303      	str	r3, [r0, #48]	@ 0x30
 8002e50:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8002e52:	6343      	str	r3, [r0, #52]	@ 0x34
        state[ 7] = Agi;
 8002e54:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8002e56:	6383      	str	r3, [r0, #56]	@ 0x38
 8002e58:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8002e5a:	63c3      	str	r3, [r0, #60]	@ 0x3c
        state[ 8] = Ago;
 8002e5c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8002e5e:	6403      	str	r3, [r0, #64]	@ 0x40
 8002e60:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8002e62:	6443      	str	r3, [r0, #68]	@ 0x44
        state[ 9] = Agu;
 8002e64:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8002e66:	6483      	str	r3, [r0, #72]	@ 0x48
 8002e68:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8002e6a:	64c3      	str	r3, [r0, #76]	@ 0x4c
        state[10] = Aka;
 8002e6c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8002e6e:	6503      	str	r3, [r0, #80]	@ 0x50
 8002e70:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8002e72:	6543      	str	r3, [r0, #84]	@ 0x54
        state[11] = Ake;
 8002e74:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8002e76:	6583      	str	r3, [r0, #88]	@ 0x58
 8002e78:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8002e7a:	65c3      	str	r3, [r0, #92]	@ 0x5c
        state[12] = Aki;
 8002e7c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8002e7e:	6603      	str	r3, [r0, #96]	@ 0x60
 8002e80:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8002e82:	6643      	str	r3, [r0, #100]	@ 0x64
        state[13] = Ako;
 8002e84:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8002e86:	6683      	str	r3, [r0, #104]	@ 0x68
 8002e88:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8002e8a:	66c3      	str	r3, [r0, #108]	@ 0x6c
        state[14] = Aku;
 8002e8c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8002e8e:	6703      	str	r3, [r0, #112]	@ 0x70
 8002e90:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8002e92:	6743      	str	r3, [r0, #116]	@ 0x74
        state[15] = Ama;
 8002e94:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8002e96:	6783      	str	r3, [r0, #120]	@ 0x78
 8002e98:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8002e9a:	67c3      	str	r3, [r0, #124]	@ 0x7c
        state[16] = Ame;
 8002e9c:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8002e9e:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
 8002ea2:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8002ea4:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
        state[17] = Ami;
 8002ea8:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8002eaa:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
 8002eae:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8002eb0:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
        state[18] = Amo;
 8002eb4:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8002eb6:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
 8002eba:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 8002ebc:	f8c0 3094 	str.w	r3, [r0, #148]	@ 0x94
        state[19] = Amu;
 8002ec0:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8002ec2:	f8c0 3098 	str.w	r3, [r0, #152]	@ 0x98
 8002ec6:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 8002ec8:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
        state[20] = Asa;
 8002ecc:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 8002ece:	f8c0 30a0 	str.w	r3, [r0, #160]	@ 0xa0
 8002ed2:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 8002ed4:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
        state[21] = Ase;
 8002ed8:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 8002eda:	f8c0 30a8 	str.w	r3, [r0, #168]	@ 0xa8
 8002ede:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 8002ee0:	f8c0 30ac 	str.w	r3, [r0, #172]	@ 0xac
        state[22] = Asi;
 8002ee4:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 8002ee6:	f8c0 30b0 	str.w	r3, [r0, #176]	@ 0xb0
 8002eea:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 8002eec:	f8c0 30b4 	str.w	r3, [r0, #180]	@ 0xb4
        state[23] = Aso;
        state[24] = Asu;
 8002ef0:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
        state[23] = Aso;
 8002ef2:	f8c0 e0b8 	str.w	lr, [r0, #184]	@ 0xb8
 8002ef6:	f8c0 10bc 	str.w	r1, [r0, #188]	@ 0xbc
        state[24] = Asu;
 8002efa:	e9c0 3630 	strd	r3, r6, [r0, #192]	@ 0xc0
}
 8002efe:	b03d      	add	sp, #244	@ 0xf4
 8002f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f04:	08004f50 	.word	0x08004f50

08002f08 <keccak_squeeze>:
static unsigned int keccak_squeeze(uint8_t *out,
                                   size_t outlen,
                                   uint64_t s[25],
                                   unsigned int pos,
                                   unsigned int r)
{
 8002f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f0a:	9e06      	ldr	r6, [sp, #24]
 8002f0c:	4605      	mov	r5, r0
 8002f0e:	460c      	mov	r4, r1
 8002f10:	4610      	mov	r0, r2
  unsigned int i;

  while(outlen) {
 8002f12:	b90c      	cbnz	r4, 8002f18 <keccak_squeeze+0x10>
    outlen -= i-pos;
    pos = i;
  }

  return pos;
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(pos == r) {
 8002f18:	42b3      	cmp	r3, r6
 8002f1a:	d102      	bne.n	8002f22 <keccak_squeeze+0x1a>
      KeccakF1600_StatePermute(s);
 8002f1c:	f7ff f8f0 	bl	8002100 <KeccakF1600_StatePermute>
      pos = 0;
 8002f20:	2300      	movs	r3, #0
    for(i=pos;i < r && i < pos+outlen; i++)
 8002f22:	441c      	add	r4, r3
 8002f24:	42b3      	cmp	r3, r6
 8002f26:	d201      	bcs.n	8002f2c <keccak_squeeze+0x24>
 8002f28:	42a3      	cmp	r3, r4
 8002f2a:	d301      	bcc.n	8002f30 <keccak_squeeze+0x28>
    outlen -= i-pos;
 8002f2c:	1ae4      	subs	r4, r4, r3
    pos = i;
 8002f2e:	e7f0      	b.n	8002f12 <keccak_squeeze+0xa>
      *out++ = s[i/8] >> 8*(i%8);
 8002f30:	f023 0107 	bic.w	r1, r3, #7
 8002f34:	1847      	adds	r7, r0, r1
 8002f36:	f003 0207 	and.w	r2, r3, #7
 8002f3a:	f8d7 e004 	ldr.w	lr, [r7, #4]
 8002f3e:	5841      	ldr	r1, [r0, r1]
 8002f40:	00d2      	lsls	r2, r2, #3
 8002f42:	f1c2 0c20 	rsb	ip, r2, #32
 8002f46:	f1a2 0720 	sub.w	r7, r2, #32
 8002f4a:	40d1      	lsrs	r1, r2
 8002f4c:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002f50:	ea41 010c 	orr.w	r1, r1, ip
 8002f54:	fa2e f707 	lsr.w	r7, lr, r7
 8002f58:	4339      	orrs	r1, r7
 8002f5a:	f805 1b01 	strb.w	r1, [r5], #1
    for(i=pos;i < r && i < pos+outlen; i++)
 8002f5e:	3301      	adds	r3, #1
 8002f60:	e7e0      	b.n	8002f24 <keccak_squeeze+0x1c>

08002f62 <keccak_absorb_once>:
static void keccak_absorb_once(uint64_t s[25],
                               unsigned int r,
                               const uint8_t *in,
                               size_t inlen,
                               uint8_t p)
{
 8002f62:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f66:	460d      	mov	r5, r1
 8002f68:	4690      	mov	r8, r2
  unsigned int i;

  for(i=0;i<25;i++)
    s[i] = 0;
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	22c8      	movs	r2, #200	@ 0xc8
{
 8002f6e:	461f      	mov	r7, r3
 8002f70:	f89d 6030 	ldrb.w	r6, [sp, #48]	@ 0x30
 8002f74:	4604      	mov	r4, r0
    s[i] = 0;
 8002f76:	f7fd fa1d 	bl	80003b4 <memset>

  while(inlen >= r) {
    for(i=0;i<r/8;i++)
 8002f7a:	08eb      	lsrs	r3, r5, #3
 8002f7c:	9301      	str	r3, [sp, #4]
  while(inlen >= r) {
 8002f7e:	42af      	cmp	r7, r5
 8002f80:	d22b      	bcs.n	8002fda <keccak_absorb_once+0x78>
    in += r;
    inlen -= r;
    KeccakF1600_StatePermute(s);
  }

  for(i=0;i<inlen;i++)
 8002f82:	f04f 0b00 	mov.w	fp, #0
    s[i/8] ^= (uint64_t)in[i] << 8*(i%8);
 8002f86:	f02b 0007 	bic.w	r0, fp, #7
 8002f8a:	eb04 0c00 	add.w	ip, r4, r0
 8002f8e:	f00b 0107 	and.w	r1, fp, #7
 8002f92:	00c9      	lsls	r1, r1, #3
  for(i=0;i<inlen;i++)
 8002f94:	455f      	cmp	r7, fp
    s[i/8] ^= (uint64_t)in[i] << 8*(i%8);
 8002f96:	f854 9000 	ldr.w	r9, [r4, r0]
 8002f9a:	f8dc e004 	ldr.w	lr, [ip, #4]
 8002f9e:	f1a1 0320 	sub.w	r3, r1, #32
 8002fa2:	f1c1 0a20 	rsb	sl, r1, #32
  for(i=0;i<inlen;i++)
 8002fa6:	d149      	bne.n	800303c <keccak_absorb_once+0xda>

  s[i/8] ^= (uint64_t)p << 8*(i%8);
 8002fa8:	fa26 fa0a 	lsr.w	sl, r6, sl
 8002fac:	fa06 f303 	lsl.w	r3, r6, r3
  s[(r-1)/8] ^= 1ULL << 63;
 8002fb0:	3d01      	subs	r5, #1
  s[i/8] ^= (uint64_t)p << 8*(i%8);
 8002fb2:	408e      	lsls	r6, r1
 8002fb4:	ea43 030a 	orr.w	r3, r3, sl
 8002fb8:	ea86 0609 	eor.w	r6, r6, r9
  s[(r-1)/8] ^= 1ULL << 63;
 8002fbc:	f025 0507 	bic.w	r5, r5, #7
  s[i/8] ^= (uint64_t)p << 8*(i%8);
 8002fc0:	5026      	str	r6, [r4, r0]
 8002fc2:	ea83 030e 	eor.w	r3, r3, lr
  s[(r-1)/8] ^= 1ULL << 63;
 8002fc6:	442c      	add	r4, r5
  s[i/8] ^= (uint64_t)p << 8*(i%8);
 8002fc8:	f8cc 3004 	str.w	r3, [ip, #4]
  s[(r-1)/8] ^= 1ULL << 63;
 8002fcc:	6863      	ldr	r3, [r4, #4]
 8002fce:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8002fd2:	6063      	str	r3, [r4, #4]
}
 8002fd4:	b003      	add	sp, #12
 8002fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fda:	f1a4 0308 	sub.w	r3, r4, #8
    for(i=0;i<r/8;i++)
 8002fde:	f04f 0c00 	mov.w	ip, #0
 8002fe2:	2100      	movs	r1, #0
 8002fe4:	eb08 0bcc 	add.w	fp, r8, ip, lsl #3
  uint64_t r = 0;
 8002fe8:	4689      	mov	r9, r1
 8002fea:	468e      	mov	lr, r1
    r |= (uint64_t)x[i] << 8*i;
 8002fec:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8002ff0:	f1a1 0a20 	sub.w	sl, r1, #32
 8002ff4:	f1c1 0220 	rsb	r2, r1, #32
 8002ff8:	fa00 fa0a 	lsl.w	sl, r0, sl
 8002ffc:	fa20 f202 	lsr.w	r2, r0, r2
 8003000:	4088      	lsls	r0, r1
  for(i=0;i<8;i++)
 8003002:	3108      	adds	r1, #8
    r |= (uint64_t)x[i] << 8*i;
 8003004:	ea4a 0202 	orr.w	r2, sl, r2
  for(i=0;i<8;i++)
 8003008:	2940      	cmp	r1, #64	@ 0x40
    r |= (uint64_t)x[i] << 8*i;
 800300a:	ea40 0909 	orr.w	r9, r0, r9
 800300e:	ea42 0e0e 	orr.w	lr, r2, lr
  for(i=0;i<8;i++)
 8003012:	d1eb      	bne.n	8002fec <keccak_absorb_once+0x8a>
      s[i] ^= load64(in+8*i);
 8003014:	f853 1f08 	ldr.w	r1, [r3, #8]!
 8003018:	685a      	ldr	r2, [r3, #4]
 800301a:	ea81 0109 	eor.w	r1, r1, r9
 800301e:	ea82 020e 	eor.w	r2, r2, lr
 8003022:	e9c3 1200 	strd	r1, r2, [r3]
    for(i=0;i<r/8;i++)
 8003026:	9a01      	ldr	r2, [sp, #4]
 8003028:	f10c 0c01 	add.w	ip, ip, #1
 800302c:	4562      	cmp	r2, ip
 800302e:	d8d8      	bhi.n	8002fe2 <keccak_absorb_once+0x80>
    KeccakF1600_StatePermute(s);
 8003030:	4620      	mov	r0, r4
    in += r;
 8003032:	44a8      	add	r8, r5
    inlen -= r;
 8003034:	1b7f      	subs	r7, r7, r5
    KeccakF1600_StatePermute(s);
 8003036:	f7ff f863 	bl	8002100 <KeccakF1600_StatePermute>
 800303a:	e7a0      	b.n	8002f7e <keccak_absorb_once+0x1c>
    s[i/8] ^= (uint64_t)in[i] << 8*(i%8);
 800303c:	f818 200b 	ldrb.w	r2, [r8, fp]
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	fa22 fa0a 	lsr.w	sl, r2, sl
 8003048:	ea43 030a 	orr.w	r3, r3, sl
 800304c:	408a      	lsls	r2, r1
 800304e:	ea82 0209 	eor.w	r2, r2, r9
 8003052:	ea83 030e 	eor.w	r3, r3, lr
 8003056:	5022      	str	r2, [r4, r0]
  for(i=0;i<inlen;i++)
 8003058:	f10b 0b01 	add.w	fp, fp, #1
    s[i/8] ^= (uint64_t)in[i] << 8*(i%8);
 800305c:	f8cc 3004 	str.w	r3, [ip, #4]
  for(i=0;i<inlen;i++)
 8003060:	e791      	b.n	8002f86 <keccak_absorb_once+0x24>

08003062 <keccak_squeezeblocks>:
**************************************************/
static void keccak_squeezeblocks(uint8_t *out,
                                 size_t nblocks,
                                 uint64_t s[25],
                                 unsigned int r)
{
 8003062:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003066:	4606      	mov	r6, r0
 8003068:	460d      	mov	r5, r1
 800306a:	4610      	mov	r0, r2
 800306c:	461f      	mov	r7, r3
  unsigned int i;

  while(nblocks) {
    KeccakF1600_StatePermute(s);
    for(i=0;i<r/8;i++)
 800306e:	ea4f 08d3 	mov.w	r8, r3, lsr #3
  while(nblocks) {
 8003072:	b90d      	cbnz	r5, 8003078 <keccak_squeezeblocks+0x16>
      store64(out+8*i, s[i]);
    out += r;
    nblocks -= 1;
  }
}
 8003074:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    KeccakF1600_StatePermute(s);
 8003078:	f7ff f842 	bl	8002100 <KeccakF1600_StatePermute>
    for(i=0;i<r/8;i++)
 800307c:	f1a0 0208 	sub.w	r2, r0, #8
 8003080:	2300      	movs	r3, #0
      store64(out+8*i, s[i]);
 8003082:	f852 bf08 	ldr.w	fp, [r2, #8]!
 8003086:	f8d2 a004 	ldr.w	sl, [r2, #4]
  for(i=0;i<8;i++)
 800308a:	eb06 09c3 	add.w	r9, r6, r3, lsl #3
      store64(out+8*i, s[i]);
 800308e:	2400      	movs	r4, #0
    x[i] = u >> 8*i;
 8003090:	f1c4 0e20 	rsb	lr, r4, #32
 8003094:	f1a4 0c20 	sub.w	ip, r4, #32
 8003098:	fa2b f104 	lsr.w	r1, fp, r4
 800309c:	fa0a fe0e 	lsl.w	lr, sl, lr
 80030a0:	ea41 010e 	orr.w	r1, r1, lr
 80030a4:	fa2a fc0c 	lsr.w	ip, sl, ip
  for(i=0;i<8;i++)
 80030a8:	3408      	adds	r4, #8
    x[i] = u >> 8*i;
 80030aa:	ea41 010c 	orr.w	r1, r1, ip
  for(i=0;i<8;i++)
 80030ae:	2c40      	cmp	r4, #64	@ 0x40
    x[i] = u >> 8*i;
 80030b0:	f809 1b01 	strb.w	r1, [r9], #1
  for(i=0;i<8;i++)
 80030b4:	d1ec      	bne.n	8003090 <keccak_squeezeblocks+0x2e>
    for(i=0;i<r/8;i++)
 80030b6:	3301      	adds	r3, #1
 80030b8:	4543      	cmp	r3, r8
 80030ba:	d3e2      	bcc.n	8003082 <keccak_squeezeblocks+0x20>
    out += r;
 80030bc:	443e      	add	r6, r7
    nblocks -= 1;
 80030be:	3d01      	subs	r5, #1
 80030c0:	e7d7      	b.n	8003072 <keccak_squeezeblocks+0x10>

080030c2 <pqcrystals_kyber_fips202_ref_shake128_absorb_once>:
* Arguments:   - keccak_state *state: pointer to (uninitialized) output Keccak state
*              - const uint8_t *in: pointer to input to be absorbed into s
*              - size_t inlen: length of input in bytes
**************************************************/
void shake128_absorb_once(keccak_state *state, const uint8_t *in, size_t inlen)
{
 80030c2:	b513      	push	{r0, r1, r4, lr}
 80030c4:	4613      	mov	r3, r2
  keccak_absorb_once(state->s, SHAKE128_RATE, in, inlen, 0x1F);
 80030c6:	221f      	movs	r2, #31
 80030c8:	9200      	str	r2, [sp, #0]
 80030ca:	460a      	mov	r2, r1
 80030cc:	21a8      	movs	r1, #168	@ 0xa8
{
 80030ce:	4604      	mov	r4, r0
  keccak_absorb_once(state->s, SHAKE128_RATE, in, inlen, 0x1F);
 80030d0:	f7ff ff47 	bl	8002f62 <keccak_absorb_once>
  state->pos = SHAKE128_RATE;
 80030d4:	23a8      	movs	r3, #168	@ 0xa8
 80030d6:	f8c4 30c8 	str.w	r3, [r4, #200]	@ 0xc8
}
 80030da:	b002      	add	sp, #8
 80030dc:	bd10      	pop	{r4, pc}

080030de <pqcrystals_kyber_fips202_ref_shake128_squeezeblocks>:
*              - size_t nblocks: number of blocks to be squeezed (written to output)
*              - keccak_state *s: pointer to input/output Keccak state
**************************************************/
void shake128_squeezeblocks(uint8_t *out, size_t nblocks, keccak_state *state)
{
  keccak_squeezeblocks(out, nblocks, state->s, SHAKE128_RATE);
 80030de:	23a8      	movs	r3, #168	@ 0xa8
 80030e0:	f7ff bfbf 	b.w	8003062 <keccak_squeezeblocks>

080030e4 <pqcrystals_kyber_fips202_ref_shake256_squeeze>:
* Arguments:   - uint8_t *out: pointer to output blocks
*              - size_t outlen : number of bytes to be squeezed (written to output)
*              - keccak_state *s: pointer to input/output Keccak state
**************************************************/
void shake256_squeeze(uint8_t *out, size_t outlen, keccak_state *state)
{
 80030e4:	b513      	push	{r0, r1, r4, lr}
  state->pos = keccak_squeeze(out, outlen, state->s, state->pos, SHAKE256_RATE);
 80030e6:	2388      	movs	r3, #136	@ 0x88
 80030e8:	9300      	str	r3, [sp, #0]
 80030ea:	f8d2 30c8 	ldr.w	r3, [r2, #200]	@ 0xc8
{
 80030ee:	4614      	mov	r4, r2
  state->pos = keccak_squeeze(out, outlen, state->s, state->pos, SHAKE256_RATE);
 80030f0:	f7ff ff0a 	bl	8002f08 <keccak_squeeze>
 80030f4:	f8c4 00c8 	str.w	r0, [r4, #200]	@ 0xc8
}
 80030f8:	b002      	add	sp, #8
 80030fa:	bd10      	pop	{r4, pc}

080030fc <pqcrystals_kyber_fips202_ref_shake256_absorb_once>:
* Arguments:   - keccak_state *state: pointer to (uninitialized) output Keccak state
*              - const uint8_t *in: pointer to input to be absorbed into s
*              - size_t inlen: length of input in bytes
**************************************************/
void shake256_absorb_once(keccak_state *state, const uint8_t *in, size_t inlen)
{
 80030fc:	b513      	push	{r0, r1, r4, lr}
 80030fe:	4613      	mov	r3, r2
  keccak_absorb_once(state->s, SHAKE256_RATE, in, inlen, 0x1F);
 8003100:	221f      	movs	r2, #31
 8003102:	9200      	str	r2, [sp, #0]
 8003104:	460a      	mov	r2, r1
 8003106:	2188      	movs	r1, #136	@ 0x88
{
 8003108:	4604      	mov	r4, r0
  keccak_absorb_once(state->s, SHAKE256_RATE, in, inlen, 0x1F);
 800310a:	f7ff ff2a 	bl	8002f62 <keccak_absorb_once>
  state->pos = SHAKE256_RATE;
 800310e:	2388      	movs	r3, #136	@ 0x88
 8003110:	f8c4 30c8 	str.w	r3, [r4, #200]	@ 0xc8
}
 8003114:	b002      	add	sp, #8
 8003116:	bd10      	pop	{r4, pc}

08003118 <pqcrystals_kyber_fips202_ref_shake256_squeezeblocks>:
*              - size_t nblocks: number of blocks to be squeezed (written to output)
*              - keccak_state *s: pointer to input/output Keccak state
**************************************************/
void shake256_squeezeblocks(uint8_t *out, size_t nblocks, keccak_state *state)
{
  keccak_squeezeblocks(out, nblocks, state->s, SHAKE256_RATE);
 8003118:	2388      	movs	r3, #136	@ 0x88
 800311a:	f7ff bfa2 	b.w	8003062 <keccak_squeezeblocks>

0800311e <pqcrystals_kyber_fips202_ref_shake256>:
*              - size_t outlen: requested output length in bytes
*              - const uint8_t *in: pointer to input
*              - size_t inlen: length of input in bytes
**************************************************/
void shake256(uint8_t *out, size_t outlen, const uint8_t *in, size_t inlen)
{
 800311e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003120:	b0b5      	sub	sp, #212	@ 0xd4
 8003122:	4605      	mov	r5, r0
 8003124:	460e      	mov	r6, r1
  size_t nblocks;
  keccak_state state;

  shake256_absorb_once(&state, in, inlen);
 8003126:	4668      	mov	r0, sp
{
 8003128:	4611      	mov	r1, r2
  nblocks = outlen/SHAKE256_RATE;
 800312a:	2788      	movs	r7, #136	@ 0x88
  shake256_absorb_once(&state, in, inlen);
 800312c:	461a      	mov	r2, r3
 800312e:	f7ff ffe5 	bl	80030fc <pqcrystals_kyber_fips202_ref_shake256_absorb_once>
  nblocks = outlen/SHAKE256_RATE;
 8003132:	fbb6 f4f7 	udiv	r4, r6, r7
  shake256_squeezeblocks(out, nblocks, &state);
 8003136:	466a      	mov	r2, sp
 8003138:	4621      	mov	r1, r4
 800313a:	4628      	mov	r0, r5
  outlen -= nblocks*SHAKE256_RATE;
  out += nblocks*SHAKE256_RATE;
  shake256_squeeze(out, outlen, &state);
 800313c:	437c      	muls	r4, r7
  shake256_squeezeblocks(out, nblocks, &state);
 800313e:	f7ff ffeb 	bl	8003118 <pqcrystals_kyber_fips202_ref_shake256_squeezeblocks>
  shake256_squeeze(out, outlen, &state);
 8003142:	466a      	mov	r2, sp
 8003144:	1b31      	subs	r1, r6, r4
 8003146:	1928      	adds	r0, r5, r4
 8003148:	f7ff ffcc 	bl	80030e4 <pqcrystals_kyber_fips202_ref_shake256_squeeze>
}
 800314c:	b035      	add	sp, #212	@ 0xd4
 800314e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003150 <pqcrystals_kyber_fips202_ref_sha3_256>:
* Arguments:   - uint8_t *h: pointer to output (32 bytes)
*              - const uint8_t *in: pointer to input
*              - size_t inlen: length of input in bytes
**************************************************/
void sha3_256(uint8_t h[32], const uint8_t *in, size_t inlen)
{
 8003150:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003152:	b0b5      	sub	sp, #212	@ 0xd4
 8003154:	4613      	mov	r3, r2
  unsigned int i;
  uint64_t s[25];

  keccak_absorb_once(s, SHA3_256_RATE, in, inlen, 0x06);
 8003156:	2206      	movs	r2, #6
 8003158:	9200      	str	r2, [sp, #0]
{
 800315a:	4604      	mov	r4, r0
  keccak_absorb_once(s, SHA3_256_RATE, in, inlen, 0x06);
 800315c:	460a      	mov	r2, r1
 800315e:	a802      	add	r0, sp, #8
 8003160:	2188      	movs	r1, #136	@ 0x88
 8003162:	f7ff fefe 	bl	8002f62 <keccak_absorb_once>
  KeccakF1600_StatePermute(s);
 8003166:	a802      	add	r0, sp, #8
 8003168:	f7fe ffca 	bl	8002100 <KeccakF1600_StatePermute>
 800316c:	2100      	movs	r1, #0
  for(i=0;i<4;i++)
    store64(h+8*i,s[i]);
 800316e:	e9d0 ec00 	ldrd	lr, ip, [r0]
 8003172:	1867      	adds	r7, r4, r1
 8003174:	3008      	adds	r0, #8
 8003176:	2300      	movs	r3, #0
    x[i] = u >> 8*i;
 8003178:	f1c3 0620 	rsb	r6, r3, #32
 800317c:	f1a3 0520 	sub.w	r5, r3, #32
 8003180:	fa2e f203 	lsr.w	r2, lr, r3
 8003184:	fa0c f606 	lsl.w	r6, ip, r6
 8003188:	4332      	orrs	r2, r6
 800318a:	fa2c f505 	lsr.w	r5, ip, r5
  for(i=0;i<8;i++)
 800318e:	3308      	adds	r3, #8
    x[i] = u >> 8*i;
 8003190:	432a      	orrs	r2, r5
  for(i=0;i<8;i++)
 8003192:	2b40      	cmp	r3, #64	@ 0x40
    x[i] = u >> 8*i;
 8003194:	f807 2b01 	strb.w	r2, [r7], #1
  for(i=0;i<8;i++)
 8003198:	d1ee      	bne.n	8003178 <pqcrystals_kyber_fips202_ref_sha3_256+0x28>
  for(i=0;i<4;i++)
 800319a:	3108      	adds	r1, #8
 800319c:	2920      	cmp	r1, #32
 800319e:	d1e6      	bne.n	800316e <pqcrystals_kyber_fips202_ref_sha3_256+0x1e>
}
 80031a0:	b035      	add	sp, #212	@ 0xd4
 80031a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080031a4 <pqcrystals_kyber_fips202_ref_sha3_512>:
* Arguments:   - uint8_t *h: pointer to output (64 bytes)
*              - const uint8_t *in: pointer to input
*              - size_t inlen: length of input in bytes
**************************************************/
void sha3_512(uint8_t h[64], const uint8_t *in, size_t inlen)
{
 80031a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031a6:	b0b5      	sub	sp, #212	@ 0xd4
 80031a8:	4613      	mov	r3, r2
  unsigned int i;
  uint64_t s[25];

  keccak_absorb_once(s, SHA3_512_RATE, in, inlen, 0x06);
 80031aa:	2206      	movs	r2, #6
 80031ac:	9200      	str	r2, [sp, #0]
{
 80031ae:	4604      	mov	r4, r0
  keccak_absorb_once(s, SHA3_512_RATE, in, inlen, 0x06);
 80031b0:	460a      	mov	r2, r1
 80031b2:	a802      	add	r0, sp, #8
 80031b4:	2148      	movs	r1, #72	@ 0x48
 80031b6:	f7ff fed4 	bl	8002f62 <keccak_absorb_once>
  KeccakF1600_StatePermute(s);
 80031ba:	a802      	add	r0, sp, #8
 80031bc:	f7fe ffa0 	bl	8002100 <KeccakF1600_StatePermute>
 80031c0:	2100      	movs	r1, #0
  for(i=0;i<8;i++)
    store64(h+8*i,s[i]);
 80031c2:	e9d0 ec00 	ldrd	lr, ip, [r0]
 80031c6:	1867      	adds	r7, r4, r1
 80031c8:	3008      	adds	r0, #8
 80031ca:	2300      	movs	r3, #0
    x[i] = u >> 8*i;
 80031cc:	f1c3 0620 	rsb	r6, r3, #32
 80031d0:	f1a3 0520 	sub.w	r5, r3, #32
 80031d4:	fa2e f203 	lsr.w	r2, lr, r3
 80031d8:	fa0c f606 	lsl.w	r6, ip, r6
 80031dc:	4332      	orrs	r2, r6
 80031de:	fa2c f505 	lsr.w	r5, ip, r5
  for(i=0;i<8;i++)
 80031e2:	3308      	adds	r3, #8
    x[i] = u >> 8*i;
 80031e4:	432a      	orrs	r2, r5
  for(i=0;i<8;i++)
 80031e6:	2b40      	cmp	r3, #64	@ 0x40
    x[i] = u >> 8*i;
 80031e8:	f807 2b01 	strb.w	r2, [r7], #1
  for(i=0;i<8;i++)
 80031ec:	d1ee      	bne.n	80031cc <pqcrystals_kyber_fips202_ref_sha3_512+0x28>
  for(i=0;i<8;i++)
 80031ee:	3108      	adds	r1, #8
 80031f0:	2940      	cmp	r1, #64	@ 0x40
 80031f2:	d1e6      	bne.n	80031c2 <pqcrystals_kyber_fips202_ref_sha3_512+0x1e>
}
 80031f4:	b035      	add	sp, #212	@ 0xd4
 80031f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080031f8 <rej_uniform>:
**************************************************/
static unsigned int rej_uniform(int16_t *r,
                                unsigned int len,
                                const uint8_t *buf,
                                unsigned int buflen)
{
 80031f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031fa:	4607      	mov	r7, r0
  unsigned int ctr, pos;
  uint16_t val0, val1;

  ctr = pos = 0;
  while(ctr < len && pos + 3 <= buflen) {
 80031fc:	f1c2 0e03 	rsb	lr, r2, #3
  ctr = pos = 0;
 8003200:	2000      	movs	r0, #0
    val0 = ((buf[pos+0] >> 0) | ((uint16_t)buf[pos+1] << 8)) & 0xFFF;
 8003202:	f892 c001 	ldrb.w	ip, [r2, #1]
 8003206:	7816      	ldrb	r6, [r2, #0]
    val1 = ((buf[pos+1] >> 4) | ((uint16_t)buf[pos+2] << 4)) & 0xFFF;
 8003208:	7895      	ldrb	r5, [r2, #2]
    val0 = ((buf[pos+0] >> 0) | ((uint16_t)buf[pos+1] << 8)) & 0xFFF;
 800320a:	ea46 260c 	orr.w	r6, r6, ip, lsl #8
 800320e:	f3c6 060b 	ubfx	r6, r6, #0, #12
    pos += 3;

    if(val0 < KYBER_Q)
 8003212:	f5b6 6f50 	cmp.w	r6, #3328	@ 0xd00
      r[ctr++] = val0;
 8003216:	bfd6      	itet	le
 8003218:	1c44      	addle	r4, r0, #1
 800321a:	4604      	movgt	r4, r0
 800321c:	f827 6010 	strhle.w	r6, [r7, r0, lsl #1]
    if(ctr < len && val1 < KYBER_Q)
 8003220:	428c      	cmp	r4, r1
 8003222:	d212      	bcs.n	800324a <rej_uniform+0x52>
    val1 = ((buf[pos+1] >> 4) | ((uint16_t)buf[pos+2] << 4)) & 0xFFF;
 8003224:	012d      	lsls	r5, r5, #4
 8003226:	ea45 151c 	orr.w	r5, r5, ip, lsr #4
    if(ctr < len && val1 < KYBER_Q)
 800322a:	f5b5 6f50 	cmp.w	r5, #3328	@ 0xd00
 800322e:	dc05      	bgt.n	800323c <rej_uniform+0x44>
      r[ctr++] = val1;
 8003230:	1c60      	adds	r0, r4, #1
  while(ctr < len && pos + 3 <= buflen) {
 8003232:	4281      	cmp	r1, r0
      r[ctr++] = val1;
 8003234:	f827 5014 	strh.w	r5, [r7, r4, lsl #1]
  while(ctr < len && pos + 3 <= buflen) {
 8003238:	d801      	bhi.n	800323e <rej_uniform+0x46>
  }

  return ctr;
}
 800323a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800323c:	4620      	mov	r0, r4
  while(ctr < len && pos + 3 <= buflen) {
 800323e:	3203      	adds	r2, #3
 8003240:	eb0e 0402 	add.w	r4, lr, r2
 8003244:	42a3      	cmp	r3, r4
 8003246:	d2dc      	bcs.n	8003202 <rej_uniform+0xa>
 8003248:	e7f7      	b.n	800323a <rej_uniform+0x42>
 800324a:	4620      	mov	r0, r4
  return ctr;
 800324c:	e7f5      	b.n	800323a <rej_uniform+0x42>

0800324e <gen_matrix>:
*              - int transposed: boolean deciding whether A or A^T is generated
**************************************************/
#define GEN_MATRIX_NBLOCKS ((12*KYBER_N/8*(1 << 12)/KYBER_Q + XOF_BLOCKBYTES)/XOF_BLOCKBYTES)
// Not static for benchmarking
void gen_matrix(polyvec *a, const uint8_t seed[KYBER_SYMBYTES], int transposed)
{
 800324e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003252:	f5ad 7d37 	sub.w	sp, sp, #732	@ 0x2dc
 8003256:	460f      	mov	r7, r1
 8003258:	9000      	str	r0, [sp, #0]
 800325a:	9201      	str	r2, [sp, #4]
  unsigned int buflen, off;
  uint8_t buf[GEN_MATRIX_NBLOCKS*XOF_BLOCKBYTES+2];
  //printf("%lu\n", GEN_MATRIX_NBLOCKS * XOF_BLOCKBYTES + 2);
  xof_state state;

  for(i=0;i<KYBER_K;i++) {
 800325c:	2600      	movs	r6, #0
      if(transposed)
        xof_absorb(&state, seed, i, j);
      else
        xof_absorb(&state, seed, j, i);

      xof_squeezeblocks(buf, GEN_MATRIX_NBLOCKS, &state);
 800325e:	f04f 0a03 	mov.w	sl, #3
    for(j=0;j<KYBER_K;j++) {
 8003262:	9b00      	ldr	r3, [sp, #0]
 8003264:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8003268:	fb02 3806 	mla	r8, r2, r6, r3
 800326c:	2500      	movs	r5, #0
      if(transposed)
 800326e:	9b01      	ldr	r3, [sp, #4]
 8003270:	b2ea      	uxtb	r2, r5
 8003272:	b2f1      	uxtb	r1, r6
 8003274:	b30b      	cbz	r3, 80032ba <gen_matrix+0x6c>
        xof_absorb(&state, seed, i, j);
 8003276:	4613      	mov	r3, r2
 8003278:	460a      	mov	r2, r1
        xof_absorb(&state, seed, j, i);
 800327a:	4639      	mov	r1, r7
 800327c:	a802      	add	r0, sp, #8
 800327e:	f000 fdbb 	bl	8003df8 <kyber_shake128_absorb>
      buflen = GEN_MATRIX_NBLOCKS*XOF_BLOCKBYTES;
      ctr = rej_uniform(a[i].vec[j].coeffs, KYBER_N, buf, buflen);
 8003282:	eb08 2945 	add.w	r9, r8, r5, lsl #9
      xof_squeezeblocks(buf, GEN_MATRIX_NBLOCKS, &state);
 8003286:	aa02      	add	r2, sp, #8
 8003288:	2103      	movs	r1, #3
 800328a:	a837      	add	r0, sp, #220	@ 0xdc
 800328c:	f7ff ff27 	bl	80030de <pqcrystals_kyber_fips202_ref_shake128_squeezeblocks>
      ctr = rej_uniform(a[i].vec[j].coeffs, KYBER_N, buf, buflen);
 8003290:	f44f 73fc 	mov.w	r3, #504	@ 0x1f8
 8003294:	aa37      	add	r2, sp, #220	@ 0xdc
 8003296:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800329a:	4648      	mov	r0, r9
 800329c:	f7ff ffac 	bl	80031f8 <rej_uniform>
 80032a0:	4604      	mov	r4, r0

      while(ctr < KYBER_N) {
 80032a2:	2cff      	cmp	r4, #255	@ 0xff
 80032a4:	d90b      	bls.n	80032be <gen_matrix+0x70>
    for(j=0;j<KYBER_K;j++) {
 80032a6:	3501      	adds	r5, #1
 80032a8:	2d03      	cmp	r5, #3
 80032aa:	d1e0      	bne.n	800326e <gen_matrix+0x20>
  for(i=0;i<KYBER_K;i++) {
 80032ac:	3601      	adds	r6, #1
 80032ae:	2e03      	cmp	r6, #3
 80032b0:	d1d7      	bne.n	8003262 <gen_matrix+0x14>
        buflen = off + XOF_BLOCKBYTES;
        ctr += rej_uniform(a[i].vec[j].coeffs + ctr, KYBER_N - ctr, buf, buflen);
      }
    }
  }
}
 80032b2:	f50d 7d37 	add.w	sp, sp, #732	@ 0x2dc
 80032b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        xof_absorb(&state, seed, j, i);
 80032ba:	460b      	mov	r3, r1
 80032bc:	e7dd      	b.n	800327a <gen_matrix+0x2c>
        off = buflen % 3;
 80032be:	fbb3 f2fa 	udiv	r2, r3, sl
 80032c2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80032c6:	1a98      	subs	r0, r3, r2
        for(k = 0; k < off; k++)
 80032c8:	a937      	add	r1, sp, #220	@ 0xdc
 80032ca:	f04f 0b00 	mov.w	fp, #0
          buf[k] = buf[buflen - off + k];
 80032ce:	1ad2      	subs	r2, r2, r3
        for(k = 0; k < off; k++)
 80032d0:	4583      	cmp	fp, r0
 80032d2:	d111      	bne.n	80032f8 <gen_matrix+0xaa>
        xof_squeezeblocks(buf + off, 1, &state);
 80032d4:	ab37      	add	r3, sp, #220	@ 0xdc
 80032d6:	eb03 000b 	add.w	r0, r3, fp
 80032da:	aa02      	add	r2, sp, #8
 80032dc:	2101      	movs	r1, #1
 80032de:	f7ff fefe 	bl	80030de <pqcrystals_kyber_fips202_ref_shake128_squeezeblocks>
        ctr += rej_uniform(a[i].vec[j].coeffs + ctr, KYBER_N - ctr, buf, buflen);
 80032e2:	f5c4 7180 	rsb	r1, r4, #256	@ 0x100
 80032e6:	eb09 0044 	add.w	r0, r9, r4, lsl #1
        buflen = off + XOF_BLOCKBYTES;
 80032ea:	f10b 03a8 	add.w	r3, fp, #168	@ 0xa8
        ctr += rej_uniform(a[i].vec[j].coeffs + ctr, KYBER_N - ctr, buf, buflen);
 80032ee:	aa37      	add	r2, sp, #220	@ 0xdc
 80032f0:	f7ff ff82 	bl	80031f8 <rej_uniform>
 80032f4:	4404      	add	r4, r0
 80032f6:	e7d4      	b.n	80032a2 <gen_matrix+0x54>
          buf[k] = buf[buflen - off + k];
 80032f8:	eb03 0c01 	add.w	ip, r3, r1
        for(k = 0; k < off; k++)
 80032fc:	f10b 0b01 	add.w	fp, fp, #1
          buf[k] = buf[buflen - off + k];
 8003300:	f81c c002 	ldrb.w	ip, [ip, r2]
 8003304:	f801 cb01 	strb.w	ip, [r1], #1
        for(k = 0; k < off; k++)
 8003308:	e7e2      	b.n	80032d0 <gen_matrix+0x82>

0800330a <indcpa_keypair>:
*              - uint8_t *sk: pointer to output private key
                              (of length KYBER_INDCPA_SECRETKEYBYTES bytes)
**************************************************/
void indcpa_keypair(uint8_t pk[KYBER_INDCPA_PUBLICKEYBYTES],
                    uint8_t sk[KYBER_INDCPA_SECRETKEYBYTES])
{
 800330a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800330e:	f5ad 5d11 	sub.w	sp, sp, #9280	@ 0x2440
 8003312:	b081      	sub	sp, #4
  const uint8_t *publicseed = buf;
  const uint8_t *noiseseed = buf+KYBER_SYMBYTES;
  uint8_t nonce = 0;
  polyvec a[KYBER_K], e, pkpv, skpv;

  randombytes(buf, KYBER_SYMBYTES);
 8003314:	2300      	movs	r3, #0
 8003316:	2220      	movs	r2, #32
{
 8003318:	4604      	mov	r4, r0
  randombytes(buf, KYBER_SYMBYTES);
 800331a:	4668      	mov	r0, sp
{
 800331c:	4688      	mov	r8, r1
  randombytes(buf, KYBER_SYMBYTES);
 800331e:	f000 fd30 	bl	8003d82 <randombytes>
  hash_g(buf, buf, KYBER_SYMBYTES);
 8003322:	2220      	movs	r2, #32
 8003324:	4669      	mov	r1, sp
 8003326:	4668      	mov	r0, sp

  gen_a(a, publicseed);

  for(i=0;i<KYBER_K;i++)
    poly_getnoise_eta1(&skpv.vec[i], noiseseed, nonce++);
 8003328:	ad08      	add	r5, sp, #32
  hash_g(buf, buf, KYBER_SYMBYTES);
 800332a:	f7ff ff3b 	bl	80031a4 <pqcrystals_kyber_fips202_ref_sha3_512>
  gen_a(a, publicseed);
 800332e:	2200      	movs	r2, #0
 8003330:	4669      	mov	r1, sp
 8003332:	f50d 5092 	add.w	r0, sp, #4672	@ 0x1240
 8003336:	f7ff ff8a 	bl	800324e <gen_matrix>
    poly_getnoise_eta1(&skpv.vec[i], noiseseed, nonce++);
 800333a:	4629      	mov	r1, r5
 800333c:	2200      	movs	r2, #0
 800333e:	f50d 6044 	add.w	r0, sp, #3136	@ 0xc40
 8003342:	f000 fb5b 	bl	80039fc <poly_getnoise_eta1>
 8003346:	4629      	mov	r1, r5
 8003348:	2201      	movs	r2, #1
 800334a:	f50d 6064 	add.w	r0, sp, #3648	@ 0xe40
 800334e:	f000 fb55 	bl	80039fc <poly_getnoise_eta1>
 8003352:	4629      	mov	r1, r5
 8003354:	2202      	movs	r2, #2
 8003356:	f50d 5082 	add.w	r0, sp, #4160	@ 0x1040
 800335a:	f000 fb4f 	bl	80039fc <poly_getnoise_eta1>
  for(i=0;i<KYBER_K;i++)
    poly_getnoise_eta1(&e.vec[i], noiseseed, nonce++);
 800335e:	4629      	mov	r1, r5
 8003360:	2203      	movs	r2, #3
 8003362:	a810      	add	r0, sp, #64	@ 0x40
 8003364:	f000 fb4a 	bl	80039fc <poly_getnoise_eta1>
 8003368:	4629      	mov	r1, r5
 800336a:	2204      	movs	r2, #4
 800336c:	a890      	add	r0, sp, #576	@ 0x240
 800336e:	f000 fb45 	bl	80039fc <poly_getnoise_eta1>
 8003372:	4629      	mov	r1, r5
 8003374:	2205      	movs	r2, #5
 8003376:	f50d 6088 	add.w	r0, sp, #1088	@ 0x440
 800337a:	f000 fb3f 	bl	80039fc <poly_getnoise_eta1>

  polyvec_ntt(&skpv);
 800337e:	f50d 6044 	add.w	r0, sp, #3136	@ 0xc40
 8003382:	f000 fc80 	bl	8003c86 <polyvec_ntt>
  polyvec_ntt(&e);
 8003386:	a810      	add	r0, sp, #64	@ 0x40
 8003388:	f000 fc7d 	bl	8003c86 <polyvec_ntt>

  // matrix-vector multiplication
  for(i=0;i<KYBER_K;i++) {
 800338c:	f50d 66c8 	add.w	r6, sp, #1600	@ 0x640
 8003390:	f50d 5592 	add.w	r5, sp, #4672	@ 0x1240
 8003394:	f04f 0900 	mov.w	r9, #0
 8003398:	4637      	mov	r7, r6
    polyvec_basemul_acc_montgomery(&pkpv.vec[i], &a[i], &skpv);
 800339a:	4629      	mov	r1, r5
 800339c:	4630      	mov	r0, r6
 800339e:	f50d 6244 	add.w	r2, sp, #3136	@ 0xc40
 80033a2:	f000 fc8c 	bl	8003cbe <polyvec_basemul_acc_montgomery>
  for(i=0;i<KYBER_K;i++) {
 80033a6:	f109 0901 	add.w	r9, r9, #1
    poly_tomont(&pkpv.vec[i]);
 80033aa:	4630      	mov	r0, r6
 80033ac:	f000 fb6a 	bl	8003a84 <poly_tomont>
  for(i=0;i<KYBER_K;i++) {
 80033b0:	f1b9 0f03 	cmp.w	r9, #3
 80033b4:	f506 7600 	add.w	r6, r6, #512	@ 0x200
 80033b8:	f505 65c0 	add.w	r5, r5, #1536	@ 0x600
 80033bc:	d1ed      	bne.n	800339a <indcpa_keypair+0x90>
  }

  polyvec_add(&pkpv, &pkpv, &e);
 80033be:	aa10      	add	r2, sp, #64	@ 0x40
 80033c0:	4639      	mov	r1, r7
 80033c2:	4638      	mov	r0, r7
 80033c4:	f000 fcaf 	bl	8003d26 <polyvec_add>
  polyvec_reduce(&pkpv);
 80033c8:	4638      	mov	r0, r7
 80033ca:	f000 fc9e 	bl	8003d0a <polyvec_reduce>
  polyvec_tobytes(r, sk);
 80033ce:	f50d 6144 	add.w	r1, sp, #3136	@ 0xc40
 80033d2:	4640      	mov	r0, r8
 80033d4:	f000 fc31 	bl	8003c3a <polyvec_tobytes>
  polyvec_tobytes(r, pk);
 80033d8:	4639      	mov	r1, r7
 80033da:	4620      	mov	r0, r4
 80033dc:	f000 fc2d 	bl	8003c3a <polyvec_tobytes>
    r[i+KYBER_POLYVECBYTES] = seed[i];
 80033e0:	466b      	mov	r3, sp
 80033e2:	f504 6290 	add.w	r2, r4, #1152	@ 0x480
 80033e6:	f103 0520 	add.w	r5, r3, #32
 80033ea:	461c      	mov	r4, r3
 80033ec:	cc03      	ldmia	r4!, {r0, r1}
 80033ee:	42ac      	cmp	r4, r5
 80033f0:	6010      	str	r0, [r2, #0]
 80033f2:	6051      	str	r1, [r2, #4]
 80033f4:	4623      	mov	r3, r4
 80033f6:	f102 0208 	add.w	r2, r2, #8
 80033fa:	d1f6      	bne.n	80033ea <indcpa_keypair+0xe0>

  pack_sk(sk, &skpv);
  pack_pk(pk, &pkpv, publicseed);
}
 80033fc:	f50d 5d11 	add.w	sp, sp, #9280	@ 0x2440
 8003400:	b001      	add	sp, #4
 8003402:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08003406 <indcpa_enc>:
**************************************************/
void indcpa_enc(uint8_t c[KYBER_INDCPA_BYTES],
                const uint8_t m[KYBER_INDCPA_MSGBYTES],
                const uint8_t pk[KYBER_INDCPA_PUBLICKEYBYTES],
                const uint8_t coins[KYBER_SYMBYTES])
{
 8003406:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003408:	f5ad 5d40 	sub.w	sp, sp, #12288	@ 0x3000
 800340c:	b089      	sub	sp, #36	@ 0x24
 800340e:	4615      	mov	r5, r2
 8003410:	4606      	mov	r6, r0
 8003412:	460f      	mov	r7, r1
  polyvec_frombytes(pk, packedpk);
 8003414:	f50d 6042 	add.w	r0, sp, #3104	@ 0xc20
 8003418:	4611      	mov	r1, r2
{
 800341a:	461c      	mov	r4, r3
  polyvec_frombytes(pk, packedpk);
 800341c:	f000 fc20 	bl	8003c60 <polyvec_frombytes>
    seed[i] = packedpk[i+KYBER_POLYVECBYTES];
 8003420:	f505 6390 	add.w	r3, r5, #1152	@ 0x480
 8003424:	46ec      	mov	ip, sp
 8003426:	f505 6594 	add.w	r5, r5, #1184	@ 0x4a0
 800342a:	6818      	ldr	r0, [r3, #0]
 800342c:	6859      	ldr	r1, [r3, #4]
 800342e:	4662      	mov	r2, ip
 8003430:	c203      	stmia	r2!, {r0, r1}
 8003432:	3308      	adds	r3, #8
 8003434:	42ab      	cmp	r3, r5
 8003436:	4694      	mov	ip, r2
 8003438:	d1f7      	bne.n	800342a <indcpa_enc+0x24>
  uint8_t nonce = 0;
  polyvec sp, pkpv, ep, at[KYBER_K], b;
  poly v, k, epp;

  unpack_pk(&pkpv, seed, pk);
  poly_frommsg(&k, m);
 800343a:	4639      	mov	r1, r7
 800343c:	a888      	add	r0, sp, #544	@ 0x220
 800343e:	f000 faa5 	bl	800398c <poly_frommsg>
  gen_at(at, seed);
 8003442:	4669      	mov	r1, sp
 8003444:	f50d 50f1 	add.w	r0, sp, #7712	@ 0x1e20
 8003448:	2201      	movs	r2, #1
 800344a:	f7ff ff00 	bl	800324e <gen_matrix>

  for(i=0;i<KYBER_K;i++)
    poly_getnoise_eta1(sp.vec+i, coins, nonce++);
 800344e:	4621      	mov	r1, r4
 8003450:	f50d 60c4 	add.w	r0, sp, #1568	@ 0x620
 8003454:	2200      	movs	r2, #0
 8003456:	f000 fad1 	bl	80039fc <poly_getnoise_eta1>
 800345a:	4621      	mov	r1, r4
 800345c:	f50d 6002 	add.w	r0, sp, #2080	@ 0x820
 8003460:	2201      	movs	r2, #1
 8003462:	f000 facb 	bl	80039fc <poly_getnoise_eta1>
 8003466:	4621      	mov	r1, r4
 8003468:	f50d 6022 	add.w	r0, sp, #2592	@ 0xa20
 800346c:	2202      	movs	r2, #2
 800346e:	f000 fac5 	bl	80039fc <poly_getnoise_eta1>
  for(i=0;i<KYBER_K;i++)
    poly_getnoise_eta2(ep.vec+i, coins, nonce++);
 8003472:	4621      	mov	r1, r4
 8003474:	f50d 5091 	add.w	r0, sp, #4640	@ 0x1220
 8003478:	2203      	movs	r2, #3
 800347a:	f000 face 	bl	8003a1a <poly_getnoise_eta2>
 800347e:	4621      	mov	r1, r4
 8003480:	f50d 50a1 	add.w	r0, sp, #5152	@ 0x1420
 8003484:	2204      	movs	r2, #4
 8003486:	f000 fac8 	bl	8003a1a <poly_getnoise_eta2>
 800348a:	4621      	mov	r1, r4
 800348c:	f50d 50b1 	add.w	r0, sp, #5664	@ 0x1620
 8003490:	2205      	movs	r2, #5
 8003492:	f000 fac2 	bl	8003a1a <poly_getnoise_eta2>
  poly_getnoise_eta2(&epp, coins, nonce++);
 8003496:	4621      	mov	r1, r4
 8003498:	2206      	movs	r2, #6
 800349a:	f50d 6084 	add.w	r0, sp, #1056	@ 0x420
 800349e:	f000 fabc 	bl	8003a1a <poly_getnoise_eta2>

  polyvec_ntt(&sp);
 80034a2:	f50d 60c4 	add.w	r0, sp, #1568	@ 0x620
 80034a6:	f000 fbee 	bl	8003c86 <polyvec_ntt>

  // matrix-vector multiplication
  for(i=0;i<KYBER_K;i++)
    polyvec_basemul_acc_montgomery(&b.vec[i], &at[i], &sp);
 80034aa:	f50d 62c4 	add.w	r2, sp, #1568	@ 0x620
 80034ae:	f50d 51f1 	add.w	r1, sp, #7712	@ 0x1e20
 80034b2:	f50d 50c1 	add.w	r0, sp, #6176	@ 0x1820
 80034b6:	f000 fc02 	bl	8003cbe <polyvec_basemul_acc_montgomery>
 80034ba:	f50d 5110 	add.w	r1, sp, #9216	@ 0x2400
 80034be:	f50d 62c4 	add.w	r2, sp, #1568	@ 0x620
 80034c2:	f50d 50d1 	add.w	r0, sp, #6688	@ 0x1a20
 80034c6:	3120      	adds	r1, #32
 80034c8:	f000 fbf9 	bl	8003cbe <polyvec_basemul_acc_montgomery>
 80034cc:	f50d 5128 	add.w	r1, sp, #10752	@ 0x2a00
 80034d0:	f50d 62c4 	add.w	r2, sp, #1568	@ 0x620
 80034d4:	f50d 50e1 	add.w	r0, sp, #7200	@ 0x1c20
 80034d8:	3120      	adds	r1, #32
 80034da:	f000 fbf0 	bl	8003cbe <polyvec_basemul_acc_montgomery>

  polyvec_basemul_acc_montgomery(&v, &pkpv, &sp);
 80034de:	f50d 62c4 	add.w	r2, sp, #1568	@ 0x620
 80034e2:	f50d 6142 	add.w	r1, sp, #3104	@ 0xc20
 80034e6:	a808      	add	r0, sp, #32
 80034e8:	f000 fbe9 	bl	8003cbe <polyvec_basemul_acc_montgomery>

  polyvec_invntt_tomont(&b);
 80034ec:	f50d 50c1 	add.w	r0, sp, #6176	@ 0x1820
 80034f0:	f000 fbd7 	bl	8003ca2 <polyvec_invntt_tomont>
  poly_invntt_tomont(&v);
 80034f4:	a808      	add	r0, sp, #32
 80034f6:	f000 fa9f 	bl	8003a38 <poly_invntt_tomont>

  polyvec_add(&b, &b, &ep);
 80034fa:	f50d 51c1 	add.w	r1, sp, #6176	@ 0x1820
 80034fe:	f50d 5291 	add.w	r2, sp, #4640	@ 0x1220
 8003502:	4608      	mov	r0, r1
 8003504:	f000 fc0f 	bl	8003d26 <polyvec_add>
  poly_add(&v, &v, &epp);
 8003508:	a908      	add	r1, sp, #32
 800350a:	f50d 6284 	add.w	r2, sp, #1056	@ 0x420
 800350e:	4608      	mov	r0, r1
 8003510:	f000 fadc 	bl	8003acc <poly_add>
  poly_add(&v, &v, &k);
 8003514:	a908      	add	r1, sp, #32
 8003516:	aa88      	add	r2, sp, #544	@ 0x220
 8003518:	4608      	mov	r0, r1
 800351a:	f000 fad7 	bl	8003acc <poly_add>
  polyvec_reduce(&b);
 800351e:	f50d 50c1 	add.w	r0, sp, #6176	@ 0x1820
 8003522:	f000 fbf2 	bl	8003d0a <polyvec_reduce>
  poly_reduce(&v);
 8003526:	a808      	add	r0, sp, #32
 8003528:	f000 fabb 	bl	8003aa2 <poly_reduce>
  polyvec_compress(r, b);
 800352c:	f50d 51c1 	add.w	r1, sp, #6176	@ 0x1820
 8003530:	4630      	mov	r0, r6
 8003532:	f000 fae7 	bl	8003b04 <polyvec_compress>
  poly_compress(r+KYBER_POLYVECCOMPRESSEDBYTES, v);
 8003536:	a908      	add	r1, sp, #32
 8003538:	f506 7070 	add.w	r0, r6, #960	@ 0x3c0
 800353c:	f000 f98c 	bl	8003858 <poly_compress>

  pack_ciphertext(c, &b, &v);
}
 8003540:	f50d 5d40 	add.w	sp, sp, #12288	@ 0x3000
 8003544:	b009      	add	sp, #36	@ 0x24
 8003546:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003548 <indcpa_dec>:
*                                   (of length KYBER_INDCPA_SECRETKEYBYTES)
**************************************************/
void indcpa_dec(uint8_t m[KYBER_INDCPA_MSGBYTES],
                const uint8_t c[KYBER_INDCPA_BYTES],
                const uint8_t sk[KYBER_INDCPA_SECRETKEYBYTES])
{
 8003548:	b570      	push	{r4, r5, r6, lr}
 800354a:	f5ad 5d80 	sub.w	sp, sp, #4096	@ 0x1000
 800354e:	4604      	mov	r4, r0
 8003550:	460e      	mov	r6, r1
  polyvec_decompress(b, c);
 8003552:	f50d 6080 	add.w	r0, sp, #1024	@ 0x400
{
 8003556:	4615      	mov	r5, r2
  polyvec_decompress(b, c);
 8003558:	f000 fb2e 	bl	8003bb8 <polyvec_decompress>
  poly_decompress(v, c+KYBER_POLYVECCOMPRESSEDBYTES);
 800355c:	f506 7170 	add.w	r1, r6, #960	@ 0x3c0
 8003560:	4668      	mov	r0, sp
 8003562:	f000 f9bf 	bl	80038e4 <poly_decompress>
  polyvec_frombytes(sk, packedsk);
 8003566:	4629      	mov	r1, r5
 8003568:	f50d 6020 	add.w	r0, sp, #2560	@ 0xa00
 800356c:	f000 fb78 	bl	8003c60 <polyvec_frombytes>
  poly v, mp;

  unpack_ciphertext(&b, &v, c);
  unpack_sk(&skpv, sk);

  polyvec_ntt(&b);
 8003570:	f50d 6080 	add.w	r0, sp, #1024	@ 0x400
 8003574:	f000 fb87 	bl	8003c86 <polyvec_ntt>
  polyvec_basemul_acc_montgomery(&mp, &skpv, &b);
 8003578:	f50d 6280 	add.w	r2, sp, #1024	@ 0x400
 800357c:	f50d 6120 	add.w	r1, sp, #2560	@ 0xa00
 8003580:	a880      	add	r0, sp, #512	@ 0x200
 8003582:	f000 fb9c 	bl	8003cbe <polyvec_basemul_acc_montgomery>
  poly_invntt_tomont(&mp);
 8003586:	a880      	add	r0, sp, #512	@ 0x200
 8003588:	f000 fa56 	bl	8003a38 <poly_invntt_tomont>

  poly_sub(&mp, &v, &mp);
 800358c:	aa80      	add	r2, sp, #512	@ 0x200
 800358e:	4610      	mov	r0, r2
 8003590:	4669      	mov	r1, sp
 8003592:	f000 faa9 	bl	8003ae8 <poly_sub>
  poly_reduce(&mp);
 8003596:	a880      	add	r0, sp, #512	@ 0x200
 8003598:	f000 fa83 	bl	8003aa2 <poly_reduce>

  poly_tomsg(m, &mp);
 800359c:	a980      	add	r1, sp, #512	@ 0x200
 800359e:	4620      	mov	r0, r4
 80035a0:	f000 fa0a 	bl	80039b8 <poly_tomsg>
}
 80035a4:	f50d 5d80 	add.w	sp, sp, #4096	@ 0x1000
 80035a8:	bd70      	pop	{r4, r5, r6, pc}

080035aa <crypto_kem_keypair>:
*
* Returns 0 (success)
**************************************************/
int crypto_kem_keypair(uint8_t *pk,
                       uint8_t *sk)
{
 80035aa:	b538      	push	{r3, r4, r5, lr}
 80035ac:	4605      	mov	r5, r0
 80035ae:	460c      	mov	r4, r1
  size_t i;
  indcpa_keypair(pk, sk);
 80035b0:	f7ff feab 	bl	800330a <indcpa_keypair>
  for(i=0;i<KYBER_INDCPA_PUBLICKEYBYTES;i++)
 80035b4:	1e6b      	subs	r3, r5, #1
 80035b6:	f204 427f 	addw	r2, r4, #1151	@ 0x47f
 80035ba:	f205 419f 	addw	r1, r5, #1183	@ 0x49f
    sk[i+KYBER_INDCPA_SECRETKEYBYTES] = pk[i];
 80035be:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80035c2:	f802 0f01 	strb.w	r0, [r2, #1]!
  for(i=0;i<KYBER_INDCPA_PUBLICKEYBYTES;i++)
 80035c6:	428b      	cmp	r3, r1
 80035c8:	d1f9      	bne.n	80035be <crypto_kem_keypair+0x14>
  hash_h(sk+KYBER_SECRETKEYBYTES-2*KYBER_SYMBYTES, pk, KYBER_PUBLICKEYBYTES);
 80035ca:	4629      	mov	r1, r5
 80035cc:	f504 6012 	add.w	r0, r4, #2336	@ 0x920
 80035d0:	f44f 6294 	mov.w	r2, #1184	@ 0x4a0
 80035d4:	f7ff fdbc 	bl	8003150 <pqcrystals_kyber_fips202_ref_sha3_256>
  
  /* Value z for pseudo-random output on reject */
  
  randombytes(sk+KYBER_SECRETKEYBYTES-KYBER_SYMBYTES, KYBER_SYMBYTES);
 80035d8:	2220      	movs	r2, #32
 80035da:	2300      	movs	r3, #0
 80035dc:	f504 6014 	add.w	r0, r4, #2368	@ 0x940
 80035e0:	f000 fbcf 	bl	8003d82 <randombytes>
  return 0;
}
 80035e4:	2000      	movs	r0, #0
 80035e6:	bd38      	pop	{r3, r4, r5, pc}

080035e8 <crypto_kem_enc>:
* Returns 0 (success)
**************************************************/
int crypto_kem_enc(uint8_t *ct,
                   uint8_t *ss,
                   const uint8_t *pk)
{
 80035e8:	b570      	push	{r4, r5, r6, lr}
 80035ea:	b0a0      	sub	sp, #128	@ 0x80
  uint8_t buf[2*KYBER_SYMBYTES];
  /* Will contain key, coins */
  uint8_t kr[2*KYBER_SYMBYTES];

  randombytes(buf, KYBER_SYMBYTES);
 80035ec:	2300      	movs	r3, #0
{
 80035ee:	4604      	mov	r4, r0
 80035f0:	4615      	mov	r5, r2
  randombytes(buf, KYBER_SYMBYTES);
 80035f2:	4668      	mov	r0, sp
 80035f4:	2220      	movs	r2, #32
{
 80035f6:	460e      	mov	r6, r1
  randombytes(buf, KYBER_SYMBYTES);
 80035f8:	f000 fbc3 	bl	8003d82 <randombytes>
  /* Don't release system RNG output */
  hash_h(buf, buf, KYBER_SYMBYTES);
 80035fc:	4669      	mov	r1, sp
 80035fe:	4668      	mov	r0, sp
 8003600:	2220      	movs	r2, #32
 8003602:	f7ff fda5 	bl	8003150 <pqcrystals_kyber_fips202_ref_sha3_256>

  /* Multitarget countermeasure for coins + contributory KEM */
  hash_h(buf+KYBER_SYMBYTES, pk, KYBER_PUBLICKEYBYTES);
 8003606:	4629      	mov	r1, r5
 8003608:	a808      	add	r0, sp, #32
 800360a:	f44f 6294 	mov.w	r2, #1184	@ 0x4a0
 800360e:	f7ff fd9f 	bl	8003150 <pqcrystals_kyber_fips202_ref_sha3_256>
  hash_g(kr, buf, 2*KYBER_SYMBYTES);
 8003612:	2240      	movs	r2, #64	@ 0x40
 8003614:	eb0d 0002 	add.w	r0, sp, r2
 8003618:	4669      	mov	r1, sp
 800361a:	f7ff fdc3 	bl	80031a4 <pqcrystals_kyber_fips202_ref_sha3_512>

  /* coins are in kr+KYBER_SYMBYTES */
  indcpa_enc(ct, buf, pk, kr+KYBER_SYMBYTES);
 800361e:	ab18      	add	r3, sp, #96	@ 0x60
 8003620:	462a      	mov	r2, r5
 8003622:	4669      	mov	r1, sp
 8003624:	4620      	mov	r0, r4
 8003626:	f7ff feee 	bl	8003406 <indcpa_enc>

  /* overwrite coins in kr with H(c) */
  hash_h(kr+KYBER_SYMBYTES, ct, KYBER_CIPHERTEXTBYTES);
 800362a:	4621      	mov	r1, r4
 800362c:	a818      	add	r0, sp, #96	@ 0x60
 800362e:	f44f 6288 	mov.w	r2, #1088	@ 0x440
 8003632:	f7ff fd8d 	bl	8003150 <pqcrystals_kyber_fips202_ref_sha3_256>
  /* hash concatenation of pre-k and H(c) to k */
  kdf(ss, kr, 2*KYBER_SYMBYTES);
 8003636:	2340      	movs	r3, #64	@ 0x40
 8003638:	4630      	mov	r0, r6
 800363a:	eb0d 0203 	add.w	r2, sp, r3
 800363e:	2120      	movs	r1, #32
 8003640:	f7ff fd6d 	bl	800311e <pqcrystals_kyber_fips202_ref_shake256>
  return 0;
}
 8003644:	2000      	movs	r0, #0
 8003646:	b020      	add	sp, #128	@ 0x80
 8003648:	bd70      	pop	{r4, r5, r6, pc}

0800364a <crypto_kem_dec>:
* On failure, ss will contain a pseudo-random value.
**************************************************/
int crypto_kem_dec(uint8_t *ss,
                   const uint8_t *ct,
                   const uint8_t *sk)
{
 800364a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800364c:	f2ad 4dc4 	subw	sp, sp, #1220	@ 0x4c4
 8003650:	4615      	mov	r5, r2
 8003652:	4607      	mov	r7, r0
  /* Will contain key, coins */
  uint8_t kr[2*KYBER_SYMBYTES];
  uint8_t cmp[KYBER_CIPHERTEXTBYTES];
  const uint8_t *pk = sk+KYBER_INDCPA_SECRETKEYBYTES;

  indcpa_dec(buf, ct, sk);
 8003654:	4668      	mov	r0, sp
{
 8003656:	460e      	mov	r6, r1

  /* Multitarget countermeasure for coins + contributory KEM */
  for(i=0;i<KYBER_SYMBYTES;i++)
    buf[KYBER_SYMBYTES+i] = sk[KYBER_SECRETKEYBYTES-2*KYBER_SYMBYTES+i];
 8003658:	f505 6412 	add.w	r4, r5, #2336	@ 0x920
  indcpa_dec(buf, ct, sk);
 800365c:	f7ff ff74 	bl	8003548 <indcpa_dec>
    buf[KYBER_SYMBYTES+i] = sk[KYBER_SECRETKEYBYTES-2*KYBER_SYMBYTES+i];
 8003660:	aa08      	add	r2, sp, #32
 8003662:	f505 6c14 	add.w	ip, r5, #2368	@ 0x940
 8003666:	6820      	ldr	r0, [r4, #0]
 8003668:	6861      	ldr	r1, [r4, #4]
 800366a:	4613      	mov	r3, r2
 800366c:	c303      	stmia	r3!, {r0, r1}
 800366e:	3408      	adds	r4, #8
 8003670:	4564      	cmp	r4, ip
 8003672:	461a      	mov	r2, r3
 8003674:	d1f7      	bne.n	8003666 <crypto_kem_dec+0x1c>
  hash_g(kr, buf, 2*KYBER_SYMBYTES);
 8003676:	2240      	movs	r2, #64	@ 0x40
 8003678:	eb0d 0002 	add.w	r0, sp, r2
 800367c:	4669      	mov	r1, sp
 800367e:	f7ff fd91 	bl	80031a4 <pqcrystals_kyber_fips202_ref_sha3_512>

  /* coins are in kr+KYBER_SYMBYTES */
  indcpa_enc(cmp, buf, pk, kr+KYBER_SYMBYTES);
 8003682:	ab18      	add	r3, sp, #96	@ 0x60
 8003684:	f505 6290 	add.w	r2, r5, #1152	@ 0x480
 8003688:	4669      	mov	r1, sp
 800368a:	a820      	add	r0, sp, #128	@ 0x80
 800368c:	f7ff febb 	bl	8003406 <indcpa_enc>

  fail = verify(ct, cmp, KYBER_CIPHERTEXTBYTES);
 8003690:	a920      	add	r1, sp, #128	@ 0x80
 8003692:	f44f 6288 	mov.w	r2, #1088	@ 0x440
 8003696:	4630      	mov	r0, r6
 8003698:	f000 fbe1 	bl	8003e5e <verify>

  /* overwrite coins in kr with H(c) */
  hash_h(kr+KYBER_SYMBYTES, ct, KYBER_CIPHERTEXTBYTES);
 800369c:	4631      	mov	r1, r6
  fail = verify(ct, cmp, KYBER_CIPHERTEXTBYTES);
 800369e:	4605      	mov	r5, r0
  hash_h(kr+KYBER_SYMBYTES, ct, KYBER_CIPHERTEXTBYTES);
 80036a0:	f44f 6288 	mov.w	r2, #1088	@ 0x440
 80036a4:	a818      	add	r0, sp, #96	@ 0x60
 80036a6:	f7ff fd53 	bl	8003150 <pqcrystals_kyber_fips202_ref_sha3_256>

  /* Overwrite pre-k with z on re-encryption failure */
  cmov(kr, sk+KYBER_SECRETKEYBYTES-KYBER_SYMBYTES, KYBER_SYMBYTES, fail);
 80036aa:	b2eb      	uxtb	r3, r5
 80036ac:	4621      	mov	r1, r4
 80036ae:	a810      	add	r0, sp, #64	@ 0x40
 80036b0:	2220      	movs	r2, #32
 80036b2:	f000 fbd6 	bl	8003e62 <cmov>

  /* hash concatenation of pre-k and H(c) to k */
  kdf(ss, kr, 2*KYBER_SYMBYTES);
 80036b6:	2340      	movs	r3, #64	@ 0x40
 80036b8:	4638      	mov	r0, r7
 80036ba:	eb0d 0203 	add.w	r2, sp, r3
 80036be:	2120      	movs	r1, #32
 80036c0:	f7ff fd2d 	bl	800311e <pqcrystals_kyber_fips202_ref_shake256>
  return 0;
}
 80036c4:	2000      	movs	r0, #0
 80036c6:	f20d 4dc4 	addw	sp, sp, #1220	@ 0x4c4
 80036ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080036cc <ntt>:
* Description: Inplace number-theoretic transform (NTT) in Rq.
*              input is in standard order, output is in bitreversed order
*
* Arguments:   - int16_t r[256]: pointer to input/output vector of elements of Zq
**************************************************/
void ntt(int16_t r[256]) {
 80036cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036d0:	4606      	mov	r6, r0
 80036d2:	b085      	sub	sp, #20

  k = 1;
  for(len = 128; len >= 2; len >>= 1) {
    for(start = 0; start < 256; start = j + len) {
      zeta = zetas[k++];
      for(j = start; j < start + len; j++) {
 80036d4:	f04f 0907 	mov.w	r9, #7
  k = 1;
 80036d8:	f04f 0801 	mov.w	r8, #1
  for(len = 128; len >= 2; len >>= 1) {
 80036dc:	2580      	movs	r5, #128	@ 0x80
    for(start = 0; start < 256; start = j + len) {
 80036de:	4b1f      	ldr	r3, [pc, #124]	@ (800375c <ntt+0x90>)
 80036e0:	eb03 0248 	add.w	r2, r3, r8, lsl #1
 80036e4:	1c6b      	adds	r3, r5, #1
 80036e6:	2400      	movs	r4, #0
 80036e8:	9300      	str	r3, [sp, #0]
      for(j = start; j < start + len; j++) {
 80036ea:	eb05 0a04 	add.w	sl, r5, r4
      zeta = zetas[k++];
 80036ee:	f932 1b02 	ldrsh.w	r1, [r2], #2
 80036f2:	f108 0801 	add.w	r8, r8, #1
      for(j = start; j < start + len; j++) {
 80036f6:	eb06 034a 	add.w	r3, r6, sl, lsl #1
 80036fa:	eb06 0744 	add.w	r7, r6, r4, lsl #1
 80036fe:	46a3      	mov	fp, r4
        t = fqmul(zeta, r[j + len]);
 8003700:	f9b3 0000 	ldrsh.w	r0, [r3]
 8003704:	9203      	str	r2, [sp, #12]
  return montgomery_reduce((int32_t)a*b);
 8003706:	4348      	muls	r0, r1
        t = fqmul(zeta, r[j + len]);
 8003708:	9302      	str	r3, [sp, #8]
  return montgomery_reduce((int32_t)a*b);
 800370a:	9101      	str	r1, [sp, #4]
 800370c:	f000 fb1b 	bl	8003d46 <montgomery_reduce>
        r[j + len] = r[j] - t;
 8003710:	f9b7 c000 	ldrsh.w	ip, [r7]
 8003714:	9b02      	ldr	r3, [sp, #8]
      for(j = start; j < start + len; j++) {
 8003716:	9901      	ldr	r1, [sp, #4]
 8003718:	9a03      	ldr	r2, [sp, #12]
        r[j + len] = r[j] - t;
 800371a:	b280      	uxth	r0, r0
 800371c:	ebac 0c00 	sub.w	ip, ip, r0
 8003720:	f823 cb02 	strh.w	ip, [r3], #2
        r[j] = r[j] + t;
 8003724:	f837 cb02 	ldrh.w	ip, [r7], #2
      for(j = start; j < start + len; j++) {
 8003728:	f10b 0b01 	add.w	fp, fp, #1
        r[j] = r[j] + t;
 800372c:	4460      	add	r0, ip
      for(j = start; j < start + len; j++) {
 800372e:	45d3      	cmp	fp, sl
        r[j] = r[j] + t;
 8003730:	f827 0c02 	strh.w	r0, [r7, #-2]
      for(j = start; j < start + len; j++) {
 8003734:	d3e4      	bcc.n	8003700 <ntt+0x34>
 8003736:	1c61      	adds	r1, r4, #1
 8003738:	1e6b      	subs	r3, r5, #1
 800373a:	458a      	cmp	sl, r1
 800373c:	bf38      	it	cc
 800373e:	2300      	movcc	r3, #0
 8003740:	9900      	ldr	r1, [sp, #0]
 8003742:	440c      	add	r4, r1
    for(start = 0; start < 256; start = j + len) {
 8003744:	441c      	add	r4, r3
 8003746:	2cff      	cmp	r4, #255	@ 0xff
 8003748:	d9cf      	bls.n	80036ea <ntt+0x1e>
  for(len = 128; len >= 2; len >>= 1) {
 800374a:	f1b9 0901 	subs.w	r9, r9, #1
 800374e:	ea4f 0555 	mov.w	r5, r5, lsr #1
 8003752:	d1c4      	bne.n	80036de <ntt+0x12>
      }
    }
  }
}
 8003754:	b005      	add	sp, #20
 8003756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800375a:	bf00      	nop
 800375c:	08004f50 	.word	0x08004f50

08003760 <invntt>:
*              multiplication by Montgomery factor 2^16.
*              Input is in bitreversed order, output is in standard order
*
* Arguments:   - int16_t r[256]: pointer to input/output vector of elements of Zq
**************************************************/
void invntt(int16_t r[256]) {
 8003760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003764:	4604      	mov	r4, r0
 8003766:	b085      	sub	sp, #20
  int16_t t, zeta;
  const int16_t f = 1441; // mont^2/128

  k = 127;
  for(len = 2; len <= 128; len <<= 1) {
    for(start = 0; start < 256; start = j + len) {
 8003768:	f04f 0907 	mov.w	r9, #7
  k = 127;
 800376c:	f04f 087f 	mov.w	r8, #127	@ 0x7f
  for(len = 2; len <= 128; len <<= 1) {
 8003770:	2702      	movs	r7, #2
    for(start = 0; start < 256; start = j + len) {
 8003772:	4b23      	ldr	r3, [pc, #140]	@ (8003800 <invntt+0xa0>)
 8003774:	2500      	movs	r5, #0
 8003776:	eb03 0248 	add.w	r2, r3, r8, lsl #1
      zeta = zetas[k--];
 800377a:	f932 3902 	ldrsh.w	r3, [r2], #-2
 800377e:	9301      	str	r3, [sp, #4]
 8003780:	eb05 0a07 	add.w	sl, r5, r7
 8003784:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
      for(j = start; j < start + len; j++) {
 8003788:	eb04 0b45 	add.w	fp, r4, r5, lsl #1
 800378c:	eb04 064a 	add.w	r6, r4, sl, lsl #1
 8003790:	4555      	cmp	r5, sl
 8003792:	d318      	bcc.n	80037c6 <invntt+0x66>
 8003794:	eb07 050a 	add.w	r5, r7, sl
    for(start = 0; start < 256; start = j + len) {
 8003798:	2dff      	cmp	r5, #255	@ 0xff
 800379a:	d9ee      	bls.n	800377a <invntt+0x1a>
  for(len = 2; len <= 128; len <<= 1) {
 800379c:	f1b9 0901 	subs.w	r9, r9, #1
 80037a0:	ea4f 0747 	mov.w	r7, r7, lsl #1
 80037a4:	d1e5      	bne.n	8003772 <invntt+0x12>
 80037a6:	1ea5      	subs	r5, r4, #2
  return montgomery_reduce((int32_t)a*b);
 80037a8:	f240 56a1 	movw	r6, #1441	@ 0x5a1
 80037ac:	f504 74ff 	add.w	r4, r4, #510	@ 0x1fe
 80037b0:	f935 0f02 	ldrsh.w	r0, [r5, #2]!
 80037b4:	4370      	muls	r0, r6
 80037b6:	f000 fac6 	bl	8003d46 <montgomery_reduce>
        r[j + len] = fqmul(zeta, r[j + len]);
      }
    }
  }

  for(j = 0; j < 256; j++)
 80037ba:	42a5      	cmp	r5, r4
    r[j] = fqmul(r[j], f);
 80037bc:	8028      	strh	r0, [r5, #0]
  for(j = 0; j < 256; j++)
 80037be:	d1f7      	bne.n	80037b0 <invntt+0x50>
}
 80037c0:	b005      	add	sp, #20
 80037c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        r[j] = barrett_reduce(t + r[j + len]);
 80037c6:	f8bb 1000 	ldrh.w	r1, [fp]
 80037ca:	f9b6 0000 	ldrsh.w	r0, [r6]
 80037ce:	9203      	str	r2, [sp, #12]
 80037d0:	4408      	add	r0, r1
 80037d2:	b200      	sxth	r0, r0
 80037d4:	9102      	str	r1, [sp, #8]
 80037d6:	f000 fac4 	bl	8003d62 <barrett_reduce>
 80037da:	f82b 0b02 	strh.w	r0, [fp], #2
        r[j + len] = r[j + len] - t;
 80037de:	9902      	ldr	r1, [sp, #8]
 80037e0:	f836 0b02 	ldrh.w	r0, [r6], #2
  return montgomery_reduce((int32_t)a*b);
 80037e4:	9b01      	ldr	r3, [sp, #4]
        r[j + len] = r[j + len] - t;
 80037e6:	1a40      	subs	r0, r0, r1
 80037e8:	b200      	sxth	r0, r0
 80037ea:	f826 0c02 	strh.w	r0, [r6, #-2]
  return montgomery_reduce((int32_t)a*b);
 80037ee:	4358      	muls	r0, r3
 80037f0:	f000 faa9 	bl	8003d46 <montgomery_reduce>
      for(j = start; j < start + len; j++) {
 80037f4:	3501      	adds	r5, #1
 80037f6:	9a03      	ldr	r2, [sp, #12]
        r[j + len] = fqmul(zeta, r[j + len]);
 80037f8:	f826 0c02 	strh.w	r0, [r6, #-2]
      for(j = start; j < start + len; j++) {
 80037fc:	e7c8      	b.n	8003790 <invntt+0x30>
 80037fe:	bf00      	nop
 8003800:	08004f50 	.word	0x08004f50

08003804 <basemul>:
*              - const int16_t a[2]: pointer to the first factor
*              - const int16_t b[2]: pointer to the second factor
*              - int16_t zeta: integer defining the reduction polynomial
**************************************************/
void basemul(int16_t r[2], const int16_t a[2], const int16_t b[2], int16_t zeta)
{
 8003804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003806:	4604      	mov	r4, r0
 8003808:	461f      	mov	r7, r3
  return montgomery_reduce((int32_t)a*b);
 800380a:	8848      	ldrh	r0, [r1, #2]
 800380c:	8853      	ldrh	r3, [r2, #2]
 800380e:	fb10 f003 	smulbb	r0, r0, r3
{
 8003812:	460e      	mov	r6, r1
 8003814:	4615      	mov	r5, r2
  return montgomery_reduce((int32_t)a*b);
 8003816:	f000 fa96 	bl	8003d46 <montgomery_reduce>
  r[0]  = fqmul(a[1], b[1]);
 800381a:	8020      	strh	r0, [r4, #0]
  return montgomery_reduce((int32_t)a*b);
 800381c:	4378      	muls	r0, r7
 800381e:	f000 fa92 	bl	8003d46 <montgomery_reduce>
  r[0]  = fqmul(r[0], zeta);
 8003822:	8020      	strh	r0, [r4, #0]
  return montgomery_reduce((int32_t)a*b);
 8003824:	882b      	ldrh	r3, [r5, #0]
 8003826:	8830      	ldrh	r0, [r6, #0]
 8003828:	fb10 f003 	smulbb	r0, r0, r3
 800382c:	f000 fa8b 	bl	8003d46 <montgomery_reduce>
  r[0] += fqmul(a[0], b[0]);
 8003830:	8823      	ldrh	r3, [r4, #0]
 8003832:	4418      	add	r0, r3
 8003834:	8020      	strh	r0, [r4, #0]
  return montgomery_reduce((int32_t)a*b);
 8003836:	886b      	ldrh	r3, [r5, #2]
 8003838:	8830      	ldrh	r0, [r6, #0]
 800383a:	fb10 f003 	smulbb	r0, r0, r3
 800383e:	f000 fa82 	bl	8003d46 <montgomery_reduce>
  r[1]  = fqmul(a[0], b[1]);
 8003842:	8060      	strh	r0, [r4, #2]
  return montgomery_reduce((int32_t)a*b);
 8003844:	882b      	ldrh	r3, [r5, #0]
 8003846:	8870      	ldrh	r0, [r6, #2]
 8003848:	fb10 f003 	smulbb	r0, r0, r3
 800384c:	f000 fa7b 	bl	8003d46 <montgomery_reduce>
  r[1] += fqmul(a[1], b[0]);
 8003850:	8863      	ldrh	r3, [r4, #2]
 8003852:	4418      	add	r0, r3
 8003854:	8060      	strh	r0, [r4, #2]
}
 8003856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003858 <poly_compress>:
* Arguments:   - uint8_t *r: pointer to output byte array
*                            (of length KYBER_POLYCOMPRESSEDBYTES)
*              - const poly *a: pointer to input polynomial
**************************************************/
void poly_compress(uint8_t r[KYBER_POLYCOMPRESSEDBYTES], const poly *a)
{
 8003858:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      u  = a->coeffs[8*i+j];
      u += (u >> 15) & KYBER_Q;
/*    t[j] = ((((uint16_t)u << 4) + KYBER_Q/2)/KYBER_Q) & 15; */
      d0 = u << 4;
      d0 += 1665;
      d0 *= 80635;
 800385a:	4e21      	ldr	r6, [pc, #132]	@ (80038e0 <poly_compress+0x88>)
 800385c:	460a      	mov	r2, r1
 800385e:	3004      	adds	r0, #4
 8003860:	2100      	movs	r1, #0
      u += (u >> 15) & KYBER_Q;
 8003862:	f640 5501 	movw	r5, #3329	@ 0xd01
    for(j=0;j<8;j++) {
 8003866:	466c      	mov	r4, sp
 8003868:	f102 0710 	add.w	r7, r2, #16
      u  = a->coeffs[8*i+j];
 800386c:	f932 cb02 	ldrsh.w	ip, [r2], #2
      u += (u >> 15) & KYBER_Q;
 8003870:	ea05 73ec 	and.w	r3, r5, ip, asr #31
 8003874:	4463      	add	r3, ip
      d0 = u << 4;
 8003876:	b21b      	sxth	r3, r3
 8003878:	011b      	lsls	r3, r3, #4
      d0 += 1665;
 800387a:	f203 6381 	addw	r3, r3, #1665	@ 0x681
      d0 *= 80635;
 800387e:	4373      	muls	r3, r6
      d0 >>= 28;
 8003880:	0f1b      	lsrs	r3, r3, #28
    for(j=0;j<8;j++) {
 8003882:	4297      	cmp	r7, r2
      t[j] = d0 & 0xf;
 8003884:	f804 3b01 	strb.w	r3, [r4], #1
    for(j=0;j<8;j++) {
 8003888:	d1f0      	bne.n	800386c <poly_compress+0x14>
    }

    r[0] = t[0] | (t[1] << 4);
 800388a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800388e:	f89d 3000 	ldrb.w	r3, [sp]
 8003892:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8003896:	f800 3c04 	strb.w	r3, [r0, #-4]
    r[1] = t[2] | (t[3] << 4);
 800389a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800389e:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80038a2:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80038a6:	f800 3c03 	strb.w	r3, [r0, #-3]
    r[2] = t[4] | (t[5] << 4);
 80038aa:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80038ae:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80038b2:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80038b6:	f800 3c02 	strb.w	r3, [r0, #-2]
    r[3] = t[6] | (t[7] << 4);
 80038ba:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80038be:	f89d 3006 	ldrb.w	r3, [sp, #6]
  for(i=0;i<KYBER_N/8;i++) {
 80038c2:	3108      	adds	r1, #8
    r[3] = t[6] | (t[7] << 4);
 80038c4:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  for(i=0;i<KYBER_N/8;i++) {
 80038c8:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
    r[3] = t[6] | (t[7] << 4);
 80038cc:	f800 3c01 	strb.w	r3, [r0, #-1]
  for(i=0;i<KYBER_N/8;i++) {
 80038d0:	f100 0004 	add.w	r0, r0, #4
 80038d4:	d001      	beq.n	80038da <poly_compress+0x82>
 80038d6:	463a      	mov	r2, r7
 80038d8:	e7c5      	b.n	8003866 <poly_compress+0xe>
    r += 5;
  }
#else
#error "KYBER_POLYCOMPRESSEDBYTES needs to be in {128, 160}"
#endif
}
 80038da:	b003      	add	sp, #12
 80038dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038de:	bf00      	nop
 80038e0:	00013afb 	.word	0x00013afb

080038e4 <poly_decompress>:
* Arguments:   - poly *r: pointer to output polynomial
*              - const uint8_t *a: pointer to input byte array
*                                  (of length KYBER_POLYCOMPRESSEDBYTES bytes)
**************************************************/
void poly_decompress(poly *r, const uint8_t a[KYBER_POLYCOMPRESSEDBYTES])
{
 80038e4:	b530      	push	{r4, r5, lr}
 80038e6:	3901      	subs	r1, #1
  unsigned int i;

#if (KYBER_POLYCOMPRESSEDBYTES == 128)
  for(i=0;i<KYBER_N/2;i++) {
 80038e8:	2200      	movs	r2, #0
    r->coeffs[2*i+0] = (((uint16_t)(a[0] & 15)*KYBER_Q) + 8) >> 4;
 80038ea:	f640 5401 	movw	r4, #3329	@ 0xd01
    r->coeffs[2*i+1] = (((uint16_t)(a[0] >> 4)*KYBER_Q) + 8) >> 4;
 80038ee:	1c85      	adds	r5, r0, #2
    r->coeffs[2*i+0] = (((uint16_t)(a[0] & 15)*KYBER_Q) + 8) >> 4;
 80038f0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80038f4:	f003 030f 	and.w	r3, r3, #15
 80038f8:	4363      	muls	r3, r4
 80038fa:	3308      	adds	r3, #8
 80038fc:	111b      	asrs	r3, r3, #4
 80038fe:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    r->coeffs[2*i+1] = (((uint16_t)(a[0] >> 4)*KYBER_Q) + 8) >> 4;
 8003902:	780b      	ldrb	r3, [r1, #0]
 8003904:	091b      	lsrs	r3, r3, #4
 8003906:	4363      	muls	r3, r4
 8003908:	3308      	adds	r3, #8
 800390a:	111b      	asrs	r3, r3, #4
 800390c:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  for(i=0;i<KYBER_N/2;i++) {
 8003910:	3201      	adds	r2, #1
 8003912:	2a80      	cmp	r2, #128	@ 0x80
 8003914:	d1ec      	bne.n	80038f0 <poly_decompress+0xc>
      r->coeffs[8*i+j] = ((uint32_t)(t[j] & 31)*KYBER_Q + 16) >> 5;
  }
#else
#error "KYBER_POLYCOMPRESSEDBYTES needs to be in {128, 160}"
#endif
}
 8003916:	bd30      	pop	{r4, r5, pc}

08003918 <poly_tobytes>:
* Arguments:   - uint8_t *r: pointer to output byte array
*                            (needs space for KYBER_POLYBYTES bytes)
*              - const poly *a: pointer to input polynomial
**************************************************/
void poly_tobytes(uint8_t r[KYBER_POLYBYTES], const poly *a)
{
 8003918:	b5f0      	push	{r4, r5, r6, r7, lr}
  unsigned int i;
  uint16_t t0, t1;

  for(i=0;i<KYBER_N/2;i++) {
 800391a:	2200      	movs	r2, #0
    // map to positive standard representatives
    t0  = a->coeffs[2*i];
    t0 += ((int16_t)t0 >> 15) & KYBER_Q;
 800391c:	f640 5601 	movw	r6, #3329	@ 0xd01
    t1 = a->coeffs[2*i+1];
 8003920:	1c8f      	adds	r7, r1, #2
    t0  = a->coeffs[2*i];
 8003922:	f931 3022 	ldrsh.w	r3, [r1, r2, lsl #2]
 8003926:	f831 4022 	ldrh.w	r4, [r1, r2, lsl #2]
    t1 = a->coeffs[2*i+1];
 800392a:	f937 5022 	ldrsh.w	r5, [r7, r2, lsl #2]
    t0 += ((int16_t)t0 >> 15) & KYBER_Q;
 800392e:	ea06 73e3 	and.w	r3, r6, r3, asr #31
 8003932:	441c      	add	r4, r3
    t1 = a->coeffs[2*i+1];
 8003934:	f837 3022 	ldrh.w	r3, [r7, r2, lsl #2]
    t1 += ((int16_t)t1 >> 15) & KYBER_Q;
 8003938:	ea06 75e5 	and.w	r5, r6, r5, asr #31
 800393c:	442b      	add	r3, r5
 800393e:	b29b      	uxth	r3, r3
    t0 += ((int16_t)t0 >> 15) & KYBER_Q;
 8003940:	b2a4      	uxth	r4, r4
    r[3*i+0] = (t0 >> 0);
    r[3*i+1] = (t0 >> 8) | (t1 << 4);
 8003942:	011d      	lsls	r5, r3, #4
  for(i=0;i<KYBER_N/2;i++) {
 8003944:	3201      	adds	r2, #1
    r[3*i+0] = (t0 >> 0);
 8003946:	7004      	strb	r4, [r0, #0]
    r[3*i+2] = (t1 >> 4);
 8003948:	091b      	lsrs	r3, r3, #4
    r[3*i+1] = (t0 >> 8) | (t1 << 4);
 800394a:	ea45 2414 	orr.w	r4, r5, r4, lsr #8
  for(i=0;i<KYBER_N/2;i++) {
 800394e:	2a80      	cmp	r2, #128	@ 0x80
    r[3*i+1] = (t0 >> 8) | (t1 << 4);
 8003950:	7044      	strb	r4, [r0, #1]
    r[3*i+2] = (t1 >> 4);
 8003952:	7083      	strb	r3, [r0, #2]
  for(i=0;i<KYBER_N/2;i++) {
 8003954:	f100 0003 	add.w	r0, r0, #3
 8003958:	d1e3      	bne.n	8003922 <poly_tobytes+0xa>
  }
}
 800395a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800395c <poly_frombytes>:
* Arguments:   - poly *r: pointer to output polynomial
*              - const uint8_t *a: pointer to input byte array
*                                  (of KYBER_POLYBYTES bytes)
**************************************************/
void poly_frombytes(poly *r, const uint8_t a[KYBER_POLYBYTES])
{
 800395c:	b530      	push	{r4, r5, lr}
  unsigned int i;
  for(i=0;i<KYBER_N/2;i++) {
 800395e:	2300      	movs	r3, #0
    r->coeffs[2*i]   = ((a[3*i+0] >> 0) | ((uint16_t)a[3*i+1] << 8)) & 0xFFF;
    r->coeffs[2*i+1] = ((a[3*i+1] >> 4) | ((uint16_t)a[3*i+2] << 4)) & 0xFFF;
 8003960:	1c84      	adds	r4, r0, #2
    r->coeffs[2*i]   = ((a[3*i+0] >> 0) | ((uint16_t)a[3*i+1] << 8)) & 0xFFF;
 8003962:	784d      	ldrb	r5, [r1, #1]
 8003964:	780a      	ldrb	r2, [r1, #0]
 8003966:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 800396a:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800396e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    r->coeffs[2*i+1] = ((a[3*i+1] >> 4) | ((uint16_t)a[3*i+2] << 4)) & 0xFFF;
 8003972:	788a      	ldrb	r2, [r1, #2]
 8003974:	784d      	ldrb	r5, [r1, #1]
 8003976:	0112      	lsls	r2, r2, #4
 8003978:	ea42 1215 	orr.w	r2, r2, r5, lsr #4
 800397c:	f824 2023 	strh.w	r2, [r4, r3, lsl #2]
  for(i=0;i<KYBER_N/2;i++) {
 8003980:	3301      	adds	r3, #1
 8003982:	2b80      	cmp	r3, #128	@ 0x80
 8003984:	f101 0103 	add.w	r1, r1, #3
 8003988:	d1eb      	bne.n	8003962 <poly_frombytes+0x6>
  }
}
 800398a:	bd30      	pop	{r4, r5, pc}

0800398c <poly_frommsg>:
*
* Arguments:   - poly *r: pointer to output polynomial
*              - const uint8_t *msg: pointer to input message
**************************************************/
void poly_frommsg(poly *r, const uint8_t msg[KYBER_INDCPA_MSGBYTES])
{
 800398c:	b570      	push	{r4, r5, r6, lr}

#if (KYBER_INDCPA_MSGBYTES != KYBER_N/8)
#error "KYBER_INDCPA_MSGBYTES must be equal to KYBER_N/8 bytes!"
#endif

  for(i=0;i<KYBER_N/8;i++) {
 800398e:	2200      	movs	r2, #0
    for(j=0;j<8;j++) {
      mask = -(int16_t)((msg[i] >> j)&1);
      r->coeffs[8*i+j] = mask & ((KYBER_Q+1)/2);
 8003990:	f240 6681 	movw	r6, #1665	@ 0x681
    for(j=0;j<8;j++) {
 8003994:	eb00 1502 	add.w	r5, r0, r2, lsl #4
 8003998:	2400      	movs	r4, #0
      mask = -(int16_t)((msg[i] >> j)&1);
 800399a:	5c8b      	ldrb	r3, [r1, r2]
 800399c:	4123      	asrs	r3, r4
 800399e:	f343 0300 	sbfx	r3, r3, #0, #1
    for(j=0;j<8;j++) {
 80039a2:	3401      	adds	r4, #1
      r->coeffs[8*i+j] = mask & ((KYBER_Q+1)/2);
 80039a4:	4033      	ands	r3, r6
    for(j=0;j<8;j++) {
 80039a6:	2c08      	cmp	r4, #8
      r->coeffs[8*i+j] = mask & ((KYBER_Q+1)/2);
 80039a8:	f825 3b02 	strh.w	r3, [r5], #2
    for(j=0;j<8;j++) {
 80039ac:	d1f5      	bne.n	800399a <poly_frommsg+0xe>
  for(i=0;i<KYBER_N/8;i++) {
 80039ae:	3201      	adds	r2, #1
 80039b0:	2a20      	cmp	r2, #32
 80039b2:	d1ef      	bne.n	8003994 <poly_frommsg+0x8>
    }
  }
}
 80039b4:	bd70      	pop	{r4, r5, r6, pc}
 80039b6:	0000      	movs	r0, r0

080039b8 <poly_tomsg>:
*
* Arguments:   - uint8_t *msg: pointer to output message
*              - const poly *a: pointer to input polynomial
**************************************************/
void poly_tomsg(uint8_t msg[KYBER_INDCPA_MSGBYTES], const poly *a)
{
 80039b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039ba:	2200      	movs	r2, #0
      t  = a->coeffs[8*i+j];
      // t += ((int16_t)t >> 15) & KYBER_Q;
      // t  = (((t << 1) + KYBER_Q/2)/KYBER_Q) & 1;
      t <<= 1;
      t += 1665;
      t *= 80635;
 80039bc:	4f0e      	ldr	r7, [pc, #56]	@ (80039f8 <poly_tomsg+0x40>)
 80039be:	3801      	subs	r0, #1
    msg[i] = 0;
 80039c0:	4616      	mov	r6, r2
 80039c2:	f800 6f01 	strb.w	r6, [r0, #1]!
    for(j=0;j<8;j++) {
 80039c6:	eb01 0542 	add.w	r5, r1, r2, lsl #1
 80039ca:	2400      	movs	r4, #0
      t  = a->coeffs[8*i+j];
 80039cc:	f935 3b02 	ldrsh.w	r3, [r5], #2
      t >>= 28;
      t &= 1;
      msg[i] |= t << j;
 80039d0:	f890 c000 	ldrb.w	ip, [r0]
      t <<= 1;
 80039d4:	005b      	lsls	r3, r3, #1
      t += 1665;
 80039d6:	f203 6381 	addw	r3, r3, #1665	@ 0x681
      t *= 80635;
 80039da:	437b      	muls	r3, r7
      t &= 1;
 80039dc:	f3c3 7300 	ubfx	r3, r3, #28, #1
      msg[i] |= t << j;
 80039e0:	40a3      	lsls	r3, r4
    for(j=0;j<8;j++) {
 80039e2:	3401      	adds	r4, #1
      msg[i] |= t << j;
 80039e4:	ea43 030c 	orr.w	r3, r3, ip
    for(j=0;j<8;j++) {
 80039e8:	2c08      	cmp	r4, #8
      msg[i] |= t << j;
 80039ea:	7003      	strb	r3, [r0, #0]
    for(j=0;j<8;j++) {
 80039ec:	d1ee      	bne.n	80039cc <poly_tomsg+0x14>
  for(i=0;i<KYBER_N/8;i++) {
 80039ee:	3208      	adds	r2, #8
 80039f0:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 80039f4:	d1e5      	bne.n	80039c2 <poly_tomsg+0xa>
    }
  }
}
 80039f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039f8:	00013afb 	.word	0x00013afb

080039fc <poly_getnoise_eta1>:
*              - const uint8_t *seed: pointer to input seed
*                                     (of length KYBER_SYMBYTES bytes)
*              - uint8_t nonce: one-byte input nonce
**************************************************/
void poly_getnoise_eta1(poly *r, const uint8_t seed[KYBER_SYMBYTES], uint8_t nonce)
{
 80039fc:	b510      	push	{r4, lr}
 80039fe:	b0a0      	sub	sp, #128	@ 0x80
 8003a00:	4613      	mov	r3, r2
 8003a02:	4604      	mov	r4, r0
  uint8_t buf[KYBER_ETA1*KYBER_N/4];
  prf(buf, sizeof(buf), seed, nonce);
 8003a04:	460a      	mov	r2, r1
 8003a06:	4668      	mov	r0, sp
 8003a08:	2180      	movs	r1, #128	@ 0x80
 8003a0a:	f000 fa0f 	bl	8003e2c <kyber_shake256_prf>
  poly_cbd_eta1(r, buf);
 8003a0e:	4669      	mov	r1, sp
 8003a10:	4620      	mov	r0, r4
 8003a12:	f7fe fb71 	bl	80020f8 <poly_cbd_eta1>
}
 8003a16:	b020      	add	sp, #128	@ 0x80
 8003a18:	bd10      	pop	{r4, pc}

08003a1a <poly_getnoise_eta2>:
*              - const uint8_t *seed: pointer to input seed
*                                     (of length KYBER_SYMBYTES bytes)
*              - uint8_t nonce: one-byte input nonce
**************************************************/
void poly_getnoise_eta2(poly *r, const uint8_t seed[KYBER_SYMBYTES], uint8_t nonce)
{
 8003a1a:	b510      	push	{r4, lr}
 8003a1c:	b0a0      	sub	sp, #128	@ 0x80
 8003a1e:	4613      	mov	r3, r2
 8003a20:	4604      	mov	r4, r0
  uint8_t buf[KYBER_ETA2*KYBER_N/4];
  prf(buf, sizeof(buf), seed, nonce);
 8003a22:	460a      	mov	r2, r1
 8003a24:	4668      	mov	r0, sp
 8003a26:	2180      	movs	r1, #128	@ 0x80
 8003a28:	f000 fa00 	bl	8003e2c <kyber_shake256_prf>
  poly_cbd_eta2(r, buf);
 8003a2c:	4669      	mov	r1, sp
 8003a2e:	4620      	mov	r0, r4
 8003a30:	f7fe fb64 	bl	80020fc <poly_cbd_eta2>
}
 8003a34:	b020      	add	sp, #128	@ 0x80
 8003a36:	bd10      	pop	{r4, pc}

08003a38 <poly_invntt_tomont>:
*
* Arguments:   - uint16_t *a: pointer to in/output polynomial
**************************************************/
void poly_invntt_tomont(poly *r)
{
  invntt(r->coeffs);
 8003a38:	f7ff be92 	b.w	8003760 <invntt>

08003a3c <poly_basemul_montgomery>:
* Arguments:   - poly *r: pointer to output polynomial
*              - const poly *a: pointer to first input polynomial
*              - const poly *b: pointer to second input polynomial
**************************************************/
void poly_basemul_montgomery(poly *r, const poly *a, const poly *b)
{
 8003a3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a40:	4f0f      	ldr	r7, [pc, #60]	@ (8003a80 <poly_basemul_montgomery+0x44>)
 8003a42:	1d06      	adds	r6, r0, #4
 8003a44:	1d0d      	adds	r5, r1, #4
 8003a46:	1d14      	adds	r4, r2, #4
 8003a48:	f107 0980 	add.w	r9, r7, #128	@ 0x80
  unsigned int i;
  for(i=0;i<KYBER_N/4;i++) {
    basemul(&r->coeffs[4*i], &a->coeffs[4*i], &b->coeffs[4*i], zetas[64+i]);
 8003a4c:	f937 8f02 	ldrsh.w	r8, [r7, #2]!
 8003a50:	1f22      	subs	r2, r4, #4
 8003a52:	1f29      	subs	r1, r5, #4
 8003a54:	1f30      	subs	r0, r6, #4
 8003a56:	4643      	mov	r3, r8
 8003a58:	f7ff fed4 	bl	8003804 <basemul>
    basemul(&r->coeffs[4*i+2], &a->coeffs[4*i+2], &b->coeffs[4*i+2], -zetas[64+i]);
 8003a5c:	f1c8 0300 	rsb	r3, r8, #0
 8003a60:	4622      	mov	r2, r4
 8003a62:	4629      	mov	r1, r5
 8003a64:	4630      	mov	r0, r6
 8003a66:	b21b      	sxth	r3, r3
 8003a68:	f7ff fecc 	bl	8003804 <basemul>
  for(i=0;i<KYBER_N/4;i++) {
 8003a6c:	454f      	cmp	r7, r9
 8003a6e:	f106 0608 	add.w	r6, r6, #8
 8003a72:	f105 0508 	add.w	r5, r5, #8
 8003a76:	f104 0408 	add.w	r4, r4, #8
 8003a7a:	d1e7      	bne.n	8003a4c <poly_basemul_montgomery+0x10>
  }
}
 8003a7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a80:	08004fce 	.word	0x08004fce

08003a84 <poly_tomont>:
*              from normal domain to Montgomery domain
*
* Arguments:   - poly *r: pointer to input/output polynomial
**************************************************/
void poly_tomont(poly *r)
{
 8003a84:	b570      	push	{r4, r5, r6, lr}
 8003a86:	1e85      	subs	r5, r0, #2
 8003a88:	f500 74ff 	add.w	r4, r0, #510	@ 0x1fe
  unsigned int i;
  const int16_t f = (1ULL << 32) % KYBER_Q;
  for(i=0;i<KYBER_N;i++)
    r->coeffs[i] = montgomery_reduce((int32_t)r->coeffs[i]*f);
 8003a8c:	f240 5649 	movw	r6, #1353	@ 0x549
 8003a90:	f935 0f02 	ldrsh.w	r0, [r5, #2]!
 8003a94:	4370      	muls	r0, r6
 8003a96:	f000 f956 	bl	8003d46 <montgomery_reduce>
  for(i=0;i<KYBER_N;i++)
 8003a9a:	42a5      	cmp	r5, r4
    r->coeffs[i] = montgomery_reduce((int32_t)r->coeffs[i]*f);
 8003a9c:	8028      	strh	r0, [r5, #0]
  for(i=0;i<KYBER_N;i++)
 8003a9e:	d1f7      	bne.n	8003a90 <poly_tomont+0xc>
}
 8003aa0:	bd70      	pop	{r4, r5, r6, pc}

08003aa2 <poly_reduce>:
*              for details of the Barrett reduction see comments in reduce.c
*
* Arguments:   - poly *r: pointer to input/output polynomial
**************************************************/
void poly_reduce(poly *r)
{
 8003aa2:	b538      	push	{r3, r4, r5, lr}
 8003aa4:	1e85      	subs	r5, r0, #2
 8003aa6:	f500 74ff 	add.w	r4, r0, #510	@ 0x1fe
  unsigned int i;
  for(i=0;i<KYBER_N;i++)
    r->coeffs[i] = barrett_reduce(r->coeffs[i]);
 8003aaa:	f935 0f02 	ldrsh.w	r0, [r5, #2]!
 8003aae:	f000 f958 	bl	8003d62 <barrett_reduce>
  for(i=0;i<KYBER_N;i++)
 8003ab2:	42a5      	cmp	r5, r4
    r->coeffs[i] = barrett_reduce(r->coeffs[i]);
 8003ab4:	8028      	strh	r0, [r5, #0]
  for(i=0;i<KYBER_N;i++)
 8003ab6:	d1f8      	bne.n	8003aaa <poly_reduce+0x8>
}
 8003ab8:	bd38      	pop	{r3, r4, r5, pc}

08003aba <poly_ntt>:
{
 8003aba:	b510      	push	{r4, lr}
 8003abc:	4604      	mov	r4, r0
  ntt(r->coeffs);
 8003abe:	f7ff fe05 	bl	80036cc <ntt>
  poly_reduce(r);
 8003ac2:	4620      	mov	r0, r4
}
 8003ac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  poly_reduce(r);
 8003ac8:	f7ff bfeb 	b.w	8003aa2 <poly_reduce>

08003acc <poly_add>:
* Arguments: - poly *r: pointer to output polynomial
*            - const poly *a: pointer to first input polynomial
*            - const poly *b: pointer to second input polynomial
**************************************************/
void poly_add(poly *r, const poly *a, const poly *b)
{
 8003acc:	b530      	push	{r4, r5, lr}
  unsigned int i;
  for(i=0;i<KYBER_N;i++)
 8003ace:	2300      	movs	r3, #0
    r->coeffs[i] = a->coeffs[i] + b->coeffs[i];
 8003ad0:	f831 4013 	ldrh.w	r4, [r1, r3, lsl #1]
 8003ad4:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
 8003ad8:	442c      	add	r4, r5
 8003ada:	f820 4013 	strh.w	r4, [r0, r3, lsl #1]
  for(i=0;i<KYBER_N;i++)
 8003ade:	3301      	adds	r3, #1
 8003ae0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ae4:	d1f4      	bne.n	8003ad0 <poly_add+0x4>
}
 8003ae6:	bd30      	pop	{r4, r5, pc}

08003ae8 <poly_sub>:
* Arguments: - poly *r:       pointer to output polynomial
*            - const poly *a: pointer to first input polynomial
*            - const poly *b: pointer to second input polynomial
**************************************************/
void poly_sub(poly *r, const poly *a, const poly *b)
{
 8003ae8:	b530      	push	{r4, r5, lr}
  unsigned int i;
  for(i=0;i<KYBER_N;i++)
 8003aea:	2300      	movs	r3, #0
    r->coeffs[i] = a->coeffs[i] - b->coeffs[i];
 8003aec:	f831 4013 	ldrh.w	r4, [r1, r3, lsl #1]
 8003af0:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
 8003af4:	1b64      	subs	r4, r4, r5
 8003af6:	f820 4013 	strh.w	r4, [r0, r3, lsl #1]
  for(i=0;i<KYBER_N;i++)
 8003afa:	3301      	adds	r3, #1
 8003afc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b00:	d1f4      	bne.n	8003aec <poly_sub+0x4>
}
 8003b02:	bd30      	pop	{r4, r5, pc}

08003b04 <polyvec_compress>:
* Arguments:   - uint8_t *r: pointer to output byte array
*                            (needs space for KYBER_POLYVECCOMPRESSEDBYTES)
*              - const polyvec *a: pointer to input vector of polynomials
**************************************************/
void polyvec_compress(uint8_t r[KYBER_POLYVECCOMPRESSEDBYTES], const polyvec *a)
{
 8003b04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b08:	468b      	mov	fp, r1
  uint16_t t[4];
  for(i=0;i<KYBER_K;i++) {
    for(j=0;j<KYBER_N/4;j++) {
      for(k=0;k<4;k++) {
        t[k]  = a->vec[i].coeffs[4*j+k];
        t[k] += ((int16_t)t[k] >> 15) & KYBER_Q;
 8003b0a:	f640 5901 	movw	r9, #3329	@ 0xd01
      for(k=0;k<4;k++) {
 8003b0e:	2100      	movs	r1, #0
    for(j=0;j<KYBER_N/4;j++) {
 8003b10:	1d42      	adds	r2, r0, #5
 8003b12:	eb0b 05c1 	add.w	r5, fp, r1, lsl #3
      for(k=0;k<4;k++) {
 8003b16:	2400      	movs	r4, #0
 8003b18:	e03f      	b.n	8003b9a <polyvec_compress+0x96>
        t[k]  = a->vec[i].coeffs[4*j+k];
 8003b1a:	f93e ab02 	ldrsh.w	sl, [lr], #2
        t[k] += ((int16_t)t[k] >> 15) & KYBER_Q;
 8003b1e:	ea09 73ea 	and.w	r3, r9, sl, asr #31
 8003b22:	4453      	add	r3, sl
/*      t[k]  = ((((uint32_t)t[k] << 10) + KYBER_Q/2)/ KYBER_Q) & 0x3ff; */
        d0 = t[k];
 8003b24:	b29b      	uxth	r3, r3
        d0 <<= 10;
        d0 += 1665;
 8003b26:	f240 6681 	movw	r6, #1665	@ 0x681
        d0 <<= 10;
 8003b2a:	029b      	lsls	r3, r3, #10
        d0 += 1665;
 8003b2c:	199b      	adds	r3, r3, r6
        d0 *= 1290167;
 8003b2e:	4e21      	ldr	r6, [pc, #132]	@ (8003bb4 <polyvec_compress+0xb0>)
        d0 += 1665;
 8003b30:	bf2c      	ite	cs
 8003b32:	f04f 0a01 	movcs.w	sl, #1
 8003b36:	f04f 0a00 	movcc.w	sl, #0
        d0 *= 1290167;
 8003b3a:	fba3 c306 	umull	ip, r3, r3, r6
 8003b3e:	fb06 330a 	mla	r3, r6, sl, r3
      for(k=0;k<4;k++) {
 8003b42:	3701      	adds	r7, #1
        d0 >>= 32;
        t[k] = d0 & 0x3ff;
 8003b44:	f3c3 0309 	ubfx	r3, r3, #0, #10
      for(k=0;k<4;k++) {
 8003b48:	2f04      	cmp	r7, #4
        t[k] = d0 & 0x3ff;
 8003b4a:	f828 3b02 	strh.w	r3, [r8], #2
      for(k=0;k<4;k++) {
 8003b4e:	d1e4      	bne.n	8003b1a <polyvec_compress+0x16>
      }

      r[0] = (t[0] >> 0);
      r[1] = (t[0] >> 8) | (t[1] << 2);
 8003b50:	f8bd 7002 	ldrh.w	r7, [sp, #2]
      r[0] = (t[0] >> 0);
 8003b54:	f8bd e000 	ldrh.w	lr, [sp]
 8003b58:	f802 ec05 	strb.w	lr, [r2, #-5]
      r[1] = (t[0] >> 8) | (t[1] << 2);
 8003b5c:	00bb      	lsls	r3, r7, #2
 8003b5e:	ea43 231e 	orr.w	r3, r3, lr, lsr #8
      r[2] = (t[1] >> 6) | (t[2] << 4);
 8003b62:	f8bd e004 	ldrh.w	lr, [sp, #4]
      r[1] = (t[0] >> 8) | (t[1] << 2);
 8003b66:	f802 3c04 	strb.w	r3, [r2, #-4]
      r[2] = (t[1] >> 6) | (t[2] << 4);
 8003b6a:	ea4f 130e 	mov.w	r3, lr, lsl #4
 8003b6e:	ea43 1397 	orr.w	r3, r3, r7, lsr #6
 8003b72:	f802 3c03 	strb.w	r3, [r2, #-3]
      r[3] = (t[2] >> 4) | (t[3] << 6);
 8003b76:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    for(j=0;j<KYBER_N/4;j++) {
 8003b7a:	3404      	adds	r4, #4
      r[3] = (t[2] >> 4) | (t[3] << 6);
 8003b7c:	019f      	lsls	r7, r3, #6
 8003b7e:	ea47 171e 	orr.w	r7, r7, lr, lsr #4
      r[4] = (t[3] >> 2);
 8003b82:	089b      	lsrs	r3, r3, #2
    for(j=0;j<KYBER_N/4;j++) {
 8003b84:	f5b4 7f80 	cmp.w	r4, #256	@ 0x100
      r[3] = (t[2] >> 4) | (t[3] << 6);
 8003b88:	f802 7c02 	strb.w	r7, [r2, #-2]
      r[4] = (t[3] >> 2);
 8003b8c:	f802 3c01 	strb.w	r3, [r2, #-1]
    for(j=0;j<KYBER_N/4;j++) {
 8003b90:	f105 0508 	add.w	r5, r5, #8
 8003b94:	f102 0205 	add.w	r2, r2, #5
 8003b98:	d003      	beq.n	8003ba2 <polyvec_compress+0x9e>
      for(k=0;k<4;k++) {
 8003b9a:	46e8      	mov	r8, sp
{
 8003b9c:	46ae      	mov	lr, r5
      for(k=0;k<4;k++) {
 8003b9e:	2700      	movs	r7, #0
 8003ba0:	e7bb      	b.n	8003b1a <polyvec_compress+0x16>
  for(i=0;i<KYBER_K;i++) {
 8003ba2:	3140      	adds	r1, #64	@ 0x40
 8003ba4:	29c0      	cmp	r1, #192	@ 0xc0
 8003ba6:	f500 70a0 	add.w	r0, r0, #320	@ 0x140
 8003baa:	d1b1      	bne.n	8003b10 <polyvec_compress+0xc>
    }
  }
#else
#error "KYBER_POLYVECCOMPRESSEDBYTES needs to be in {320*KYBER_K, 352*KYBER_K}"
#endif
}
 8003bac:	b003      	add	sp, #12
 8003bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bb2:	bf00      	nop
 8003bb4:	0013afb7 	.word	0x0013afb7

08003bb8 <polyvec_decompress>:
* Arguments:   - polyvec *r:       pointer to output vector of polynomials
*              - const uint8_t *a: pointer to input byte array
*                                  (of length KYBER_POLYVECCOMPRESSEDBYTES)
**************************************************/
void polyvec_decompress(polyvec *r, const uint8_t a[KYBER_POLYVECCOMPRESSEDBYTES])
{
 8003bb8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
      t[1] = (a[1] >> 2) | ((uint16_t)a[2] << 6);
      t[2] = (a[2] >> 4) | ((uint16_t)a[3] << 4);
      t[3] = (a[3] >> 6) | ((uint16_t)a[4] << 2);
      a += 5;

      for(k=0;k<4;k++)
 8003bbc:	2400      	movs	r4, #0
        r->vec[i].coeffs[4*j+k] = ((uint32_t)(t[k] & 0x3FF)*KYBER_Q + 512) >> 10;
 8003bbe:	f640 5801 	movw	r8, #3329	@ 0xd01
 8003bc2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8003bc6:	440b      	add	r3, r1
    for(j=0;j<KYBER_N/4;j++) {
 8003bc8:	eb00 06c4 	add.w	r6, r0, r4, lsl #3
{
 8003bcc:	2500      	movs	r5, #0
      t[1] = (a[1] >> 2) | ((uint16_t)a[2] << 6);
 8003bce:	f893 c002 	ldrb.w	ip, [r3, #2]
      t[0] = (a[0] >> 0) | ((uint16_t)a[1] << 8);
 8003bd2:	785f      	ldrb	r7, [r3, #1]
 8003bd4:	881a      	ldrh	r2, [r3, #0]
 8003bd6:	f8ad 2000 	strh.w	r2, [sp]
      t[1] = (a[1] >> 2) | ((uint16_t)a[2] << 6);
 8003bda:	ea4f 128c 	mov.w	r2, ip, lsl #6
 8003bde:	ea42 0297 	orr.w	r2, r2, r7, lsr #2
 8003be2:	f8ad 2002 	strh.w	r2, [sp, #2]
      t[2] = (a[2] >> 4) | ((uint16_t)a[3] << 4);
 8003be6:	78da      	ldrb	r2, [r3, #3]
 8003be8:	0117      	lsls	r7, r2, #4
 8003bea:	ea47 171c 	orr.w	r7, r7, ip, lsr #4
 8003bee:	f8ad 7004 	strh.w	r7, [sp, #4]
      t[3] = (a[3] >> 6) | ((uint16_t)a[4] << 2);
 8003bf2:	791f      	ldrb	r7, [r3, #4]
 8003bf4:	0992      	lsrs	r2, r2, #6
 8003bf6:	ea42 0287 	orr.w	r2, r2, r7, lsl #2
 8003bfa:	f8ad 2006 	strh.w	r2, [sp, #6]
      a += 5;
 8003bfe:	3305      	adds	r3, #5
      for(k=0;k<4;k++)
 8003c00:	46ee      	mov	lr, sp
      a += 5;
 8003c02:	46b4      	mov	ip, r6
      for(k=0;k<4;k++)
 8003c04:	2700      	movs	r7, #0
        r->vec[i].coeffs[4*j+k] = ((uint32_t)(t[k] & 0x3FF)*KYBER_Q + 512) >> 10;
 8003c06:	f83e 2b02 	ldrh.w	r2, [lr], #2
 8003c0a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003c0e:	fb08 f202 	mul.w	r2, r8, r2
 8003c12:	f502 7200 	add.w	r2, r2, #512	@ 0x200
      for(k=0;k<4;k++)
 8003c16:	3701      	adds	r7, #1
        r->vec[i].coeffs[4*j+k] = ((uint32_t)(t[k] & 0x3FF)*KYBER_Q + 512) >> 10;
 8003c18:	0a92      	lsrs	r2, r2, #10
      for(k=0;k<4;k++)
 8003c1a:	2f04      	cmp	r7, #4
        r->vec[i].coeffs[4*j+k] = ((uint32_t)(t[k] & 0x3FF)*KYBER_Q + 512) >> 10;
 8003c1c:	f82c 2b02 	strh.w	r2, [ip], #2
      for(k=0;k<4;k++)
 8003c20:	d1f1      	bne.n	8003c06 <polyvec_decompress+0x4e>
    for(j=0;j<KYBER_N/4;j++) {
 8003c22:	3504      	adds	r5, #4
 8003c24:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8003c28:	f106 0608 	add.w	r6, r6, #8
 8003c2c:	d1cf      	bne.n	8003bce <polyvec_decompress+0x16>
  for(i=0;i<KYBER_K;i++) {
 8003c2e:	3440      	adds	r4, #64	@ 0x40
 8003c30:	2cc0      	cmp	r4, #192	@ 0xc0
 8003c32:	d1c6      	bne.n	8003bc2 <polyvec_decompress+0xa>
    }
  }
#else
#error "KYBER_POLYVECCOMPRESSEDBYTES needs to be in {320*KYBER_K, 352*KYBER_K}"
#endif
}
 8003c34:	b002      	add	sp, #8
 8003c36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003c3a <polyvec_tobytes>:
* Arguments:   - uint8_t *r: pointer to output byte array
*                            (needs space for KYBER_POLYVECBYTES)
*              - const polyvec *a: pointer to input vector of polynomials
**************************************************/
void polyvec_tobytes(uint8_t r[KYBER_POLYVECBYTES], const polyvec *a)
{
 8003c3a:	b538      	push	{r3, r4, r5, lr}
 8003c3c:	4604      	mov	r4, r0
 8003c3e:	460d      	mov	r5, r1
  unsigned int i;
  for(i=0;i<KYBER_K;i++)
    poly_tobytes(r+i*KYBER_POLYBYTES, &a->vec[i]);
 8003c40:	f7ff fe6a 	bl	8003918 <poly_tobytes>
 8003c44:	f505 7100 	add.w	r1, r5, #512	@ 0x200
 8003c48:	f504 70c0 	add.w	r0, r4, #384	@ 0x180
 8003c4c:	f7ff fe64 	bl	8003918 <poly_tobytes>
 8003c50:	f505 6180 	add.w	r1, r5, #1024	@ 0x400
 8003c54:	f504 7040 	add.w	r0, r4, #768	@ 0x300
}
 8003c58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    poly_tobytes(r+i*KYBER_POLYBYTES, &a->vec[i]);
 8003c5c:	f7ff be5c 	b.w	8003918 <poly_tobytes>

08003c60 <polyvec_frombytes>:
* Arguments:   - uint8_t *r:       pointer to output byte array
*              - const polyvec *a: pointer to input vector of polynomials
*                                  (of length KYBER_POLYVECBYTES)
**************************************************/
void polyvec_frombytes(polyvec *r, const uint8_t a[KYBER_POLYVECBYTES])
{
 8003c60:	b538      	push	{r3, r4, r5, lr}
 8003c62:	4604      	mov	r4, r0
 8003c64:	460d      	mov	r5, r1
  unsigned int i;
  for(i=0;i<KYBER_K;i++)
    poly_frombytes(&r->vec[i], a+i*KYBER_POLYBYTES);
 8003c66:	f7ff fe79 	bl	800395c <poly_frombytes>
 8003c6a:	f505 71c0 	add.w	r1, r5, #384	@ 0x180
 8003c6e:	f504 7000 	add.w	r0, r4, #512	@ 0x200
 8003c72:	f7ff fe73 	bl	800395c <poly_frombytes>
 8003c76:	f505 7140 	add.w	r1, r5, #768	@ 0x300
 8003c7a:	f504 6080 	add.w	r0, r4, #1024	@ 0x400
}
 8003c7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    poly_frombytes(&r->vec[i], a+i*KYBER_POLYBYTES);
 8003c82:	f7ff be6b 	b.w	800395c <poly_frombytes>

08003c86 <polyvec_ntt>:
* Description: Apply forward NTT to all elements of a vector of polynomials
*
* Arguments:   - polyvec *r: pointer to in/output vector of polynomials
**************************************************/
void polyvec_ntt(polyvec *r)
{
 8003c86:	b510      	push	{r4, lr}
 8003c88:	4604      	mov	r4, r0
  unsigned int i;
  for(i=0;i<KYBER_K;i++)
    poly_ntt(&r->vec[i]);
 8003c8a:	f7ff ff16 	bl	8003aba <poly_ntt>
 8003c8e:	f504 7000 	add.w	r0, r4, #512	@ 0x200
 8003c92:	f7ff ff12 	bl	8003aba <poly_ntt>
 8003c96:	f504 6080 	add.w	r0, r4, #1024	@ 0x400
}
 8003c9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    poly_ntt(&r->vec[i]);
 8003c9e:	f7ff bf0c 	b.w	8003aba <poly_ntt>

08003ca2 <polyvec_invntt_tomont>:
*              and multiply by Montgomery factor 2^16
*
* Arguments:   - polyvec *r: pointer to in/output vector of polynomials
**************************************************/
void polyvec_invntt_tomont(polyvec *r)
{
 8003ca2:	b510      	push	{r4, lr}
 8003ca4:	4604      	mov	r4, r0
  unsigned int i;
  for(i=0;i<KYBER_K;i++)
    poly_invntt_tomont(&r->vec[i]);
 8003ca6:	f7ff fec7 	bl	8003a38 <poly_invntt_tomont>
 8003caa:	f504 7000 	add.w	r0, r4, #512	@ 0x200
 8003cae:	f7ff fec3 	bl	8003a38 <poly_invntt_tomont>
 8003cb2:	f504 6080 	add.w	r0, r4, #1024	@ 0x400
}
 8003cb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    poly_invntt_tomont(&r->vec[i]);
 8003cba:	f7ff bebd 	b.w	8003a38 <poly_invntt_tomont>

08003cbe <polyvec_basemul_acc_montgomery>:
* Arguments: - poly *r: pointer to output polynomial
*            - const polyvec *a: pointer to first input vector of polynomials
*            - const polyvec *b: pointer to second input vector of polynomials
**************************************************/
void polyvec_basemul_acc_montgomery(poly *r, const polyvec *a, const polyvec *b)
{
 8003cbe:	b570      	push	{r4, r5, r6, lr}
 8003cc0:	460d      	mov	r5, r1
 8003cc2:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8003cc6:	4616      	mov	r6, r2
 8003cc8:	4604      	mov	r4, r0
  unsigned int i;
  poly t;

  poly_basemul_montgomery(r, &a->vec[0], &b->vec[0]);
 8003cca:	f7ff feb7 	bl	8003a3c <poly_basemul_montgomery>
  for(i=1;i<KYBER_K;i++) {
    poly_basemul_montgomery(&t, &a->vec[i], &b->vec[i]);
 8003cce:	f506 7200 	add.w	r2, r6, #512	@ 0x200
 8003cd2:	f505 7100 	add.w	r1, r5, #512	@ 0x200
 8003cd6:	4668      	mov	r0, sp
 8003cd8:	f7ff feb0 	bl	8003a3c <poly_basemul_montgomery>
    poly_add(r, r, &t);
 8003cdc:	466a      	mov	r2, sp
 8003cde:	4621      	mov	r1, r4
 8003ce0:	4620      	mov	r0, r4
 8003ce2:	f7ff fef3 	bl	8003acc <poly_add>
    poly_basemul_montgomery(&t, &a->vec[i], &b->vec[i]);
 8003ce6:	f506 6280 	add.w	r2, r6, #1024	@ 0x400
 8003cea:	f505 6180 	add.w	r1, r5, #1024	@ 0x400
 8003cee:	4668      	mov	r0, sp
 8003cf0:	f7ff fea4 	bl	8003a3c <poly_basemul_montgomery>
    poly_add(r, r, &t);
 8003cf4:	466a      	mov	r2, sp
 8003cf6:	4621      	mov	r1, r4
 8003cf8:	4620      	mov	r0, r4
 8003cfa:	f7ff fee7 	bl	8003acc <poly_add>
  }

  poly_reduce(r);
 8003cfe:	4620      	mov	r0, r4
 8003d00:	f7ff fecf 	bl	8003aa2 <poly_reduce>
}
 8003d04:	f50d 7d00 	add.w	sp, sp, #512	@ 0x200
 8003d08:	bd70      	pop	{r4, r5, r6, pc}

08003d0a <polyvec_reduce>:
*              for details of the Barrett reduction see comments in reduce.c
*
* Arguments:   - polyvec *r: pointer to input/output polynomial
**************************************************/
void polyvec_reduce(polyvec *r)
{
 8003d0a:	b510      	push	{r4, lr}
 8003d0c:	4604      	mov	r4, r0
  unsigned int i;
  for(i=0;i<KYBER_K;i++)
    poly_reduce(&r->vec[i]);
 8003d0e:	f7ff fec8 	bl	8003aa2 <poly_reduce>
 8003d12:	f504 7000 	add.w	r0, r4, #512	@ 0x200
 8003d16:	f7ff fec4 	bl	8003aa2 <poly_reduce>
 8003d1a:	f504 6080 	add.w	r0, r4, #1024	@ 0x400
}
 8003d1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    poly_reduce(&r->vec[i]);
 8003d22:	f7ff bebe 	b.w	8003aa2 <poly_reduce>

08003d26 <polyvec_add>:
* Arguments: - polyvec *r: pointer to output vector of polynomials
*            - const polyvec *a: pointer to first input vector of polynomials
*            - const polyvec *b: pointer to second input vector of polynomials
**************************************************/
void polyvec_add(polyvec *r, const polyvec *a, const polyvec *b)
{
 8003d26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d28:	4605      	mov	r5, r0
 8003d2a:	460e      	mov	r6, r1
 8003d2c:	4617      	mov	r7, r2
 8003d2e:	2400      	movs	r4, #0
  unsigned int i;
  for(i=0;i<KYBER_K;i++)
    poly_add(&r->vec[i], &a->vec[i], &b->vec[i]);
 8003d30:	193a      	adds	r2, r7, r4
 8003d32:	1931      	adds	r1, r6, r4
 8003d34:	1928      	adds	r0, r5, r4
  for(i=0;i<KYBER_K;i++)
 8003d36:	f504 7400 	add.w	r4, r4, #512	@ 0x200
    poly_add(&r->vec[i], &a->vec[i], &b->vec[i]);
 8003d3a:	f7ff fec7 	bl	8003acc <poly_add>
  for(i=0;i<KYBER_K;i++)
 8003d3e:	f5b4 6fc0 	cmp.w	r4, #1536	@ 0x600
 8003d42:	d1f5      	bne.n	8003d30 <polyvec_add+0xa>
}
 8003d44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003d46 <montgomery_reduce>:
**************************************************/
int16_t montgomery_reduce(int32_t a)
{
  int16_t t;

  t = (int16_t)a*QINV;
 8003d46:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8003d4a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8003d4e:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8003d52:	eb00 2303 	add.w	r3, r0, r3, lsl #8
  t = (a - (int32_t)t*KYBER_Q) >> 16;
 8003d56:	f24f 22ff 	movw	r2, #62207	@ 0xf2ff
 8003d5a:	fb13 0002 	smlabb	r0, r3, r2, r0
  return t;
}
 8003d5e:	1400      	asrs	r0, r0, #16
 8003d60:	4770      	bx	lr

08003d62 <barrett_reduce>:
**************************************************/
int16_t barrett_reduce(int16_t a) {
  int16_t t;
  const int16_t v = ((1<<26) + KYBER_Q/2)/KYBER_Q;

  t  = ((int32_t)v*a + (1<<25)) >> 26;
 8003d62:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003d66:	f644 63bf 	movw	r3, #20159	@ 0x4ebf
 8003d6a:	fb10 2303 	smlabb	r3, r0, r3, r2
 8003d6e:	169b      	asrs	r3, r3, #26
  t *= KYBER_Q;
 8003d70:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8003d74:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8003d78:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  return a - t;
 8003d7c:	1ac0      	subs	r0, r0, r3
}
 8003d7e:	b200      	sxth	r0, r0
 8003d80:	4770      	bx	lr

08003d82 <randombytes>:
}
*/

int
randombytes(unsigned char *x, unsigned long long xlen)
{
 8003d82:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d86:	4604      	mov	r4, r0
 8003d88:	4616      	mov	r6, r2
    unsigned char   block[16] = {0};
 8003d8a:	2100      	movs	r1, #0
 8003d8c:	2210      	movs	r2, #16
 8003d8e:	4668      	mov	r0, sp
{
 8003d90:	461f      	mov	r7, r3
    unsigned char   block[16] = {0};
 8003d92:	f7fc fb0f 	bl	80003b4 <memset>
        //    }
        //}
        //AES256_ECB(DRBG_ctx.Key, DRBG_ctx.V, block);
       
        for (int x = 0; x < 16; x++) {
            block[x] = rand() % 0xFF;
 8003d96:	f04f 09ff 	mov.w	r9, #255	@ 0xff
        }
        if ( xlen > 15 ) {
            memcpy(x+i, block, 16);
 8003d9a:	f10d 0810 	add.w	r8, sp, #16
    while ( xlen > 0 ) {
 8003d9e:	ea56 0307 	orrs.w	r3, r6, r7
 8003da2:	d025      	beq.n	8003df0 <randombytes+0x6e>
 8003da4:	46ea      	mov	sl, sp
        for (int x = 0; x < 16; x++) {
 8003da6:	2500      	movs	r5, #0
            block[x] = rand() % 0xFF;
 8003da8:	f7fc fa68 	bl	800027c <rand>
        for (int x = 0; x < 16; x++) {
 8003dac:	3501      	adds	r5, #1
            block[x] = rand() % 0xFF;
 8003dae:	fb90 f3f9 	sdiv	r3, r0, r9
        for (int x = 0; x < 16; x++) {
 8003db2:	2d10      	cmp	r5, #16
            block[x] = rand() % 0xFF;
 8003db4:	4403      	add	r3, r0
 8003db6:	f80a 3b01 	strb.w	r3, [sl], #1
        for (int x = 0; x < 16; x++) {
 8003dba:	d1f5      	bne.n	8003da8 <randombytes+0x26>
        if ( xlen > 15 ) {
 8003dbc:	2e10      	cmp	r6, #16
 8003dbe:	f177 0300 	sbcs.w	r3, r7, #0
 8003dc2:	f104 0210 	add.w	r2, r4, #16
 8003dc6:	d30e      	bcc.n	8003de6 <randombytes+0x64>
            memcpy(x+i, block, 16);
 8003dc8:	466b      	mov	r3, sp
 8003dca:	461d      	mov	r5, r3
 8003dcc:	cd03      	ldmia	r5!, {r0, r1}
 8003dce:	4545      	cmp	r5, r8
 8003dd0:	6020      	str	r0, [r4, #0]
 8003dd2:	6061      	str	r1, [r4, #4]
 8003dd4:	462b      	mov	r3, r5
 8003dd6:	f104 0408 	add.w	r4, r4, #8
 8003dda:	d1f6      	bne.n	8003dca <randombytes+0x48>
            i += 16;
            xlen -= 16;
 8003ddc:	3e10      	subs	r6, #16
 8003dde:	f167 0700 	sbc.w	r7, r7, #0
 8003de2:	4614      	mov	r4, r2
 8003de4:	e7db      	b.n	8003d9e <randombytes+0x1c>
        }
        else {
            memcpy(x+i, block, xlen);
 8003de6:	4632      	mov	r2, r6
 8003de8:	4669      	mov	r1, sp
 8003dea:	4620      	mov	r0, r4
 8003dec:	f7fc fb3a 	bl	8000464 <memcpy>
        }
    }


    return 1;
}
 8003df0:	2001      	movs	r0, #1
 8003df2:	b004      	add	sp, #16
 8003df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003df8 <kyber_shake128_absorb>:
**************************************************/
void kyber_shake128_absorb(keccak_state *state,
                           const uint8_t seed[KYBER_SYMBYTES],
                           uint8_t x,
                           uint8_t y)
{
 8003df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dfa:	b08b      	sub	sp, #44	@ 0x2c
 8003dfc:	4606      	mov	r6, r0
  uint8_t extseed[KYBER_SYMBYTES+2];

  memcpy(extseed, seed, KYBER_SYMBYTES);
 8003dfe:	460c      	mov	r4, r1
 8003e00:	af01      	add	r7, sp, #4
 8003e02:	f101 0c20 	add.w	ip, r1, #32
 8003e06:	6820      	ldr	r0, [r4, #0]
 8003e08:	6861      	ldr	r1, [r4, #4]
 8003e0a:	463d      	mov	r5, r7
 8003e0c:	c503      	stmia	r5!, {r0, r1}
 8003e0e:	3408      	adds	r4, #8
 8003e10:	4564      	cmp	r4, ip
 8003e12:	462f      	mov	r7, r5
 8003e14:	d1f7      	bne.n	8003e06 <kyber_shake128_absorb+0xe>
  extseed[KYBER_SYMBYTES+0] = x;
 8003e16:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
  extseed[KYBER_SYMBYTES+1] = y;

  shake128_absorb_once(state, extseed, sizeof(extseed));
 8003e1a:	a901      	add	r1, sp, #4
 8003e1c:	2222      	movs	r2, #34	@ 0x22
 8003e1e:	4630      	mov	r0, r6
  extseed[KYBER_SYMBYTES+1] = y;
 8003e20:	f88d 3025 	strb.w	r3, [sp, #37]	@ 0x25
  shake128_absorb_once(state, extseed, sizeof(extseed));
 8003e24:	f7ff f94d 	bl	80030c2 <pqcrystals_kyber_fips202_ref_shake128_absorb_once>
}
 8003e28:	b00b      	add	sp, #44	@ 0x2c
 8003e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003e2c <kyber_shake256_prf>:
*              - size_t outlen: number of requested output bytes
*              - const uint8_t *key: pointer to the key (of length KYBER_SYMBYTES)
*              - uint8_t nonce: single-byte nonce (public PRF input)
**************************************************/
void kyber_shake256_prf(uint8_t *out, size_t outlen, const uint8_t key[KYBER_SYMBYTES], uint8_t nonce)
{
 8003e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e2e:	b08b      	sub	sp, #44	@ 0x2c
 8003e30:	4605      	mov	r5, r0
 8003e32:	460e      	mov	r6, r1
  uint8_t extkey[KYBER_SYMBYTES+1];

  memcpy(extkey, key, KYBER_SYMBYTES);
 8003e34:	af01      	add	r7, sp, #4
 8003e36:	f102 0c20 	add.w	ip, r2, #32
 8003e3a:	6810      	ldr	r0, [r2, #0]
 8003e3c:	6851      	ldr	r1, [r2, #4]
 8003e3e:	463c      	mov	r4, r7
 8003e40:	c403      	stmia	r4!, {r0, r1}
 8003e42:	3208      	adds	r2, #8
 8003e44:	4562      	cmp	r2, ip
 8003e46:	4627      	mov	r7, r4
 8003e48:	d1f7      	bne.n	8003e3a <kyber_shake256_prf+0xe>
  extkey[KYBER_SYMBYTES] = nonce;
 8003e4a:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24

  shake256(out, outlen, extkey, sizeof(extkey));
 8003e4e:	aa01      	add	r2, sp, #4
 8003e50:	2321      	movs	r3, #33	@ 0x21
 8003e52:	4631      	mov	r1, r6
 8003e54:	4628      	mov	r0, r5
 8003e56:	f7ff f962 	bl	800311e <pqcrystals_kyber_fips202_ref_shake256>
}
 8003e5a:	b00b      	add	sp, #44	@ 0x2c
 8003e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003e5e <verify>:
  for(i=0;i<len;i++)
    r |= a[i] ^ b[i];

  //return (-(uint64_t)r) >> 63;
  return ((uint64_t)r) >> 63;
}
 8003e5e:	2000      	movs	r0, #0
 8003e60:	4770      	bx	lr

08003e62 <cmov>:
*              const uint8_t *x: pointer to input byte array
*              size_t len:       Amount of bytes to be copied
*              uint8_t b:        Condition bit; has to be in {0,1}
**************************************************/
void cmov(uint8_t *r, const uint8_t *x, size_t len, uint8_t b)
{
 8003e62:	b530      	push	{r4, r5, lr}
//  // units, but we expect that downstream consumers will copy this code and/or
//  // change how it is built.
//  __asm__("" : "+r"(b) : /* no inputs */);
//#endif

  b = -b;
 8003e64:	425b      	negs	r3, r3
 8003e66:	b2db      	uxtb	r3, r3
  for(i=0;i<len;i++)
 8003e68:	3901      	subs	r1, #1
 8003e6a:	4402      	add	r2, r0
 8003e6c:	4290      	cmp	r0, r2
 8003e6e:	d100      	bne.n	8003e72 <cmov+0x10>
    r[i] ^= b & (r[i] ^ x[i]);
}
 8003e70:	bd30      	pop	{r4, r5, pc}
    r[i] ^= b & (r[i] ^ x[i]);
 8003e72:	7805      	ldrb	r5, [r0, #0]
 8003e74:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003e78:	406c      	eors	r4, r5
 8003e7a:	401c      	ands	r4, r3
 8003e7c:	4065      	eors	r5, r4
 8003e7e:	f800 5b01 	strb.w	r5, [r0], #1
  for(i=0;i<len;i++)
 8003e82:	e7f3      	b.n	8003e6c <cmov+0xa>

08003e84 <check_version>:
// Callback function for "v" command.
// This can exist in v1.0 as long as we don't actually send back an ack ("z")
uint8_t check_version(uint8_t *v, uint8_t len)
{
	return SS_VER;
}
 8003e84:	2001      	movs	r0, #1
 8003e86:	4770      	bx	lr

08003e88 <simpleserial_put.part.0>:
#if SS_VER == SS_VER_1_1
	simpleserial_put('z', 1, ret);
#endif
}

void simpleserial_put(char c, uint8_t size, uint8_t* output)
 8003e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e8a:	4614      	mov	r4, r2
 8003e8c:	460e      	mov	r6, r1
{
	// Write first character
    if (!output) return;
	putch(c);
 8003e8e:	f000 f9f5 	bl	800427c <putch>

	// Write each byte as two nibbles
	for(int i = 0; i < size; i++)
	{
		putch(hex_lookup[output[i] >> 4 ]);
 8003e92:	4f0c      	ldr	r7, [pc, #48]	@ (8003ec4 <simpleserial_put.part.0+0x3c>)
 8003e94:	1e65      	subs	r5, r4, #1
	for(int i = 0; i < size; i++)
 8003e96:	f1c4 0401 	rsb	r4, r4, #1
 8003e9a:	1963      	adds	r3, r4, r5
 8003e9c:	429e      	cmp	r6, r3
 8003e9e:	dc04      	bgt.n	8003eaa <simpleserial_put.part.0+0x22>
		putch(hex_lookup[output[i] & 0xF]);
	}

	// Write trailing '\n'
	putch('\n');
}
 8003ea0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	putch('\n');
 8003ea4:	200a      	movs	r0, #10
 8003ea6:	f000 b9e9 	b.w	800427c <putch>
		putch(hex_lookup[output[i] >> 4 ]);
 8003eaa:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8003eae:	091b      	lsrs	r3, r3, #4
 8003eb0:	5cf8      	ldrb	r0, [r7, r3]
 8003eb2:	f000 f9e3 	bl	800427c <putch>
		putch(hex_lookup[output[i] & 0xF]);
 8003eb6:	782b      	ldrb	r3, [r5, #0]
 8003eb8:	f003 030f 	and.w	r3, r3, #15
 8003ebc:	5cf8      	ldrb	r0, [r7, r3]
 8003ebe:	f000 f9dd 	bl	800427c <putch>
	for(int i = 0; i < size; i++)
 8003ec2:	e7ea      	b.n	8003e9a <simpleserial_put.part.0+0x12>
 8003ec4:	08005050 	.word	0x08005050

08003ec8 <ss_num_commands>:
{
 8003ec8:	b507      	push	{r0, r1, r2, lr}
    uint8_t ncmds = num_commands & 0xFF;
 8003eca:	4b07      	ldr	r3, [pc, #28]	@ (8003ee8 <ss_num_commands+0x20>)
 8003ecc:	f10d 0207 	add.w	r2, sp, #7
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f88d 3007 	strb.w	r3, [sp, #7]
    if (!output) return;
 8003ed6:	2101      	movs	r1, #1
 8003ed8:	2072      	movs	r0, #114	@ 0x72
 8003eda:	f7ff ffd5 	bl	8003e88 <simpleserial_put.part.0>
}
 8003ede:	2000      	movs	r0, #0
 8003ee0:	b003      	add	sp, #12
 8003ee2:	f85d fb04 	ldr.w	pc, [sp], #4
 8003ee6:	bf00      	nop
 8003ee8:	20002558 	.word	0x20002558

08003eec <ss_get_commands>:
{
 8003eec:	b570      	push	{r4, r5, r6, lr}
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8003eee:	4c12      	ldr	r4, [pc, #72]	@ (8003f38 <ss_get_commands+0x4c>)
 8003ef0:	6821      	ldr	r1, [r4, #0]
{
 8003ef2:	b098      	sub	sp, #96	@ 0x60
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8003ef4:	b2cd      	uxtb	r5, r1
 8003ef6:	2000      	movs	r0, #0
 8003ef8:	b2c3      	uxtb	r3, r0
 8003efa:	42ab      	cmp	r3, r5
 8003efc:	f100 0001 	add.w	r0, r0, #1
 8003f00:	db09      	blt.n	8003f16 <ss_get_commands+0x2a>
    simpleserial_put('r', num_commands * sizeof (ss_cmd_repr), (void *) repr_cmd_buf);
 8003f02:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8003f06:	466a      	mov	r2, sp
 8003f08:	b2c9      	uxtb	r1, r1
 8003f0a:	2072      	movs	r0, #114	@ 0x72
 8003f0c:	f7ff ffbc 	bl	8003e88 <simpleserial_put.part.0>
}
 8003f10:	2000      	movs	r0, #0
 8003f12:	b018      	add	sp, #96	@ 0x60
 8003f14:	bd70      	pop	{r4, r5, r6, pc}
        repr_cmd_buf[i].c = commands[i].c;
 8003f16:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8003f1a:	3260      	adds	r2, #96	@ 0x60
 8003f1c:	eb04 1303 	add.w	r3, r4, r3, lsl #4
 8003f20:	446a      	add	r2, sp
 8003f22:	791e      	ldrb	r6, [r3, #4]
 8003f24:	f802 6c60 	strb.w	r6, [r2, #-96]
        repr_cmd_buf[i].len = commands[i].len;
 8003f28:	689e      	ldr	r6, [r3, #8]
        repr_cmd_buf[i].flags = commands[i].flags;
 8003f2a:	7c1b      	ldrb	r3, [r3, #16]
        repr_cmd_buf[i].len = commands[i].len;
 8003f2c:	f802 6c5f 	strb.w	r6, [r2, #-95]
        repr_cmd_buf[i].flags = commands[i].flags;
 8003f30:	f802 3c5e 	strb.w	r3, [r2, #-94]
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8003f34:	e7e0      	b.n	8003ef8 <ss_get_commands+0xc>
 8003f36:	bf00      	nop
 8003f38:	20002558 	.word	0x20002558

08003f3c <hex_decode>:
{
 8003f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
	for(int i = 0; i < len; i++)
 8003f3e:	2500      	movs	r5, #0
		char n_lo = ascii_buf[2*i+1];
 8003f40:	1c4f      	adds	r7, r1, #1
	for(int i = 0; i < len; i++)
 8003f42:	4285      	cmp	r5, r0
 8003f44:	db01      	blt.n	8003f4a <hex_decode+0xe>
	return 0;
 8003f46:	2000      	movs	r0, #0
 8003f48:	e021      	b.n	8003f8e <hex_decode+0x52>
		char n_lo = ascii_buf[2*i+1];
 8003f4a:	f817 4015 	ldrb.w	r4, [r7, r5, lsl #1]
		char n_hi = ascii_buf[2*i];
 8003f4e:	f811 3015 	ldrb.w	r3, [r1, r5, lsl #1]
		if(n_lo >= '0' && n_lo <= '9')
 8003f52:	f1a4 0630 	sub.w	r6, r4, #48	@ 0x30
 8003f56:	b2f6      	uxtb	r6, r6
 8003f58:	2e09      	cmp	r6, #9
 8003f5a:	d80c      	bhi.n	8003f76 <hex_decode+0x3a>
			data_buf[i] = n_lo - '0';
 8003f5c:	7016      	strb	r6, [r2, #0]
		if(n_hi >= '0' && n_hi <= '9')
 8003f5e:	f1a3 0430 	sub.w	r4, r3, #48	@ 0x30
 8003f62:	b2e4      	uxtb	r4, r4
 8003f64:	2c09      	cmp	r4, #9
 8003f66:	d815      	bhi.n	8003f94 <hex_decode+0x58>
			data_buf[i] |= (n_hi - 'A' + 10) << 4;
 8003f68:	7813      	ldrb	r3, [r2, #0]
 8003f6a:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 8003f6e:	7013      	strb	r3, [r2, #0]
	for(int i = 0; i < len; i++)
 8003f70:	3501      	adds	r5, #1
 8003f72:	3201      	adds	r2, #1
 8003f74:	e7e5      	b.n	8003f42 <hex_decode+0x6>
		else if(n_lo >= 'A' && n_lo <= 'F')
 8003f76:	f1a4 0641 	sub.w	r6, r4, #65	@ 0x41
 8003f7a:	2e05      	cmp	r6, #5
 8003f7c:	d802      	bhi.n	8003f84 <hex_decode+0x48>
			data_buf[i] = n_lo - 'A' + 10;
 8003f7e:	3c37      	subs	r4, #55	@ 0x37
			data_buf[i] = n_lo - 'a' + 10;
 8003f80:	7014      	strb	r4, [r2, #0]
 8003f82:	e7ec      	b.n	8003f5e <hex_decode+0x22>
		else if(n_lo >= 'a' && n_lo <= 'f')
 8003f84:	f1a4 0661 	sub.w	r6, r4, #97	@ 0x61
 8003f88:	2e05      	cmp	r6, #5
 8003f8a:	d901      	bls.n	8003f90 <hex_decode+0x54>
			return 1;
 8003f8c:	2001      	movs	r0, #1
}
 8003f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			data_buf[i] = n_lo - 'a' + 10;
 8003f90:	3c57      	subs	r4, #87	@ 0x57
 8003f92:	e7f5      	b.n	8003f80 <hex_decode+0x44>
		else if(n_hi >= 'A' && n_hi <= 'F')
 8003f94:	f1a3 0441 	sub.w	r4, r3, #65	@ 0x41
 8003f98:	2c05      	cmp	r4, #5
 8003f9a:	d802      	bhi.n	8003fa2 <hex_decode+0x66>
			data_buf[i] |= (n_hi - 'A' + 10) << 4;
 8003f9c:	f1a3 0437 	sub.w	r4, r3, #55	@ 0x37
 8003fa0:	e7e2      	b.n	8003f68 <hex_decode+0x2c>
		else if(n_hi >= 'a' && n_hi <= 'f')
 8003fa2:	f1a3 0461 	sub.w	r4, r3, #97	@ 0x61
 8003fa6:	2c05      	cmp	r4, #5
 8003fa8:	d8f0      	bhi.n	8003f8c <hex_decode+0x50>
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 8003faa:	7814      	ldrb	r4, [r2, #0]
 8003fac:	3b57      	subs	r3, #87	@ 0x57
 8003fae:	ea44 1303 	orr.w	r3, r4, r3, lsl #4
 8003fb2:	e7dc      	b.n	8003f6e <hex_decode+0x32>

08003fb4 <simpleserial_addcmd_flags>:
{
 8003fb4:	b570      	push	{r4, r5, r6, lr}
	if(num_commands >= MAX_SS_CMDS)
 8003fb6:	4e09      	ldr	r6, [pc, #36]	@ (8003fdc <simpleserial_addcmd_flags+0x28>)
 8003fb8:	6834      	ldr	r4, [r6, #0]
 8003fba:	2c1f      	cmp	r4, #31
 8003fbc:	dc0b      	bgt.n	8003fd6 <simpleserial_addcmd_flags+0x22>
	if(len >= MAX_SS_LEN)
 8003fbe:	293f      	cmp	r1, #63	@ 0x3f
 8003fc0:	d809      	bhi.n	8003fd6 <simpleserial_addcmd_flags+0x22>
	commands[num_commands].c   = c;
 8003fc2:	eb06 1504 	add.w	r5, r6, r4, lsl #4
	commands[num_commands].fp  = fp;
 8003fc6:	e9c5 1202 	strd	r1, r2, [r5, #8]
	num_commands++;
 8003fca:	3401      	adds	r4, #1
	commands[num_commands].c   = c;
 8003fcc:	7128      	strb	r0, [r5, #4]
	commands[num_commands].flags = fl;
 8003fce:	742b      	strb	r3, [r5, #16]
	num_commands++;
 8003fd0:	6034      	str	r4, [r6, #0]
	return 0;
 8003fd2:	2000      	movs	r0, #0
}
 8003fd4:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
 8003fd6:	2001      	movs	r0, #1
 8003fd8:	e7fc      	b.n	8003fd4 <simpleserial_addcmd_flags+0x20>
 8003fda:	bf00      	nop
 8003fdc:	20002558 	.word	0x20002558

08003fe0 <simpleserial_addcmd>:
	return simpleserial_addcmd_flags(c, len, fp, CMD_FLAG_NONE);
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	f7ff bfe7 	b.w	8003fb4 <simpleserial_addcmd_flags>
 8003fe6:	0000      	movs	r0, r0

08003fe8 <simpleserial_init>:
{
 8003fe8:	b508      	push	{r3, lr}
	simpleserial_addcmd('v', 0, check_version);
 8003fea:	4a07      	ldr	r2, [pc, #28]	@ (8004008 <simpleserial_init+0x20>)
 8003fec:	2100      	movs	r1, #0
 8003fee:	2076      	movs	r0, #118	@ 0x76
 8003ff0:	f7ff fff6 	bl	8003fe0 <simpleserial_addcmd>
    simpleserial_addcmd('w', 0, ss_get_commands);
 8003ff4:	4a05      	ldr	r2, [pc, #20]	@ (800400c <simpleserial_init+0x24>)
 8003ff6:	2077      	movs	r0, #119	@ 0x77
 8003ff8:	f7ff fff2 	bl	8003fe0 <simpleserial_addcmd>
}
 8003ffc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    simpleserial_addcmd('y', 0, ss_num_commands);
 8004000:	4a03      	ldr	r2, [pc, #12]	@ (8004010 <simpleserial_init+0x28>)
 8004002:	2079      	movs	r0, #121	@ 0x79
 8004004:	f7ff bfec 	b.w	8003fe0 <simpleserial_addcmd>
 8004008:	08003e85 	.word	0x08003e85
 800400c:	08003eed 	.word	0x08003eed
 8004010:	08003ec9 	.word	0x08003ec9

08004014 <simpleserial_get>:
{
 8004014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for(cmd = 0; cmd < num_commands; cmd++)
 8004018:	4d2c      	ldr	r5, [pc, #176]	@ (80040cc <simpleserial_get+0xb8>)
{
 800401a:	b0b2      	sub	sp, #200	@ 0xc8
	c = getch();
 800401c:	f000 f914 	bl	8004248 <getch>
	for(cmd = 0; cmd < num_commands; cmd++)
 8004020:	462a      	mov	r2, r5
 8004022:	2300      	movs	r3, #0
 8004024:	f852 1b04 	ldr.w	r1, [r2], #4
 8004028:	4299      	cmp	r1, r3
 800402a:	dc3f      	bgt.n	80040ac <simpleserial_get+0x98>
	if(cmd == num_commands)
 800402c:	d03b      	beq.n	80040a6 <simpleserial_get+0x92>
	if ((commands[cmd].flags & CMD_FLAG_LEN) != 0)
 800402e:	eb05 1403 	add.w	r4, r5, r3, lsl #4
 8004032:	011e      	lsls	r6, r3, #4
 8004034:	7c23      	ldrb	r3, [r4, #16]
 8004036:	07db      	lsls	r3, r3, #31
 8004038:	d513      	bpl.n	8004062 <simpleserial_get+0x4e>
		uint8_t l = 0;
 800403a:	2300      	movs	r3, #0
 800403c:	f88d 3008 	strb.w	r3, [sp, #8]
		buff[0] = getch();
 8004040:	f000 f902 	bl	8004248 <getch>
 8004044:	f88d 0048 	strb.w	r0, [sp, #72]	@ 0x48
		buff[1] = getch();
 8004048:	f000 f8fe 	bl	8004248 <getch>
		if (hex_decode(1, buff, &l))
 800404c:	aa02      	add	r2, sp, #8
		buff[1] = getch();
 800404e:	f88d 0049 	strb.w	r0, [sp, #73]	@ 0x49
		if (hex_decode(1, buff, &l))
 8004052:	a912      	add	r1, sp, #72	@ 0x48
 8004054:	2001      	movs	r0, #1
 8004056:	f7ff ff71 	bl	8003f3c <hex_decode>
 800405a:	bb20      	cbnz	r0, 80040a6 <simpleserial_get+0x92>
		commands[cmd].len = l;
 800405c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8004060:	60a3      	str	r3, [r4, #8]
 8004062:	af12      	add	r7, sp, #72	@ 0x48
	for(cmd = 0; cmd < num_commands; cmd++)
 8004064:	2400      	movs	r4, #0
	for(int i = 0; i < 2*commands[cmd].len; i++)
 8004066:	eb05 0806 	add.w	r8, r5, r6
 800406a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800406e:	ebb4 0f43 	cmp.w	r4, r3, lsl #1
 8004072:	d321      	bcc.n	80040b8 <simpleserial_get+0xa4>
	c = getch();
 8004074:	f000 f8e8 	bl	8004248 <getch>
	if(c != '\n' && c != '\r')
 8004078:	280a      	cmp	r0, #10
 800407a:	d001      	beq.n	8004080 <simpleserial_get+0x6c>
 800407c:	280d      	cmp	r0, #13
 800407e:	d112      	bne.n	80040a6 <simpleserial_get+0x92>
	if(hex_decode(commands[cmd].len, ascii_buf, data_buf))
 8004080:	4435      	add	r5, r6
 8004082:	aa02      	add	r2, sp, #8
 8004084:	68ac      	ldr	r4, [r5, #8]
 8004086:	a912      	add	r1, sp, #72	@ 0x48
 8004088:	4620      	mov	r0, r4
 800408a:	f7ff ff57 	bl	8003f3c <hex_decode>
 800408e:	b950      	cbnz	r0, 80040a6 <simpleserial_get+0x92>
	ret[0] = commands[cmd].fp(data_buf, commands[cmd].len);
 8004090:	b2e1      	uxtb	r1, r4
 8004092:	68eb      	ldr	r3, [r5, #12]
 8004094:	a802      	add	r0, sp, #8
 8004096:	4798      	blx	r3
 8004098:	aa01      	add	r2, sp, #4
 800409a:	f88d 0004 	strb.w	r0, [sp, #4]
    if (!output) return;
 800409e:	2101      	movs	r1, #1
 80040a0:	207a      	movs	r0, #122	@ 0x7a
 80040a2:	f7ff fef1 	bl	8003e88 <simpleserial_put.part.0>
}
 80040a6:	b032      	add	sp, #200	@ 0xc8
 80040a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if(commands[cmd].c == c)
 80040ac:	011c      	lsls	r4, r3, #4
 80040ae:	5ca4      	ldrb	r4, [r4, r2]
 80040b0:	4284      	cmp	r4, r0
 80040b2:	d0bc      	beq.n	800402e <simpleserial_get+0x1a>
	for(cmd = 0; cmd < num_commands; cmd++)
 80040b4:	3301      	adds	r3, #1
 80040b6:	e7b7      	b.n	8004028 <simpleserial_get+0x14>
		c = getch();
 80040b8:	f000 f8c6 	bl	8004248 <getch>
		if(c == '\n' || c == '\r')
 80040bc:	280a      	cmp	r0, #10
 80040be:	d0f2      	beq.n	80040a6 <simpleserial_get+0x92>
 80040c0:	280d      	cmp	r0, #13
 80040c2:	d0f0      	beq.n	80040a6 <simpleserial_get+0x92>
		ascii_buf[i] = c;
 80040c4:	f807 0b01 	strb.w	r0, [r7], #1
	for(int i = 0; i < 2*commands[cmd].len; i++)
 80040c8:	3401      	adds	r4, #1
 80040ca:	e7ce      	b.n	800406a <simpleserial_get+0x56>
 80040cc:	20002558 	.word	0x20002558

080040d0 <simpleserial_put>:
    if (!output) return;
 80040d0:	b10a      	cbz	r2, 80040d6 <simpleserial_put+0x6>
 80040d2:	f7ff bed9 	b.w	8003e88 <simpleserial_put.part.0>
}
 80040d6:	4770      	bx	lr

080040d8 <_close>:
}

#ifdef __GNUC__
#if ((__GNUC__ > 11) || \
     ((__GNUC__ == 11) && (__GNUC_MINOR__ >= 3)))
__attribute__((weak)) void _close() {}
 80040d8:	4770      	bx	lr

080040da <_fstat>:
__attribute__((weak)) void _fstat() {}
 80040da:	4770      	bx	lr

080040dc <_getpid>:
__attribute__((weak)) void _getpid() {}
 80040dc:	4770      	bx	lr

080040de <_isatty>:
__attribute__((weak)) void _isatty() {}
 80040de:	4770      	bx	lr

080040e0 <_kill>:
__attribute__((weak)) void _kill() {}
 80040e0:	4770      	bx	lr

080040e2 <_lseek>:
__attribute__((weak)) void _lseek() {}
 80040e2:	4770      	bx	lr

080040e4 <_read>:
__attribute__((weak)) void _read() {}
 80040e4:	4770      	bx	lr

080040e6 <_write>:
__attribute__((weak)) void _write() {}
 80040e6:	4770      	bx	lr

080040e8 <platform_init>:

UART_HandleTypeDef UartHandle;


void platform_init(void)
{
 80040e8:	b570      	push	{r4, r5, r6, lr}
 80040ea:	b096      	sub	sp, #88	@ 0x58
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
  #else
     RCC_OscInitTypeDef RCC_OscInitStruct;
     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
     RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 80040ec:	2400      	movs	r4, #0
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 80040ee:	2603      	movs	r6, #3
 80040f0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
     RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
     HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80040f4:	a80c      	add	r0, sp, #48	@ 0x30

     RCC_ClkInitTypeDef RCC_ClkInitStruct;
     RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 80040f6:	2501      	movs	r5, #1
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 80040f8:	e9cd 630c 	strd	r6, r3, [sp, #48]	@ 0x30
     RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 80040fc:	9410      	str	r4, [sp, #64]	@ 0x40
     RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
 80040fe:	9414      	str	r4, [sp, #80]	@ 0x50
     HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8004100:	f000 f8d4 	bl	80042ac <HAL_RCC_OscConfig>
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 8004104:	230f      	movs	r3, #15
     RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
     uint32_t flash_latency = 0;
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 8004106:	4621      	mov	r1, r4
 8004108:	a802      	add	r0, sp, #8
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 800410a:	e9cd 3502 	strd	r3, r5, [sp, #8]
     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800410e:	e9cd 4404 	strd	r4, r4, [sp, #16]
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004112:	9406      	str	r4, [sp, #24]
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 8004114:	f000 fb10 	bl	8004738 <HAL_RCC_ClockConfig>




#if (PLATFORM==CWLITEARM)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004118:	4b11      	ldr	r3, [pc, #68]	@ (8004160 <platform_init+0x78>)
 800411a:	695a      	ldr	r2, [r3, #20]
 800411c:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8004120:	615a      	str	r2, [r3, #20]
 8004122:	695b      	ldr	r3, [r3, #20]
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
  GpioInit.Pull      = GPIO_NOPULL;
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8004124:	e9cd 4609 	strd	r4, r6, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004128:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
  HAL_GPIO_Init(GPIOC, &GpioInit);
 800412c:	4c0d      	ldr	r4, [pc, #52]	@ (8004164 <platform_init+0x7c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800412e:	9301      	str	r3, [sp, #4]
 8004130:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8004132:	a907      	add	r1, sp, #28
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
 8004134:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8004138:	4620      	mov	r0, r4
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 800413a:	e9cd 3507 	strd	r3, r5, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GpioInit);
 800413e:	f000 fb9b 	bl	8004878 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8004142:	462a      	mov	r2, r5
 8004144:	4620      	mov	r0, r4
 8004146:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800414a:	f000 fc53 	bl	80049f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 800414e:	462a      	mov	r2, r5
 8004150:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004154:	4620      	mov	r0, r4
 8004156:	f000 fc4d 	bl	80049f4 <HAL_GPIO_WritePin>
#endif
}
 800415a:	b016      	add	sp, #88	@ 0x58
 800415c:	bd70      	pop	{r4, r5, r6, pc}
 800415e:	bf00      	nop
 8004160:	40021000 	.word	0x40021000
 8004164:	48000800 	.word	0x48000800

08004168 <init_uart>:

void init_uart(void)
{
 8004168:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
  GpioInit.Mode      = GPIO_MODE_AF_PP;
 800416a:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
{
 800416e:	b088      	sub	sp, #32
  GpioInit.Mode      = GPIO_MODE_AF_PP;
 8004170:	2302      	movs	r3, #2
 8004172:	e9cd 2303 	strd	r2, r3, [sp, #12]
  GpioInit.Pull      = GPIO_PULLUP;
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8004176:	2101      	movs	r1, #1
 8004178:	2303      	movs	r3, #3
 800417a:	e9cd 1305 	strd	r1, r3, [sp, #20]
  GpioInit.Alternate = GPIO_AF7_USART1;
  __GPIOA_CLK_ENABLE();
 800417e:	4c16      	ldr	r4, [pc, #88]	@ (80041d8 <init_uart+0x70>)
  GpioInit.Alternate = GPIO_AF7_USART1;
 8004180:	2307      	movs	r3, #7
 8004182:	9307      	str	r3, [sp, #28]
  __GPIOA_CLK_ENABLE();
 8004184:	6963      	ldr	r3, [r4, #20]
 8004186:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800418a:	6163      	str	r3, [r4, #20]
 800418c:	6963      	ldr	r3, [r4, #20]
 800418e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004192:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8004194:	a903      	add	r1, sp, #12
 8004196:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  __GPIOA_CLK_ENABLE();
 800419a:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 800419c:	f000 fb6c 	bl	8004878 <HAL_GPIO_Init>

  UartHandle.Instance        = USART1;
 80041a0:	480e      	ldr	r0, [pc, #56]	@ (80041dc <init_uart+0x74>)
  #if SS_VER==SS_VER_2_1
  UartHandle.Init.BaudRate   = 230400;
  #else
  UartHandle.Init.BaudRate   = 38400;
 80041a2:	f8df c03c 	ldr.w	ip, [pc, #60]	@ 80041e0 <init_uart+0x78>
 80041a6:	f44f 4316 	mov.w	r3, #38400	@ 0x9600
 80041aa:	e9c0 c300 	strd	ip, r3, [r0]
  #endif
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 80041ae:	2300      	movs	r3, #0
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 80041b0:	e9c0 3302 	strd	r3, r3, [r0, #8]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 80041b4:	6103      	str	r3, [r0, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 80041b6:	6183      	str	r3, [r0, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 80041b8:	230c      	movs	r3, #12
 80041ba:	6143      	str	r3, [r0, #20]
  __USART1_CLK_ENABLE();
 80041bc:	69a3      	ldr	r3, [r4, #24]
 80041be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80041c2:	61a3      	str	r3, [r4, #24]
 80041c4:	69a3      	ldr	r3, [r4, #24]
 80041c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041ca:	9302      	str	r3, [sp, #8]
 80041cc:	9b02      	ldr	r3, [sp, #8]
  HAL_UART_Init(&UartHandle);
 80041ce:	f000 fd27 	bl	8004c20 <HAL_UART_Init>
}
 80041d2:	b008      	add	sp, #32
 80041d4:	bd10      	pop	{r4, pc}
 80041d6:	bf00      	nop
 80041d8:	40021000 	.word	0x40021000
 80041dc:	2000275c 	.word	0x2000275c
 80041e0:	40013800 	.word	0x40013800

080041e4 <trigger_setup>:

void trigger_setup(void)
{
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80041e4:	4b10      	ldr	r3, [pc, #64]	@ (8004228 <trigger_setup+0x44>)
{
 80041e6:	b530      	push	{r4, r5, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80041e8:	695a      	ldr	r2, [r3, #20]
 80041ea:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80041ee:	615a      	str	r2, [r3, #20]
 80041f0:	695b      	ldr	r3, [r3, #20]
{
 80041f2:	b087      	sub	sp, #28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80041f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041f8:	9300      	str	r3, [sp, #0]
 80041fa:	9b00      	ldr	r3, [sp, #0]

  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_12;
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 80041fc:	f44f 5480 	mov.w	r4, #4096	@ 0x1000
 8004200:	2301      	movs	r3, #1
 8004202:	e9cd 4301 	strd	r4, r3, [sp, #4]
  GpioInit.Pull      = GPIO_NOPULL;
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8004206:	2500      	movs	r5, #0
 8004208:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GpioInit);
 800420a:	a901      	add	r1, sp, #4
 800420c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8004210:	e9cd 5303 	strd	r5, r3, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8004214:	f000 fb30 	bl	8004878 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 8004218:	462a      	mov	r2, r5
 800421a:	4621      	mov	r1, r4
 800421c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004220:	f000 fbe8 	bl	80049f4 <HAL_GPIO_WritePin>
}
 8004224:	b007      	add	sp, #28
 8004226:	bd30      	pop	{r4, r5, pc}
 8004228:	40021000 	.word	0x40021000

0800422c <trigger_high>:

void trigger_high(void)
{
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, SET);
 800422c:	2201      	movs	r2, #1
 800422e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004232:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004236:	f000 bbdd 	b.w	80049f4 <HAL_GPIO_WritePin>

0800423a <trigger_low>:
}

void trigger_low(void)
{
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 800423a:	2200      	movs	r2, #0
 800423c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004240:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004244:	f000 bbd6 	b.w	80049f4 <HAL_GPIO_WritePin>

08004248 <getch>:
}

char getch(void)
{
 8004248:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t d;
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK)
 800424a:	4d0a      	ldr	r5, [pc, #40]	@ (8004274 <getch+0x2c>)
    USART1->ICR |= (1 << 3);
 800424c:	4c0a      	ldr	r4, [pc, #40]	@ (8004278 <getch+0x30>)
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK)
 800424e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004252:	2201      	movs	r2, #1
 8004254:	f10d 0107 	add.w	r1, sp, #7
 8004258:	4628      	mov	r0, r5
 800425a:	f000 fd61 	bl	8004d20 <HAL_UART_Receive>
 800425e:	b918      	cbnz	r0, 8004268 <getch+0x20>
  //putch(d);
  return d;
}
 8004260:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8004264:	b003      	add	sp, #12
 8004266:	bd30      	pop	{r4, r5, pc}
    USART1->ICR |= (1 << 3);
 8004268:	6a23      	ldr	r3, [r4, #32]
 800426a:	f043 0308 	orr.w	r3, r3, #8
 800426e:	6223      	str	r3, [r4, #32]
 8004270:	e7ed      	b.n	800424e <getch+0x6>
 8004272:	bf00      	nop
 8004274:	2000275c 	.word	0x2000275c
 8004278:	40013800 	.word	0x40013800

0800427c <putch>:

void putch(char c)
{
 800427c:	b507      	push	{r0, r1, r2, lr}
  uint8_t d  = c;
  HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 800427e:	f241 3388 	movw	r3, #5000	@ 0x1388
  uint8_t d  = c;
 8004282:	f88d 0007 	strb.w	r0, [sp, #7]
  HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 8004286:	2201      	movs	r2, #1
 8004288:	f10d 0107 	add.w	r1, sp, #7
 800428c:	4802      	ldr	r0, [pc, #8]	@ (8004298 <putch+0x1c>)
 800428e:	f000 fcf1 	bl	8004c74 <HAL_UART_Transmit>
}
 8004292:	b003      	add	sp, #12
 8004294:	f85d fb04 	ldr.w	pc, [sp], #4
 8004298:	2000275c 	.word	0x2000275c

0800429c <HAL_GetTick>:
	hal_sys_tick = 0;
	return HAL_OK;
}
uint32_t HAL_GetTick(void)
{
	return hal_sys_tick++;
 800429c:	4b02      	ldr	r3, [pc, #8]	@ (80042a8 <HAL_GetTick+0xc>)
 800429e:	6818      	ldr	r0, [r3, #0]
 80042a0:	1c42      	adds	r2, r0, #1
 80042a2:	601a      	str	r2, [r3, #0]
}
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop
 80042a8:	200027cc 	.word	0x200027cc

080042ac <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042ac:	6803      	ldr	r3, [r0, #0]
{
 80042ae:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042b2:	07d9      	lsls	r1, r3, #31
{
 80042b4:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042b6:	d410      	bmi.n	80042da <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042b8:	6823      	ldr	r3, [r4, #0]
 80042ba:	079a      	lsls	r2, r3, #30
 80042bc:	d47e      	bmi.n	80043bc <HAL_RCC_OscConfig+0x110>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042be:	6823      	ldr	r3, [r4, #0]
 80042c0:	071e      	lsls	r6, r3, #28
 80042c2:	f100 80e7 	bmi.w	8004494 <HAL_RCC_OscConfig+0x1e8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042c6:	6823      	ldr	r3, [r4, #0]
 80042c8:	075d      	lsls	r5, r3, #29
 80042ca:	f100 812a 	bmi.w	8004522 <HAL_RCC_OscConfig+0x276>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042ce:	69e2      	ldr	r2, [r4, #28]
 80042d0:	2a00      	cmp	r2, #0
 80042d2:	f040 81ad 	bne.w	8004630 <HAL_RCC_OscConfig+0x384>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80042d6:	2000      	movs	r0, #0
 80042d8:	e01f      	b.n	800431a <HAL_RCC_OscConfig+0x6e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80042da:	49ae      	ldr	r1, [pc, #696]	@ (8004594 <HAL_RCC_OscConfig+0x2e8>)
 80042dc:	684b      	ldr	r3, [r1, #4]
 80042de:	f003 030c 	and.w	r3, r3, #12
 80042e2:	2b04      	cmp	r3, #4
 80042e4:	d007      	beq.n	80042f6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80042e6:	684b      	ldr	r3, [r1, #4]
 80042e8:	f003 030c 	and.w	r3, r3, #12
 80042ec:	2b08      	cmp	r3, #8
 80042ee:	d117      	bne.n	8004320 <HAL_RCC_OscConfig+0x74>
 80042f0:	684b      	ldr	r3, [r1, #4]
 80042f2:	03db      	lsls	r3, r3, #15
 80042f4:	d514      	bpl.n	8004320 <HAL_RCC_OscConfig+0x74>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80042fa:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042fe:	6809      	ldr	r1, [r1, #0]
 8004300:	fa93 f3a3 	rbit	r3, r3
 8004304:	2201      	movs	r2, #1
 8004306:	fab3 f383 	clz	r3, r3
 800430a:	fa02 f303 	lsl.w	r3, r2, r3
 800430e:	420b      	tst	r3, r1
 8004310:	d0d2      	beq.n	80042b8 <HAL_RCC_OscConfig+0xc>
 8004312:	6863      	ldr	r3, [r4, #4]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1cf      	bne.n	80042b8 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8004318:	2001      	movs	r0, #1
}
 800431a:	b003      	add	sp, #12
 800431c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004320:	6862      	ldr	r2, [r4, #4]
 8004322:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8004326:	d122      	bne.n	800436e <HAL_RCC_OscConfig+0xc2>
 8004328:	680b      	ldr	r3, [r1, #0]
 800432a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800432e:	600b      	str	r3, [r1, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004330:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8004332:	68a0      	ldr	r0, [r4, #8]
 8004334:	f023 030f 	bic.w	r3, r3, #15
 8004338:	4303      	orrs	r3, r0
 800433a:	62cb      	str	r3, [r1, #44]	@ 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800433c:	b33a      	cbz	r2, 800438e <HAL_RCC_OscConfig+0xe2>
        tickstart = HAL_GetTick();
 800433e:	f7ff ffad 	bl	800429c <HAL_GetTick>
 8004342:	f44f 3600 	mov.w	r6, #131072	@ 0x20000
 8004346:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004348:	2701      	movs	r7, #1
 800434a:	fa96 f3a6 	rbit	r3, r6
 800434e:	680a      	ldr	r2, [r1, #0]
 8004350:	fa96 f3a6 	rbit	r3, r6
 8004354:	fab3 f383 	clz	r3, r3
 8004358:	fa07 f303 	lsl.w	r3, r7, r3
 800435c:	4213      	tst	r3, r2
 800435e:	d1ab      	bne.n	80042b8 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004360:	f7ff ff9c 	bl	800429c <HAL_GetTick>
 8004364:	1b40      	subs	r0, r0, r5
 8004366:	2864      	cmp	r0, #100	@ 0x64
 8004368:	d9ef      	bls.n	800434a <HAL_RCC_OscConfig+0x9e>
            return HAL_TIMEOUT;
 800436a:	2003      	movs	r0, #3
 800436c:	e7d5      	b.n	800431a <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800436e:	680b      	ldr	r3, [r1, #0]
 8004370:	b932      	cbnz	r2, 8004380 <HAL_RCC_OscConfig+0xd4>
 8004372:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004376:	600b      	str	r3, [r1, #0]
 8004378:	680b      	ldr	r3, [r1, #0]
 800437a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800437e:	e7d6      	b.n	800432e <HAL_RCC_OscConfig+0x82>
 8004380:	f5b2 2fa0 	cmp.w	r2, #327680	@ 0x50000
 8004384:	d1f5      	bne.n	8004372 <HAL_RCC_OscConfig+0xc6>
 8004386:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800438a:	600b      	str	r3, [r1, #0]
 800438c:	e7cc      	b.n	8004328 <HAL_RCC_OscConfig+0x7c>
        tickstart = HAL_GetTick();
 800438e:	f7ff ff85 	bl	800429c <HAL_GetTick>
 8004392:	f44f 3600 	mov.w	r6, #131072	@ 0x20000
 8004396:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004398:	2701      	movs	r7, #1
 800439a:	fa96 f3a6 	rbit	r3, r6
 800439e:	680a      	ldr	r2, [r1, #0]
 80043a0:	fa96 f3a6 	rbit	r3, r6
 80043a4:	fab3 f383 	clz	r3, r3
 80043a8:	fa07 f303 	lsl.w	r3, r7, r3
 80043ac:	4213      	tst	r3, r2
 80043ae:	d083      	beq.n	80042b8 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043b0:	f7ff ff74 	bl	800429c <HAL_GetTick>
 80043b4:	1b40      	subs	r0, r0, r5
 80043b6:	2864      	cmp	r0, #100	@ 0x64
 80043b8:	d9ef      	bls.n	800439a <HAL_RCC_OscConfig+0xee>
 80043ba:	e7d6      	b.n	800436a <HAL_RCC_OscConfig+0xbe>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80043bc:	4975      	ldr	r1, [pc, #468]	@ (8004594 <HAL_RCC_OscConfig+0x2e8>)
 80043be:	684b      	ldr	r3, [r1, #4]
 80043c0:	f013 0f0c 	tst.w	r3, #12
 80043c4:	d007      	beq.n	80043d6 <HAL_RCC_OscConfig+0x12a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80043c6:	684b      	ldr	r3, [r1, #4]
 80043c8:	f003 030c 	and.w	r3, r3, #12
 80043cc:	2b08      	cmp	r3, #8
 80043ce:	d11f      	bne.n	8004410 <HAL_RCC_OscConfig+0x164>
 80043d0:	684b      	ldr	r3, [r1, #4]
 80043d2:	03df      	lsls	r7, r3, #15
 80043d4:	d41c      	bmi.n	8004410 <HAL_RCC_OscConfig+0x164>
 80043d6:	2302      	movs	r3, #2
 80043d8:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043dc:	6808      	ldr	r0, [r1, #0]
 80043de:	fa93 f3a3 	rbit	r3, r3
 80043e2:	2201      	movs	r2, #1
 80043e4:	fab3 f383 	clz	r3, r3
 80043e8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ec:	4203      	tst	r3, r0
 80043ee:	d002      	beq.n	80043f6 <HAL_RCC_OscConfig+0x14a>
 80043f0:	6923      	ldr	r3, [r4, #16]
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d190      	bne.n	8004318 <HAL_RCC_OscConfig+0x6c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043f6:	6808      	ldr	r0, [r1, #0]
 80043f8:	22f8      	movs	r2, #248	@ 0xf8
 80043fa:	fa92 f2a2 	rbit	r2, r2
 80043fe:	6963      	ldr	r3, [r4, #20]
 8004400:	fab2 f282 	clz	r2, r2
 8004404:	4093      	lsls	r3, r2
 8004406:	f020 02f8 	bic.w	r2, r0, #248	@ 0xf8
 800440a:	4313      	orrs	r3, r2
 800440c:	600b      	str	r3, [r1, #0]
 800440e:	e756      	b.n	80042be <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004410:	6922      	ldr	r2, [r4, #16]
 8004412:	2501      	movs	r5, #1
 8004414:	b1f2      	cbz	r2, 8004454 <HAL_RCC_OscConfig+0x1a8>
 8004416:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_ENABLE();
 800441a:	fab3 f383 	clz	r3, r3
 800441e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004422:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	2702      	movs	r7, #2
 800442a:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 800442c:	f7ff ff36 	bl	800429c <HAL_GetTick>
 8004430:	4606      	mov	r6, r0
 8004432:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004436:	680a      	ldr	r2, [r1, #0]
 8004438:	fa97 f3a7 	rbit	r3, r7
 800443c:	fab3 f383 	clz	r3, r3
 8004440:	fa05 f303 	lsl.w	r3, r5, r3
 8004444:	4213      	tst	r3, r2
 8004446:	d1d6      	bne.n	80043f6 <HAL_RCC_OscConfig+0x14a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004448:	f7ff ff28 	bl	800429c <HAL_GetTick>
 800444c:	1b80      	subs	r0, r0, r6
 800444e:	2802      	cmp	r0, #2
 8004450:	d9ef      	bls.n	8004432 <HAL_RCC_OscConfig+0x186>
 8004452:	e78a      	b.n	800436a <HAL_RCC_OscConfig+0xbe>
 8004454:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 8004458:	fab3 f383 	clz	r3, r3
 800445c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004460:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	2702      	movs	r7, #2
 8004468:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800446a:	f7ff ff17 	bl	800429c <HAL_GetTick>
 800446e:	4606      	mov	r6, r0
 8004470:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004474:	680a      	ldr	r2, [r1, #0]
 8004476:	fa97 f3a7 	rbit	r3, r7
 800447a:	fab3 f383 	clz	r3, r3
 800447e:	fa05 f303 	lsl.w	r3, r5, r3
 8004482:	4213      	tst	r3, r2
 8004484:	f43f af1b 	beq.w	80042be <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004488:	f7ff ff08 	bl	800429c <HAL_GetTick>
 800448c:	1b80      	subs	r0, r0, r6
 800448e:	2802      	cmp	r0, #2
 8004490:	d9ee      	bls.n	8004470 <HAL_RCC_OscConfig+0x1c4>
 8004492:	e76a      	b.n	800436a <HAL_RCC_OscConfig+0xbe>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004494:	69a2      	ldr	r2, [r4, #24]
 8004496:	4d3f      	ldr	r5, [pc, #252]	@ (8004594 <HAL_RCC_OscConfig+0x2e8>)
 8004498:	483f      	ldr	r0, [pc, #252]	@ (8004598 <HAL_RCC_OscConfig+0x2ec>)
 800449a:	2101      	movs	r1, #1
 800449c:	b302      	cbz	r2, 80044e0 <HAL_RCC_OscConfig+0x234>
 800449e:	fa91 f3a1 	rbit	r3, r1
      __HAL_RCC_LSI_ENABLE();
 80044a2:	fab3 f383 	clz	r3, r3
 80044a6:	4403      	add	r3, r0
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	2602      	movs	r6, #2
 80044ac:	6019      	str	r1, [r3, #0]
      tickstart = HAL_GetTick();
 80044ae:	f7ff fef5 	bl	800429c <HAL_GetTick>
 80044b2:	4607      	mov	r7, r0
 80044b4:	fa96 f3a6 	rbit	r3, r6
 80044b8:	fa96 f3a6 	rbit	r3, r6
 80044bc:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044c0:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 80044c2:	fa96 f3a6 	rbit	r3, r6
 80044c6:	fab3 f383 	clz	r3, r3
 80044ca:	fa01 f303 	lsl.w	r3, r1, r3
 80044ce:	4213      	tst	r3, r2
 80044d0:	f47f aef9 	bne.w	80042c6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044d4:	f7ff fee2 	bl	800429c <HAL_GetTick>
 80044d8:	1bc0      	subs	r0, r0, r7
 80044da:	2802      	cmp	r0, #2
 80044dc:	d9ea      	bls.n	80044b4 <HAL_RCC_OscConfig+0x208>
 80044de:	e744      	b.n	800436a <HAL_RCC_OscConfig+0xbe>
 80044e0:	fa91 f3a1 	rbit	r3, r1
      __HAL_RCC_LSI_DISABLE();
 80044e4:	fab3 f383 	clz	r3, r3
 80044e8:	4403      	add	r3, r0
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	2602      	movs	r6, #2
 80044ee:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80044f0:	f7ff fed4 	bl	800429c <HAL_GetTick>
 80044f4:	4607      	mov	r7, r0
 80044f6:	fa96 f3a6 	rbit	r3, r6
 80044fa:	fa96 f3a6 	rbit	r3, r6
 80044fe:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004502:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8004504:	fa96 f3a6 	rbit	r3, r6
 8004508:	fab3 f383 	clz	r3, r3
 800450c:	fa01 f303 	lsl.w	r3, r1, r3
 8004510:	4213      	tst	r3, r2
 8004512:	f43f aed8 	beq.w	80042c6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004516:	f7ff fec1 	bl	800429c <HAL_GetTick>
 800451a:	1bc0      	subs	r0, r0, r7
 800451c:	2802      	cmp	r0, #2
 800451e:	d9ea      	bls.n	80044f6 <HAL_RCC_OscConfig+0x24a>
 8004520:	e723      	b.n	800436a <HAL_RCC_OscConfig+0xbe>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004522:	491c      	ldr	r1, [pc, #112]	@ (8004594 <HAL_RCC_OscConfig+0x2e8>)
 8004524:	69cb      	ldr	r3, [r1, #28]
 8004526:	00d8      	lsls	r0, r3, #3
 8004528:	d431      	bmi.n	800458e <HAL_RCC_OscConfig+0x2e2>
      __HAL_RCC_PWR_CLK_ENABLE();
 800452a:	69cb      	ldr	r3, [r1, #28]
 800452c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004530:	61cb      	str	r3, [r1, #28]
 8004532:	69cb      	ldr	r3, [r1, #28]
 8004534:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004538:	9301      	str	r3, [sp, #4]
 800453a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800453c:	2501      	movs	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800453e:	4e17      	ldr	r6, [pc, #92]	@ (800459c <HAL_RCC_OscConfig+0x2f0>)
 8004540:	6833      	ldr	r3, [r6, #0]
 8004542:	05da      	lsls	r2, r3, #23
 8004544:	d52c      	bpl.n	80045a0 <HAL_RCC_OscConfig+0x2f4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004546:	68e3      	ldr	r3, [r4, #12]
 8004548:	2b01      	cmp	r3, #1
 800454a:	d139      	bne.n	80045c0 <HAL_RCC_OscConfig+0x314>
 800454c:	6a0b      	ldr	r3, [r1, #32]
 800454e:	f043 0301 	orr.w	r3, r3, #1
 8004552:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 8004554:	f7ff fea2 	bl	800429c <HAL_GetTick>
 8004558:	2602      	movs	r6, #2
 800455a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800455c:	f04f 0801 	mov.w	r8, #1
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004560:	f241 3988 	movw	r9, #5000	@ 0x1388
 8004564:	fa96 f3a6 	rbit	r3, r6
 8004568:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800456c:	6a0a      	ldr	r2, [r1, #32]
 800456e:	fa96 f3a6 	rbit	r3, r6
 8004572:	fab3 f383 	clz	r3, r3
 8004576:	fa08 f303 	lsl.w	r3, r8, r3
 800457a:	4213      	tst	r3, r2
 800457c:	d052      	beq.n	8004624 <HAL_RCC_OscConfig+0x378>
    if(pwrclkchanged == SET)
 800457e:	2d00      	cmp	r5, #0
 8004580:	f43f aea5 	beq.w	80042ce <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004584:	69cb      	ldr	r3, [r1, #28]
 8004586:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800458a:	61cb      	str	r3, [r1, #28]
 800458c:	e69f      	b.n	80042ce <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 800458e:	2500      	movs	r5, #0
 8004590:	e7d5      	b.n	800453e <HAL_RCC_OscConfig+0x292>
 8004592:	bf00      	nop
 8004594:	40021000 	.word	0x40021000
 8004598:	10908120 	.word	0x10908120
 800459c:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045a0:	6833      	ldr	r3, [r6, #0]
 80045a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045a6:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80045a8:	f7ff fe78 	bl	800429c <HAL_GetTick>
 80045ac:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ae:	6833      	ldr	r3, [r6, #0]
 80045b0:	05db      	lsls	r3, r3, #23
 80045b2:	d4c8      	bmi.n	8004546 <HAL_RCC_OscConfig+0x29a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045b4:	f7ff fe72 	bl	800429c <HAL_GetTick>
 80045b8:	1bc0      	subs	r0, r0, r7
 80045ba:	2864      	cmp	r0, #100	@ 0x64
 80045bc:	d9f7      	bls.n	80045ae <HAL_RCC_OscConfig+0x302>
 80045be:	e6d4      	b.n	800436a <HAL_RCC_OscConfig+0xbe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045c0:	bb13      	cbnz	r3, 8004608 <HAL_RCC_OscConfig+0x35c>
 80045c2:	6a0b      	ldr	r3, [r1, #32]
 80045c4:	f023 0301 	bic.w	r3, r3, #1
 80045c8:	620b      	str	r3, [r1, #32]
 80045ca:	6a0b      	ldr	r3, [r1, #32]
 80045cc:	f023 0304 	bic.w	r3, r3, #4
 80045d0:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 80045d2:	f7ff fe63 	bl	800429c <HAL_GetTick>
 80045d6:	2602      	movs	r6, #2
 80045d8:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045da:	f04f 0801 	mov.w	r8, #1
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045de:	f241 3988 	movw	r9, #5000	@ 0x1388
 80045e2:	fa96 f3a6 	rbit	r3, r6
 80045e6:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045ea:	6a0a      	ldr	r2, [r1, #32]
 80045ec:	fa96 f3a6 	rbit	r3, r6
 80045f0:	fab3 f383 	clz	r3, r3
 80045f4:	fa08 f303 	lsl.w	r3, r8, r3
 80045f8:	4213      	tst	r3, r2
 80045fa:	d0c0      	beq.n	800457e <HAL_RCC_OscConfig+0x2d2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045fc:	f7ff fe4e 	bl	800429c <HAL_GetTick>
 8004600:	1bc0      	subs	r0, r0, r7
 8004602:	4548      	cmp	r0, r9
 8004604:	d9ed      	bls.n	80045e2 <HAL_RCC_OscConfig+0x336>
 8004606:	e6b0      	b.n	800436a <HAL_RCC_OscConfig+0xbe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004608:	2b05      	cmp	r3, #5
 800460a:	6a0b      	ldr	r3, [r1, #32]
 800460c:	d103      	bne.n	8004616 <HAL_RCC_OscConfig+0x36a>
 800460e:	f043 0304 	orr.w	r3, r3, #4
 8004612:	620b      	str	r3, [r1, #32]
 8004614:	e79a      	b.n	800454c <HAL_RCC_OscConfig+0x2a0>
 8004616:	f023 0301 	bic.w	r3, r3, #1
 800461a:	620b      	str	r3, [r1, #32]
 800461c:	6a0b      	ldr	r3, [r1, #32]
 800461e:	f023 0304 	bic.w	r3, r3, #4
 8004622:	e796      	b.n	8004552 <HAL_RCC_OscConfig+0x2a6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004624:	f7ff fe3a 	bl	800429c <HAL_GetTick>
 8004628:	1bc0      	subs	r0, r0, r7
 800462a:	4548      	cmp	r0, r9
 800462c:	d99a      	bls.n	8004564 <HAL_RCC_OscConfig+0x2b8>
 800462e:	e69c      	b.n	800436a <HAL_RCC_OscConfig+0xbe>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004630:	493f      	ldr	r1, [pc, #252]	@ (8004730 <HAL_RCC_OscConfig+0x484>)
 8004632:	684b      	ldr	r3, [r1, #4]
 8004634:	f003 030c 	and.w	r3, r3, #12
 8004638:	2b08      	cmp	r3, #8
 800463a:	f43f ae6d 	beq.w	8004318 <HAL_RCC_OscConfig+0x6c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800463e:	2a02      	cmp	r2, #2
 8004640:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004644:	d150      	bne.n	80046e8 <HAL_RCC_OscConfig+0x43c>
 8004646:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800464a:	fab3 f383 	clz	r3, r3
 800464e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004652:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	2200      	movs	r2, #0
 800465a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800465c:	f7ff fe1e 	bl	800429c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004660:	f8df 80d0 	ldr.w	r8, [pc, #208]	@ 8004734 <HAL_RCC_OscConfig+0x488>
        tickstart = HAL_GetTick();
 8004664:	4606      	mov	r6, r0
 8004666:	f04f 7700 	mov.w	r7, #33554432	@ 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800466a:	2501      	movs	r5, #1
 800466c:	fa97 f3a7 	rbit	r3, r7
 8004670:	680a      	ldr	r2, [r1, #0]
 8004672:	fa97 f3a7 	rbit	r3, r7
 8004676:	fab3 f383 	clz	r3, r3
 800467a:	fa05 f303 	lsl.w	r3, r5, r3
 800467e:	4213      	tst	r3, r2
 8004680:	d12c      	bne.n	80046dc <HAL_RCC_OscConfig+0x430>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004682:	e9d4 0308 	ldrd	r0, r3, [r4, #32]
 8004686:	684a      	ldr	r2, [r1, #4]
 8004688:	4303      	orrs	r3, r0
 800468a:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 800468e:	4313      	orrs	r3, r2
 8004690:	604b      	str	r3, [r1, #4]
 8004692:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004696:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 800469a:	fab3 f383 	clz	r3, r3
 800469e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80046a2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80046a6:	009b      	lsls	r3, r3, #2
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046a8:	4f22      	ldr	r7, [pc, #136]	@ (8004734 <HAL_RCC_OscConfig+0x488>)
        __HAL_RCC_PLL_ENABLE();
 80046aa:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 80046ac:	f7ff fdf6 	bl	800429c <HAL_GetTick>
 80046b0:	f04f 7500 	mov.w	r5, #33554432	@ 0x2000000
 80046b4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046b6:	2601      	movs	r6, #1
 80046b8:	fa95 f3a5 	rbit	r3, r5
 80046bc:	680a      	ldr	r2, [r1, #0]
 80046be:	fa95 f3a5 	rbit	r3, r5
 80046c2:	fab3 f383 	clz	r3, r3
 80046c6:	fa06 f303 	lsl.w	r3, r6, r3
 80046ca:	4213      	tst	r3, r2
 80046cc:	f47f ae03 	bne.w	80042d6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046d0:	f7ff fde4 	bl	800429c <HAL_GetTick>
 80046d4:	1b00      	subs	r0, r0, r4
 80046d6:	42b8      	cmp	r0, r7
 80046d8:	d9ee      	bls.n	80046b8 <HAL_RCC_OscConfig+0x40c>
 80046da:	e646      	b.n	800436a <HAL_RCC_OscConfig+0xbe>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046dc:	f7ff fdde 	bl	800429c <HAL_GetTick>
 80046e0:	1b83      	subs	r3, r0, r6
 80046e2:	4543      	cmp	r3, r8
 80046e4:	d9c2      	bls.n	800466c <HAL_RCC_OscConfig+0x3c0>
 80046e6:	e640      	b.n	800436a <HAL_RCC_OscConfig+0xbe>
 80046e8:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80046ec:	fab3 f383 	clz	r3, r3
 80046f0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80046f4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	2200      	movs	r2, #0
 80046fc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80046fe:	f7ff fdcd 	bl	800429c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004702:	4f0c      	ldr	r7, [pc, #48]	@ (8004734 <HAL_RCC_OscConfig+0x488>)
        tickstart = HAL_GetTick();
 8004704:	4604      	mov	r4, r0
 8004706:	f04f 7500 	mov.w	r5, #33554432	@ 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800470a:	2601      	movs	r6, #1
 800470c:	fa95 f3a5 	rbit	r3, r5
 8004710:	680a      	ldr	r2, [r1, #0]
 8004712:	fa95 f3a5 	rbit	r3, r5
 8004716:	fab3 f383 	clz	r3, r3
 800471a:	fa06 f303 	lsl.w	r3, r6, r3
 800471e:	4213      	tst	r3, r2
 8004720:	f43f add9 	beq.w	80042d6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004724:	f7ff fdba 	bl	800429c <HAL_GetTick>
 8004728:	1b00      	subs	r0, r0, r4
 800472a:	42b8      	cmp	r0, r7
 800472c:	d9ee      	bls.n	800470c <HAL_RCC_OscConfig+0x460>
 800472e:	e61c      	b.n	800436a <HAL_RCC_OscConfig+0xbe>
 8004730:	40021000 	.word	0x40021000
 8004734:	00030d40 	.word	0x00030d40

08004738 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8004738:	4a4d      	ldr	r2, [pc, #308]	@ (8004870 <HAL_RCC_ClockConfig+0x138>)
{
 800473a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800473c:	6813      	ldr	r3, [r2, #0]
 800473e:	f003 0307 	and.w	r3, r3, #7
 8004742:	428b      	cmp	r3, r1
{
 8004744:	4604      	mov	r4, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8004746:	d311      	bcc.n	800476c <HAL_RCC_ClockConfig+0x34>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004748:	6822      	ldr	r2, [r4, #0]
 800474a:	0795      	lsls	r5, r2, #30
 800474c:	d41a      	bmi.n	8004784 <HAL_RCC_ClockConfig+0x4c>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800474e:	07d0      	lsls	r0, r2, #31
 8004750:	d420      	bmi.n	8004794 <HAL_RCC_ClockConfig+0x5c>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8004752:	4a47      	ldr	r2, [pc, #284]	@ (8004870 <HAL_RCC_ClockConfig+0x138>)
 8004754:	6813      	ldr	r3, [r2, #0]
 8004756:	f003 0307 	and.w	r3, r3, #7
 800475a:	428b      	cmp	r3, r1
 800475c:	d86c      	bhi.n	8004838 <HAL_RCC_ClockConfig+0x100>
      return HAL_ERROR;
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800475e:	6822      	ldr	r2, [r4, #0]
 8004760:	0751      	lsls	r1, r2, #29
 8004762:	d474      	bmi.n	800484e <HAL_RCC_ClockConfig+0x116>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004764:	0713      	lsls	r3, r2, #28
 8004766:	d47a      	bmi.n	800485e <HAL_RCC_ClockConfig+0x126>
  //SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];

  /* Configure the source of time base considering new system clocks settings*/
  //HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
 8004768:	2000      	movs	r0, #0
 800476a:	e00a      	b.n	8004782 <HAL_RCC_ClockConfig+0x4a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800476c:	6813      	ldr	r3, [r2, #0]
 800476e:	f023 0307 	bic.w	r3, r3, #7
 8004772:	430b      	orrs	r3, r1
 8004774:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004776:	6813      	ldr	r3, [r2, #0]
 8004778:	f003 0307 	and.w	r3, r3, #7
 800477c:	428b      	cmp	r3, r1
 800477e:	d0e3      	beq.n	8004748 <HAL_RCC_ClockConfig+0x10>
      return HAL_ERROR;
 8004780:	2001      	movs	r0, #1
}
 8004782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004784:	483b      	ldr	r0, [pc, #236]	@ (8004874 <HAL_RCC_ClockConfig+0x13c>)
 8004786:	68a5      	ldr	r5, [r4, #8]
 8004788:	6843      	ldr	r3, [r0, #4]
 800478a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800478e:	432b      	orrs	r3, r5
 8004790:	6043      	str	r3, [r0, #4]
 8004792:	e7dc      	b.n	800474e <HAL_RCC_ClockConfig+0x16>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004794:	6862      	ldr	r2, [r4, #4]
 8004796:	4d37      	ldr	r5, [pc, #220]	@ (8004874 <HAL_RCC_ClockConfig+0x13c>)
 8004798:	2a01      	cmp	r2, #1
 800479a:	d125      	bne.n	80047e8 <HAL_RCC_ClockConfig+0xb0>
 800479c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80047a0:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047a4:	6828      	ldr	r0, [r5, #0]
 80047a6:	fa93 f3a3 	rbit	r3, r3
 80047aa:	fab3 f383 	clz	r3, r3
 80047ae:	fa02 f303 	lsl.w	r3, r2, r3
 80047b2:	4203      	tst	r3, r0
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047b4:	d0e4      	beq.n	8004780 <HAL_RCC_ClockConfig+0x48>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047b6:	686b      	ldr	r3, [r5, #4]
 80047b8:	f023 0303 	bic.w	r3, r3, #3
 80047bc:	4313      	orrs	r3, r2
 80047be:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80047c0:	f7ff fd6c 	bl	800429c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047c4:	6863      	ldr	r3, [r4, #4]
 80047c6:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 80047c8:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047ca:	f241 3788 	movw	r7, #5000	@ 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047ce:	d11c      	bne.n	800480a <HAL_RCC_ClockConfig+0xd2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80047d0:	686b      	ldr	r3, [r5, #4]
 80047d2:	f003 030c 	and.w	r3, r3, #12
 80047d6:	2b04      	cmp	r3, #4
 80047d8:	d0bb      	beq.n	8004752 <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047da:	f7ff fd5f 	bl	800429c <HAL_GetTick>
 80047de:	1b80      	subs	r0, r0, r6
 80047e0:	42b8      	cmp	r0, r7
 80047e2:	d9f5      	bls.n	80047d0 <HAL_RCC_ClockConfig+0x98>
          return HAL_TIMEOUT;
 80047e4:	2003      	movs	r0, #3
 80047e6:	e7cc      	b.n	8004782 <HAL_RCC_ClockConfig+0x4a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047e8:	2a02      	cmp	r2, #2
 80047ea:	bf0c      	ite	eq
 80047ec:	f04f 7300 	moveq.w	r3, #33554432	@ 0x2000000
 80047f0:	2302      	movne	r3, #2
 80047f2:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047f6:	682e      	ldr	r6, [r5, #0]
 80047f8:	fa93 f3a3 	rbit	r3, r3
 80047fc:	2001      	movs	r0, #1
 80047fe:	fab3 f383 	clz	r3, r3
 8004802:	fa00 f303 	lsl.w	r3, r0, r3
 8004806:	4233      	tst	r3, r6
 8004808:	e7d4      	b.n	80047b4 <HAL_RCC_ClockConfig+0x7c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800480a:	2b02      	cmp	r3, #2
 800480c:	d10f      	bne.n	800482e <HAL_RCC_ClockConfig+0xf6>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800480e:	686b      	ldr	r3, [r5, #4]
 8004810:	f003 030c 	and.w	r3, r3, #12
 8004814:	2b08      	cmp	r3, #8
 8004816:	d09c      	beq.n	8004752 <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004818:	f7ff fd40 	bl	800429c <HAL_GetTick>
 800481c:	1b80      	subs	r0, r0, r6
 800481e:	42b8      	cmp	r0, r7
 8004820:	d9f5      	bls.n	800480e <HAL_RCC_ClockConfig+0xd6>
 8004822:	e7df      	b.n	80047e4 <HAL_RCC_ClockConfig+0xac>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004824:	f7ff fd3a 	bl	800429c <HAL_GetTick>
 8004828:	1b80      	subs	r0, r0, r6
 800482a:	42b8      	cmp	r0, r7
 800482c:	d8da      	bhi.n	80047e4 <HAL_RCC_ClockConfig+0xac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800482e:	686b      	ldr	r3, [r5, #4]
 8004830:	f013 0f0c 	tst.w	r3, #12
 8004834:	d1f6      	bne.n	8004824 <HAL_RCC_ClockConfig+0xec>
 8004836:	e78c      	b.n	8004752 <HAL_RCC_ClockConfig+0x1a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004838:	6813      	ldr	r3, [r2, #0]
 800483a:	f023 0307 	bic.w	r3, r3, #7
 800483e:	430b      	orrs	r3, r1
 8004840:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004842:	6813      	ldr	r3, [r2, #0]
 8004844:	f003 0307 	and.w	r3, r3, #7
 8004848:	428b      	cmp	r3, r1
 800484a:	d199      	bne.n	8004780 <HAL_RCC_ClockConfig+0x48>
 800484c:	e787      	b.n	800475e <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800484e:	4909      	ldr	r1, [pc, #36]	@ (8004874 <HAL_RCC_ClockConfig+0x13c>)
 8004850:	68e0      	ldr	r0, [r4, #12]
 8004852:	684b      	ldr	r3, [r1, #4]
 8004854:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004858:	4303      	orrs	r3, r0
 800485a:	604b      	str	r3, [r1, #4]
 800485c:	e782      	b.n	8004764 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800485e:	4a05      	ldr	r2, [pc, #20]	@ (8004874 <HAL_RCC_ClockConfig+0x13c>)
 8004860:	6921      	ldr	r1, [r4, #16]
 8004862:	6853      	ldr	r3, [r2, #4]
 8004864:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8004868:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800486c:	6053      	str	r3, [r2, #4]
 800486e:	e77b      	b.n	8004768 <HAL_RCC_ClockConfig+0x30>
 8004870:	40022000 	.word	0x40022000
 8004874:	40021000 	.word	0x40021000

08004878 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004878:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800487c:	f8df 8168 	ldr.w	r8, [pc, #360]	@ 80049e8 <HAL_GPIO_Init+0x170>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004880:	4c5a      	ldr	r4, [pc, #360]	@ (80049ec <HAL_GPIO_Init+0x174>)
  uint32_t position = 0x00U;
 8004882:	2300      	movs	r3, #0
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8004884:	f04f 090f 	mov.w	r9, #15
  while (((GPIO_Init->Pin) >> position) != RESET)
 8004888:	680a      	ldr	r2, [r1, #0]
 800488a:	fa32 f503 	lsrs.w	r5, r2, r3
 800488e:	d102      	bne.n	8004896 <HAL_GPIO_Init+0x1e>
      }
    }
    
    position++;
  }
}
 8004890:	b003      	add	sp, #12
 8004892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004896:	2501      	movs	r5, #1
 8004898:	fa05 fa03 	lsl.w	sl, r5, r3
    if(iocurrent)
 800489c:	ea1a 0202 	ands.w	r2, sl, r2
 80048a0:	f000 8098 	beq.w	80049d4 <HAL_GPIO_Init+0x15c>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80048a4:	684d      	ldr	r5, [r1, #4]
 80048a6:	f025 0e10 	bic.w	lr, r5, #16
 80048aa:	f1be 0f02 	cmp.w	lr, #2
 80048ae:	d111      	bne.n	80048d4 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->AFR[position >> 3];
 80048b0:	08df      	lsrs	r7, r3, #3
 80048b2:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80048b6:	f003 0c07 	and.w	ip, r3, #7
        temp = GPIOx->AFR[position >> 3];
 80048ba:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80048bc:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80048c0:	fa09 fb0c 	lsl.w	fp, r9, ip
 80048c4:	ea26 0b0b 	bic.w	fp, r6, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80048c8:	690e      	ldr	r6, [r1, #16]
 80048ca:	fa06 f60c 	lsl.w	r6, r6, ip
 80048ce:	ea46 060b 	orr.w	r6, r6, fp
        GPIOx->AFR[position >> 3] = temp;
 80048d2:	623e      	str	r6, [r7, #32]
      temp = GPIOx->MODER;
 80048d4:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80048d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80048dc:	2603      	movs	r6, #3
 80048de:	fa06 f70c 	lsl.w	r7, r6, ip
 80048e2:	ea2b 0b07 	bic.w	fp, fp, r7
 80048e6:	43fe      	mvns	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80048e8:	f005 0703 	and.w	r7, r5, #3
 80048ec:	fa07 f70c 	lsl.w	r7, r7, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80048f0:	f10e 3eff 	add.w	lr, lr, #4294967295	@ 0xffffffff
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80048f4:	ea47 070b 	orr.w	r7, r7, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80048f8:	f1be 0f01 	cmp.w	lr, #1
      GPIOx->MODER = temp;
 80048fc:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80048fe:	d810      	bhi.n	8004922 <HAL_GPIO_Init+0xaa>
        temp = GPIOx->OSPEEDR;
 8004900:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004902:	ea06 0e07 	and.w	lr, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004906:	68cf      	ldr	r7, [r1, #12]
 8004908:	fa07 f70c 	lsl.w	r7, r7, ip
 800490c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8004910:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8004912:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004914:	ea27 0e0a 	bic.w	lr, r7, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004918:	092f      	lsrs	r7, r5, #4
 800491a:	409f      	lsls	r7, r3
 800491c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8004920:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8004922:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004924:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004926:	688e      	ldr	r6, [r1, #8]
 8004928:	fa06 f60c 	lsl.w	r6, r6, ip
 800492c:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 800492e:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004930:	00ee      	lsls	r6, r5, #3
 8004932:	d54f      	bpl.n	80049d4 <HAL_GPIO_Init+0x15c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004934:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8004938:	f046 0601 	orr.w	r6, r6, #1
 800493c:	f8c8 6018 	str.w	r6, [r8, #24]
 8004940:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8004944:	f023 0703 	bic.w	r7, r3, #3
 8004948:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 800494c:	f006 0601 	and.w	r6, r6, #1
 8004950:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
 8004954:	9601      	str	r6, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8004956:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800495a:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 800495c:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800495e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8004962:	fa09 fe0c 	lsl.w	lr, r9, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004966:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800496a:	ea26 0e0e 	bic.w	lr, r6, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800496e:	d033      	beq.n	80049d8 <HAL_GPIO_Init+0x160>
 8004970:	4e1f      	ldr	r6, [pc, #124]	@ (80049f0 <HAL_GPIO_Init+0x178>)
 8004972:	42b0      	cmp	r0, r6
 8004974:	d032      	beq.n	80049dc <HAL_GPIO_Init+0x164>
 8004976:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800497a:	42b0      	cmp	r0, r6
 800497c:	d030      	beq.n	80049e0 <HAL_GPIO_Init+0x168>
 800497e:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8004982:	42b0      	cmp	r0, r6
 8004984:	d02e      	beq.n	80049e4 <HAL_GPIO_Init+0x16c>
 8004986:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800498a:	42b0      	cmp	r0, r6
 800498c:	bf14      	ite	ne
 800498e:	2605      	movne	r6, #5
 8004990:	2604      	moveq	r6, #4
 8004992:	fa06 f60c 	lsl.w	r6, r6, ip
 8004996:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 800499a:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 800499c:	6826      	ldr	r6, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 800499e:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80049a0:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
        temp &= ~((uint32_t)iocurrent);
 80049a4:	bf0c      	ite	eq
 80049a6:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80049a8:	4316      	orrne	r6, r2
        EXTI->IMR = temp;
 80049aa:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 80049ac:	6866      	ldr	r6, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80049ae:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
        temp &= ~((uint32_t)iocurrent);
 80049b2:	bf0c      	ite	eq
 80049b4:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80049b6:	4316      	orrne	r6, r2
        EXTI->EMR = temp;
 80049b8:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 80049ba:	68a6      	ldr	r6, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80049bc:	f415 1f80 	tst.w	r5, #1048576	@ 0x100000
        temp &= ~((uint32_t)iocurrent);
 80049c0:	bf0c      	ite	eq
 80049c2:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80049c4:	4316      	orrne	r6, r2
        EXTI->RTSR = temp;
 80049c6:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 80049c8:	68e6      	ldr	r6, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80049ca:	02ad      	lsls	r5, r5, #10
        temp &= ~((uint32_t)iocurrent);
 80049cc:	bf54      	ite	pl
 80049ce:	403e      	andpl	r6, r7
          temp |= iocurrent;
 80049d0:	4316      	orrmi	r6, r2
        EXTI->FTSR = temp;
 80049d2:	60e6      	str	r6, [r4, #12]
    position++;
 80049d4:	3301      	adds	r3, #1
 80049d6:	e757      	b.n	8004888 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80049d8:	2600      	movs	r6, #0
 80049da:	e7da      	b.n	8004992 <HAL_GPIO_Init+0x11a>
 80049dc:	2601      	movs	r6, #1
 80049de:	e7d8      	b.n	8004992 <HAL_GPIO_Init+0x11a>
 80049e0:	2602      	movs	r6, #2
 80049e2:	e7d6      	b.n	8004992 <HAL_GPIO_Init+0x11a>
 80049e4:	2603      	movs	r6, #3
 80049e6:	e7d4      	b.n	8004992 <HAL_GPIO_Init+0x11a>
 80049e8:	40021000 	.word	0x40021000
 80049ec:	40010400 	.word	0x40010400
 80049f0:	48000400 	.word	0x48000400

080049f4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80049f4:	b10a      	cbz	r2, 80049fa <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80049f6:	6181      	str	r1, [r0, #24]
 80049f8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80049fa:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 80049fc:	4770      	bx	lr
 80049fe:	0000      	movs	r0, r0

08004a00 <UART_SetConfig>:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8004a00:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a02:	6883      	ldr	r3, [r0, #8]
 8004a04:	69c1      	ldr	r1, [r0, #28]
{
 8004a06:	b530      	push	{r4, r5, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a08:	6905      	ldr	r5, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8004a0a:	6814      	ldr	r4, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a0c:	432b      	orrs	r3, r5
 8004a0e:	6945      	ldr	r5, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8004a10:	f424 4416 	bic.w	r4, r4, #38400	@ 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a14:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8004a16:	f024 040c 	bic.w	r4, r4, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a1a:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8004a1c:	4323      	orrs	r3, r4
 8004a1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a20:	6853      	ldr	r3, [r2, #4]
 8004a22:	68c4      	ldr	r4, [r0, #12]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8004a24:	6a05      	ldr	r5, [r0, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a26:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004a2a:	4323      	orrs	r3, r4
 8004a2c:	6053      	str	r3, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8004a2e:	6894      	ldr	r4, [r2, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8004a30:	6983      	ldr	r3, [r0, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8004a32:	f424 6430 	bic.w	r4, r4, #2816	@ 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8004a36:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8004a38:	4323      	orrs	r3, r4
 8004a3a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a3c:	4b42      	ldr	r3, [pc, #264]	@ (8004b48 <UART_SetConfig+0x148>)
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d111      	bne.n	8004a66 <UART_SetConfig+0x66>
 8004a42:	f503 4358 	add.w	r3, r3, #55296	@ 0xd800
 8004a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a48:	f003 0303 	and.w	r3, r3, #3
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	d05f      	beq.n	8004b10 <UART_SetConfig+0x110>
 8004a50:	2b03      	cmp	r3, #3
 8004a52:	d065      	beq.n	8004b20 <UART_SetConfig+0x120>

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a54:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
  {
    switch (clocksource)
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004a58:	6841      	ldr	r1, [r0, #4]
 8004a5a:	ea4f 0351 	mov.w	r3, r1, lsr #1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a5e:	d045      	beq.n	8004aec <UART_SetConfig+0xec>
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004a60:	f503 03e1 	add.w	r3, r3, #7372800	@ 0x708000
 8004a64:	e048      	b.n	8004af8 <UART_SetConfig+0xf8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a66:	4b39      	ldr	r3, [pc, #228]	@ (8004b4c <UART_SetConfig+0x14c>)
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d112      	bne.n	8004a92 <UART_SetConfig+0x92>
 8004a6c:	f503 33e6 	add.w	r3, r3, #117760	@ 0x1cc00
 8004a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a72:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004a7a:	d049      	beq.n	8004b10 <UART_SetConfig+0x110>
 8004a7c:	d9ea      	bls.n	8004a54 <UART_SetConfig+0x54>
 8004a7e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004a82:	d04d      	beq.n	8004b20 <UART_SetConfig+0x120>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a84:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
        ret = HAL_ERROR;
 8004a88:	f04f 0001 	mov.w	r0, #1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a8c:	d15b      	bne.n	8004b46 <UART_SetConfig+0x146>
  uint16_t usartdiv                   = 0x0000U;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	e053      	b.n	8004b3a <UART_SetConfig+0x13a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a92:	4b2f      	ldr	r3, [pc, #188]	@ (8004b50 <UART_SetConfig+0x150>)
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d10b      	bne.n	8004ab0 <UART_SetConfig+0xb0>
 8004a98:	f503 33e4 	add.w	r3, r3, #116736	@ 0x1c800
 8004a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a9e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004aa2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004aa6:	d033      	beq.n	8004b10 <UART_SetConfig+0x110>
 8004aa8:	d9d4      	bls.n	8004a54 <UART_SetConfig+0x54>
 8004aaa:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004aae:	e7e8      	b.n	8004a82 <UART_SetConfig+0x82>
 8004ab0:	4b28      	ldr	r3, [pc, #160]	@ (8004b54 <UART_SetConfig+0x154>)
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d10b      	bne.n	8004ace <UART_SetConfig+0xce>
 8004ab6:	f503 33e2 	add.w	r3, r3, #115712	@ 0x1c400
 8004aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004abc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004ac0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004ac4:	d024      	beq.n	8004b10 <UART_SetConfig+0x110>
 8004ac6:	d9c5      	bls.n	8004a54 <UART_SetConfig+0x54>
 8004ac8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004acc:	e7d9      	b.n	8004a82 <UART_SetConfig+0x82>
 8004ace:	4b22      	ldr	r3, [pc, #136]	@ (8004b58 <UART_SetConfig+0x158>)
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d1d7      	bne.n	8004a84 <UART_SetConfig+0x84>
 8004ad4:	f503 33e0 	add.w	r3, r3, #114688	@ 0x1c000
 8004ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ada:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8004ade:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004ae2:	d015      	beq.n	8004b10 <UART_SetConfig+0x110>
 8004ae4:	d9b6      	bls.n	8004a54 <UART_SetConfig+0x54>
 8004ae6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004aea:	e7ca      	b.n	8004a82 <UART_SetConfig+0x82>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004aec:	f503 0361 	add.w	r3, r3, #14745600	@ 0xe10000
 8004af0:	e01f      	b.n	8004b32 <UART_SetConfig+0x132>
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004af2:	084b      	lsrs	r3, r1, #1
 8004af4:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004af8:	fbb3 f3f1 	udiv	r3, r3, r1
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b00:	2000      	movs	r0, #0
        ret = HAL_ERROR;
        break;
    }
  }

  return ret;
 8004b02:	e020      	b.n	8004b46 <UART_SetConfig+0x146>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004b04:	084b      	lsrs	r3, r1, #1
 8004b06:	f503 0374 	add.w	r3, r3, #15990784	@ 0xf40000
 8004b0a:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 8004b0e:	e7f3      	b.n	8004af8 <UART_SetConfig+0xf8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b10:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8004b14:	6841      	ldr	r1, [r0, #4]
 8004b16:	d1ec      	bne.n	8004af2 <UART_SetConfig+0xf2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004b18:	084b      	lsrs	r3, r1, #1
 8004b1a:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8004b1e:	e008      	b.n	8004b32 <UART_SetConfig+0x132>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b20:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8004b24:	6841      	ldr	r1, [r0, #4]
 8004b26:	d1ed      	bne.n	8004b04 <UART_SetConfig+0x104>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004b28:	084b      	lsrs	r3, r1, #1
 8004b2a:	f103 73f4 	add.w	r3, r3, #31981568	@ 0x1e80000
 8004b2e:	f503 4390 	add.w	r3, r3, #18432	@ 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004b32:	fbb3 f3f1 	udiv	r3, r3, r1
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b36:	2000      	movs	r0, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004b38:	b29b      	uxth	r3, r3
    brrtemp = usartdiv & 0xFFF0U;
 8004b3a:	f023 010f 	bic.w	r1, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b3e:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8004b42:	430b      	orrs	r3, r1
 8004b44:	60d3      	str	r3, [r2, #12]

}
 8004b46:	bd30      	pop	{r4, r5, pc}
 8004b48:	40013800 	.word	0x40013800
 8004b4c:	40004400 	.word	0x40004400
 8004b50:	40004800 	.word	0x40004800
 8004b54:	40004c00 	.word	0x40004c00
 8004b58:	40005000 	.word	0x40005000

08004b5c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b60:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8004b64:	4604      	mov	r4, r0
 8004b66:	4616      	mov	r6, r2
 8004b68:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b6a:	6825      	ldr	r5, [r4, #0]
 8004b6c:	69eb      	ldr	r3, [r5, #28]
 8004b6e:	ea31 0303 	bics.w	r3, r1, r3
 8004b72:	bf0c      	ite	eq
 8004b74:	2301      	moveq	r3, #1
 8004b76:	2300      	movne	r3, #0
 8004b78:	42b3      	cmp	r3, r6
 8004b7a:	d001      	beq.n	8004b80 <UART_WaitOnFlagUntilTimeout+0x24>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8004b7c:	2000      	movs	r0, #0
 8004b7e:	e016      	b.n	8004bae <UART_WaitOnFlagUntilTimeout+0x52>
    if(Timeout != HAL_MAX_DELAY)
 8004b80:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8004b84:	d0f2      	beq.n	8004b6c <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8004b86:	f1b8 0f00 	cmp.w	r8, #0
 8004b8a:	d112      	bne.n	8004bb2 <UART_WaitOnFlagUntilTimeout+0x56>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b8c:	682b      	ldr	r3, [r5, #0]
 8004b8e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004b92:	602b      	str	r3, [r5, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b94:	68ab      	ldr	r3, [r5, #8]
 8004b96:	f023 0301 	bic.w	r3, r3, #1
 8004b9a:	60ab      	str	r3, [r5, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8004b9c:	2320      	movs	r3, #32
 8004b9e:	f884 3069 	strb.w	r3, [r4, #105]	@ 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8004ba2:	f884 306a 	strb.w	r3, [r4, #106]	@ 0x6a
        __HAL_UNLOCK(huart);
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
        return HAL_TIMEOUT;
 8004bac:	2003      	movs	r0, #3
}
 8004bae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8004bb2:	f7ff fb73 	bl	800429c <HAL_GetTick>
 8004bb6:	1bc0      	subs	r0, r0, r7
 8004bb8:	4540      	cmp	r0, r8
 8004bba:	d9d6      	bls.n	8004b6a <UART_WaitOnFlagUntilTimeout+0xe>
 8004bbc:	e7e6      	b.n	8004b8c <UART_WaitOnFlagUntilTimeout+0x30>

08004bbe <UART_CheckIdleState>:
{
 8004bbe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004bc0:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bc2:	2100      	movs	r1, #0
 8004bc4:	66c1      	str	r1, [r0, #108]	@ 0x6c
  tickstart = HAL_GetTick();
 8004bc6:	f7ff fb69 	bl	800429c <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004bca:	6826      	ldr	r6, [r4, #0]
 8004bcc:	6833      	ldr	r3, [r6, #0]
 8004bce:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8004bd0:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004bd2:	d416      	bmi.n	8004c02 <UART_CheckIdleState+0x44>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004bd4:	6833      	ldr	r3, [r6, #0]
 8004bd6:	075b      	lsls	r3, r3, #29
 8004bd8:	d50a      	bpl.n	8004bf0 <UART_CheckIdleState+0x32>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bda:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004bde:	9300      	str	r3, [sp, #0]
 8004be0:	2200      	movs	r2, #0
 8004be2:	462b      	mov	r3, r5
 8004be4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004be8:	4620      	mov	r0, r4
 8004bea:	f7ff ffb7 	bl	8004b5c <UART_WaitOnFlagUntilTimeout>
 8004bee:	b9a0      	cbnz	r0, 8004c1a <UART_CheckIdleState+0x5c>
  huart->gState  = HAL_UART_STATE_READY;
 8004bf0:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8004bf2:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8004bf4:	f884 3069 	strb.w	r3, [r4, #105]	@ 0x69
  __HAL_UNLOCK(huart);
 8004bf8:	f884 0068 	strb.w	r0, [r4, #104]	@ 0x68
  huart->RxState = HAL_UART_STATE_READY;
 8004bfc:	f884 306a 	strb.w	r3, [r4, #106]	@ 0x6a
  return HAL_OK;
 8004c00:	e00c      	b.n	8004c1c <UART_CheckIdleState+0x5e>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c02:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004c06:	9300      	str	r3, [sp, #0]
 8004c08:	460a      	mov	r2, r1
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004c10:	4620      	mov	r0, r4
 8004c12:	f7ff ffa3 	bl	8004b5c <UART_WaitOnFlagUntilTimeout>
 8004c16:	2800      	cmp	r0, #0
 8004c18:	d0dc      	beq.n	8004bd4 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8004c1a:	2003      	movs	r0, #3
}
 8004c1c:	b002      	add	sp, #8
 8004c1e:	bd70      	pop	{r4, r5, r6, pc}

08004c20 <HAL_UART_Init>:
{
 8004c20:	b538      	push	{r3, r4, r5, lr}
  if(huart == NULL)
 8004c22:	4604      	mov	r4, r0
 8004c24:	b320      	cbz	r0, 8004c70 <HAL_UART_Init+0x50>
  if(huart->gState == HAL_UART_STATE_RESET)
 8004c26:	f890 3069 	ldrb.w	r3, [r0, #105]	@ 0x69
 8004c2a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004c2e:	b90b      	cbnz	r3, 8004c34 <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 8004c30:	f880 2068 	strb.w	r2, [r0, #104]	@ 0x68
  __HAL_UART_DISABLE(huart);
 8004c34:	6825      	ldr	r5, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004c36:	2324      	movs	r3, #36	@ 0x24
 8004c38:	f884 3069 	strb.w	r3, [r4, #105]	@ 0x69
  __HAL_UART_DISABLE(huart);
 8004c3c:	682b      	ldr	r3, [r5, #0]
 8004c3e:	f023 0301 	bic.w	r3, r3, #1
 8004c42:	602b      	str	r3, [r5, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c44:	4620      	mov	r0, r4
 8004c46:	f7ff fedb 	bl	8004a00 <UART_SetConfig>
 8004c4a:	2801      	cmp	r0, #1
 8004c4c:	d010      	beq.n	8004c70 <HAL_UART_Init+0x50>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c4e:	686b      	ldr	r3, [r5, #4]
 8004c50:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8004c54:	606b      	str	r3, [r5, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c56:	68ab      	ldr	r3, [r5, #8]
 8004c58:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8004c5c:	60ab      	str	r3, [r5, #8]
  __HAL_UART_ENABLE(huart);
 8004c5e:	682b      	ldr	r3, [r5, #0]
 8004c60:	f043 0301 	orr.w	r3, r3, #1
 8004c64:	602b      	str	r3, [r5, #0]
  return UART_CheckIdleState(huart);
 8004c66:	4620      	mov	r0, r4
}
 8004c68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return UART_CheckIdleState(huart);
 8004c6c:	f7ff bfa7 	b.w	8004bbe <UART_CheckIdleState>
}
 8004c70:	2001      	movs	r0, #1
 8004c72:	bd38      	pop	{r3, r4, r5, pc}

08004c74 <HAL_UART_Transmit>:
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c76:	461e      	mov	r6, r3
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8004c78:	f890 3069 	ldrb.w	r3, [r0, #105]	@ 0x69
 8004c7c:	2b20      	cmp	r3, #32
{
 8004c7e:	460d      	mov	r5, r1
 8004c80:	4604      	mov	r4, r0
 8004c82:	4611      	mov	r1, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8004c84:	d14a      	bne.n	8004d1c <HAL_UART_Transmit+0xa8>
  {
    if((pData == NULL ) || (Size == 0U))
 8004c86:	2d00      	cmp	r5, #0
 8004c88:	d046      	beq.n	8004d18 <HAL_UART_Transmit+0xa4>
 8004c8a:	2a00      	cmp	r2, #0
 8004c8c:	d044      	beq.n	8004d18 <HAL_UART_Transmit+0xa4>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004c8e:	f890 3068 	ldrb.w	r3, [r0, #104]	@ 0x68
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d042      	beq.n	8004d1c <HAL_UART_Transmit+0xa8>
 8004c96:	2301      	movs	r3, #1
 8004c98:	f880 3068 	strb.w	r3, [r0, #104]	@ 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	66c3      	str	r3, [r0, #108]	@ 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ca0:	2321      	movs	r3, #33	@ 0x21
 8004ca2:	f880 3069 	strb.w	r3, [r0, #105]	@ 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004ca6:	f7ff faf9 	bl	800429c <HAL_GetTick>

    huart->TxXferSize = Size;
 8004caa:	f8a4 1050 	strh.w	r1, [r4, #80]	@ 0x50
    tickstart = HAL_GetTick();
 8004cae:	4607      	mov	r7, r0
    huart->TxXferCount = Size;
 8004cb0:	f8a4 1052 	strh.w	r1, [r4, #82]	@ 0x52
    while(huart->TxXferCount > 0U)
 8004cb4:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
 8004cb8:	b292      	uxth	r2, r2
 8004cba:	b962      	cbnz	r2, 8004cd6 <HAL_UART_Transmit+0x62>
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cbc:	9600      	str	r6, [sp, #0]
 8004cbe:	463b      	mov	r3, r7
 8004cc0:	2140      	movs	r1, #64	@ 0x40
 8004cc2:	4620      	mov	r0, r4
 8004cc4:	f7ff ff4a 	bl	8004b5c <UART_WaitOnFlagUntilTimeout>
 8004cc8:	b998      	cbnz	r0, 8004cf2 <HAL_UART_Transmit+0x7e>
    {
      return HAL_TIMEOUT;
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cca:	2320      	movs	r3, #32
 8004ccc:	f884 3069 	strb.w	r3, [r4, #105]	@ 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004cd0:	f884 0068 	strb.w	r0, [r4, #104]	@ 0x68

    return HAL_OK;
 8004cd4:	e00e      	b.n	8004cf4 <HAL_UART_Transmit+0x80>
      huart->TxXferCount--;
 8004cd6:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
 8004cda:	3a01      	subs	r2, #1
 8004cdc:	b292      	uxth	r2, r2
 8004cde:	f8a4 2052 	strh.w	r2, [r4, #82]	@ 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ce2:	463b      	mov	r3, r7
 8004ce4:	9600      	str	r6, [sp, #0]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	2180      	movs	r1, #128	@ 0x80
 8004cea:	4620      	mov	r0, r4
 8004cec:	f7ff ff36 	bl	8004b5c <UART_WaitOnFlagUntilTimeout>
 8004cf0:	b110      	cbz	r0, 8004cf8 <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 8004cf2:	2003      	movs	r0, #3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8004cf4:	b003      	add	sp, #12
 8004cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cf8:	68a3      	ldr	r3, [r4, #8]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8004cfa:	6822      	ldr	r2, [r4, #0]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d00:	d107      	bne.n	8004d12 <HAL_UART_Transmit+0x9e>
 8004d02:	6923      	ldr	r3, [r4, #16]
 8004d04:	b92b      	cbnz	r3, 8004d12 <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8004d06:	f835 3b02 	ldrh.w	r3, [r5], #2
 8004d0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8004d0e:	8513      	strh	r3, [r2, #40]	@ 0x28
 8004d10:	e7d0      	b.n	8004cb4 <HAL_UART_Transmit+0x40>
 8004d12:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004d16:	e7fa      	b.n	8004d0e <HAL_UART_Transmit+0x9a>
      return  HAL_ERROR;
 8004d18:	2001      	movs	r0, #1
 8004d1a:	e7eb      	b.n	8004cf4 <HAL_UART_Transmit+0x80>
    __HAL_LOCK(huart);
 8004d1c:	2002      	movs	r0, #2
 8004d1e:	e7e9      	b.n	8004cf4 <HAL_UART_Transmit+0x80>

08004d20 <HAL_UART_Receive>:
  * @param Size: amount of data to be received.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d20:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004d24:	461e      	mov	r6, r3
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0U;

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8004d26:	f890 306a 	ldrb.w	r3, [r0, #106]	@ 0x6a
 8004d2a:	2b20      	cmp	r3, #32
{
 8004d2c:	460d      	mov	r5, r1
 8004d2e:	4604      	mov	r4, r0
 8004d30:	4611      	mov	r1, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 8004d32:	d15c      	bne.n	8004dee <HAL_UART_Receive+0xce>
  {
    if((pData == NULL ) || (Size == 0U))
 8004d34:	2d00      	cmp	r5, #0
 8004d36:	d058      	beq.n	8004dea <HAL_UART_Receive+0xca>
 8004d38:	2a00      	cmp	r2, #0
 8004d3a:	d056      	beq.n	8004dea <HAL_UART_Receive+0xca>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d3c:	f890 3068 	ldrb.w	r3, [r0, #104]	@ 0x68
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d054      	beq.n	8004dee <HAL_UART_Receive+0xce>
 8004d44:	2301      	movs	r3, #1
 8004d46:	f880 3068 	strb.w	r3, [r0, #104]	@ 0x68

    huart->Instance->ICR = 0xFFFFFFFF;
 8004d4a:	6803      	ldr	r3, [r0, #0]
 8004d4c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004d50:	621a      	str	r2, [r3, #32]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d52:	2300      	movs	r3, #0
 8004d54:	66c3      	str	r3, [r0, #108]	@ 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d56:	2322      	movs	r3, #34	@ 0x22
 8004d58:	f880 306a 	strb.w	r3, [r0, #106]	@ 0x6a

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004d5c:	f7ff fa9e 	bl	800429c <HAL_GetTick>

    huart->RxXferSize = Size;
    huart->RxXferCount = Size;

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004d60:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize = Size;
 8004d62:	f8a4 1058 	strh.w	r1, [r4, #88]	@ 0x58
    UART_MASK_COMPUTATION(huart);
 8004d66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    tickstart = HAL_GetTick();
 8004d6a:	4680      	mov	r8, r0
    huart->RxXferCount = Size;
 8004d6c:	f8a4 105a 	strh.w	r1, [r4, #90]	@ 0x5a
    UART_MASK_COMPUTATION(huart);
 8004d70:	d115      	bne.n	8004d9e <HAL_UART_Receive+0x7e>
 8004d72:	6923      	ldr	r3, [r4, #16]
 8004d74:	b98b      	cbnz	r3, 8004d9a <HAL_UART_Receive+0x7a>
 8004d76:	f240 13ff 	movw	r3, #511	@ 0x1ff
 8004d7a:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
    uhMask = huart->Mask;
 8004d7e:	f8b4 705c 	ldrh.w	r7, [r4, #92]	@ 0x5c

    /* as long as data have to be received */
    while(huart->RxXferCount > 0U)
 8004d82:	f8b4 005a 	ldrh.w	r0, [r4, #90]	@ 0x5a
 8004d86:	b280      	uxth	r0, r0
 8004d88:	b980      	cbnz	r0, 8004dac <HAL_UART_Receive+0x8c>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004d8a:	2320      	movs	r3, #32
 8004d8c:	f884 306a 	strb.w	r3, [r4, #106]	@ 0x6a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d90:	f884 0068 	strb.w	r0, [r4, #104]	@ 0x68
  }
  else
  {
    return HAL_BUSY;
  }
}
 8004d94:	b002      	add	sp, #8
 8004d96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    UART_MASK_COMPUTATION(huart);
 8004d9a:	23ff      	movs	r3, #255	@ 0xff
 8004d9c:	e7ed      	b.n	8004d7a <HAL_UART_Receive+0x5a>
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1ed      	bne.n	8004d7e <HAL_UART_Receive+0x5e>
 8004da2:	6923      	ldr	r3, [r4, #16]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d0f8      	beq.n	8004d9a <HAL_UART_Receive+0x7a>
 8004da8:	237f      	movs	r3, #127	@ 0x7f
 8004daa:	e7e6      	b.n	8004d7a <HAL_UART_Receive+0x5a>
      huart->RxXferCount--;
 8004dac:	f8b4 205a 	ldrh.w	r2, [r4, #90]	@ 0x5a
 8004db0:	3a01      	subs	r2, #1
 8004db2:	b292      	uxth	r2, r2
 8004db4:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004db8:	4643      	mov	r3, r8
 8004dba:	9600      	str	r6, [sp, #0]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	2120      	movs	r1, #32
 8004dc0:	4620      	mov	r0, r4
 8004dc2:	f7ff fecb 	bl	8004b5c <UART_WaitOnFlagUntilTimeout>
 8004dc6:	b9a0      	cbnz	r0, 8004df2 <HAL_UART_Receive+0xd2>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dc8:	68a2      	ldr	r2, [r4, #8]
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8004dca:	6823      	ldr	r3, [r4, #0]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dcc:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 8004dd0:	d106      	bne.n	8004de0 <HAL_UART_Receive+0xc0>
 8004dd2:	6922      	ldr	r2, [r4, #16]
 8004dd4:	b922      	cbnz	r2, 8004de0 <HAL_UART_Receive+0xc0>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8004dd6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004dd8:	403b      	ands	r3, r7
 8004dda:	f825 3b02 	strh.w	r3, [r5], #2
        pData +=2U;
 8004dde:	e7d0      	b.n	8004d82 <HAL_UART_Receive+0x62>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004de0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004de2:	403b      	ands	r3, r7
 8004de4:	f805 3b01 	strb.w	r3, [r5], #1
 8004de8:	e7cb      	b.n	8004d82 <HAL_UART_Receive+0x62>
      return  HAL_ERROR;
 8004dea:	2001      	movs	r0, #1
 8004dec:	e7d2      	b.n	8004d94 <HAL_UART_Receive+0x74>
    __HAL_LOCK(huart);
 8004dee:	2002      	movs	r0, #2
 8004df0:	e7d0      	b.n	8004d94 <HAL_UART_Receive+0x74>
        return HAL_TIMEOUT;
 8004df2:	2003      	movs	r0, #3
 8004df4:	e7ce      	b.n	8004d94 <HAL_UART_Receive+0x74>
 8004df6:	0000      	movs	r0, r0

08004df8 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004df8:	4a0a      	ldr	r2, [pc, #40]	@ (8004e24 <_sbrk+0x2c>)
 8004dfa:	6811      	ldr	r1, [r2, #0]
{
 8004dfc:	b508      	push	{r3, lr}
 8004dfe:	4603      	mov	r3, r0
	if (heap_end == 0)
 8004e00:	b909      	cbnz	r1, 8004e06 <_sbrk+0xe>
		heap_end = &end;
 8004e02:	4909      	ldr	r1, [pc, #36]	@ (8004e28 <_sbrk+0x30>)
 8004e04:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
 8004e06:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8004e08:	4669      	mov	r1, sp
 8004e0a:	4403      	add	r3, r0
 8004e0c:	428b      	cmp	r3, r1
 8004e0e:	d906      	bls.n	8004e1e <_sbrk+0x26>
	{
		errno = ENOMEM;
 8004e10:	f7fb fb22 	bl	8000458 <__errno>
 8004e14:	230c      	movs	r3, #12
 8004e16:	6003      	str	r3, [r0, #0]
		return (char *) -1;
 8004e18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
	}

	heap_end += incr;

	return (char *) prev_heap_end;
}
 8004e1c:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8004e1e:	6013      	str	r3, [r2, #0]
	return (char *) prev_heap_end;
 8004e20:	e7fc      	b.n	8004e1c <_sbrk+0x24>
 8004e22:	bf00      	nop
 8004e24:	200027d4 	.word	0x200027d4
 8004e28:	20002920 	.word	0x20002920

08004e2c <Reset_Handler>:
 8004e2c:	2100      	movs	r1, #0
 8004e2e:	e003      	b.n	8004e38 <LoopCopyDataInit>

08004e30 <CopyDataInit>:
 8004e30:	4b0b      	ldr	r3, [pc, #44]	@ (8004e60 <LoopForever+0x2>)
 8004e32:	585b      	ldr	r3, [r3, r1]
 8004e34:	5043      	str	r3, [r0, r1]
 8004e36:	3104      	adds	r1, #4

08004e38 <LoopCopyDataInit>:
 8004e38:	480a      	ldr	r0, [pc, #40]	@ (8004e64 <LoopForever+0x6>)
 8004e3a:	4b0b      	ldr	r3, [pc, #44]	@ (8004e68 <LoopForever+0xa>)
 8004e3c:	1842      	adds	r2, r0, r1
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d3f6      	bcc.n	8004e30 <CopyDataInit>
 8004e42:	4a0a      	ldr	r2, [pc, #40]	@ (8004e6c <LoopForever+0xe>)
 8004e44:	e002      	b.n	8004e4c <LoopFillZerobss>

08004e46 <FillZerobss>:
 8004e46:	2300      	movs	r3, #0
 8004e48:	6013      	str	r3, [r2, #0]
 8004e4a:	3204      	adds	r2, #4

08004e4c <LoopFillZerobss>:
 8004e4c:	4b08      	ldr	r3, [pc, #32]	@ (8004e70 <LoopForever+0x12>)
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d3f9      	bcc.n	8004e46 <FillZerobss>
 8004e52:	f3af 8000 	nop.w
 8004e56:	f7fb fa7d 	bl	8000354 <__libc_init_array>
 8004e5a:	f7fd f8e7 	bl	800202c <main>

08004e5e <LoopForever>:
 8004e5e:	e7fe      	b.n	8004e5e <LoopForever>
 8004e60:	0800519c 	.word	0x0800519c
 8004e64:	20000000 	.word	0x20000000
 8004e68:	2000007c 	.word	0x2000007c
 8004e6c:	2000007c 	.word	0x2000007c
 8004e70:	20002920 	.word	0x20002920

08004e74 <BusFault_Handler>:
 8004e74:	e7fe      	b.n	8004e74 <BusFault_Handler>
 8004e76:	0000      	movs	r0, r0

08004e78 <_init>:
 8004e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e7a:	bf00      	nop
 8004e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e7e:	bc08      	pop	{r3}
 8004e80:	469e      	mov	lr, r3
 8004e82:	4770      	bx	lr

08004e84 <_fini>:
 8004e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e86:	bf00      	nop
 8004e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e8a:	bc08      	pop	{r3}
 8004e8c:	469e      	mov	lr, r3
 8004e8e:	4770      	bx	lr
