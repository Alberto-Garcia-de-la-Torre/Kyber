   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"reduce.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "reduce.c"
  18              		.section	.text.montgomery_reduce,"ax",%progbits
  19              		.align	1
  20              		.global	montgomery_reduce
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	montgomery_reduce:
  26              	.LVL0:
  27              	.LFB0:
   1:reduce.c      **** #include <stdint.h>
   2:reduce.c      **** #include "params.h"
   3:reduce.c      **** #include "reduce.h"
   4:reduce.c      **** 
   5:reduce.c      **** /*************************************************
   6:reduce.c      **** * Name:        montgomery_reduce
   7:reduce.c      **** *
   8:reduce.c      **** * Description: Montgomery reduction; given a 32-bit integer a, computes
   9:reduce.c      **** *              16-bit integer congruent to a * R^-1 mod q, where R=2^16
  10:reduce.c      **** *
  11:reduce.c      **** * Arguments:   - int32_t a: input integer to be reduced;
  12:reduce.c      **** *                           has to be in {-q2^15,...,q2^15-1}
  13:reduce.c      **** *
  14:reduce.c      **** * Returns:     integer in {-q+1,...,q-1} congruent to a * R^-1 modulo q.
  15:reduce.c      **** **************************************************/
  16:reduce.c      **** int16_t montgomery_reduce(int32_t a)
  17:reduce.c      **** {
  28              		.loc 1 17 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  18:reduce.c      ****   int16_t t;
  33              		.loc 1 18 3 view .LVU1
  19:reduce.c      **** 
  20:reduce.c      ****   t = (int16_t)a*QINV;
  34              		.loc 1 20 3 view .LVU2
  21:reduce.c      ****   t = (a - (int32_t)t*KYBER_Q) >> 16;
  35              		.loc 1 21 3 view .LVU3
  20:reduce.c      ****   t = (a - (int32_t)t*KYBER_Q) >> 16;
  36              		.loc 1 20 17 is_stmt 0 view .LVU4
  37 0000 00EB4003 		add	r3, r0, r0, lsl #1
  38 0004 03EBC303 		add	r3, r3, r3, lsl #3
  39 0008 03EBC303 		add	r3, r3, r3, lsl #3
  40 000c 00EB0323 		add	r3, r0, r3, lsl #8
  41              		.loc 1 21 10 view .LVU5
  42 0010 4FF2FF22 		movw	r2, #62207
  43 0014 13FB0200 		smlabb	r0, r3, r2, r0
  44              	.LVL1:
  22:reduce.c      ****   return t;
  45              		.loc 1 22 3 is_stmt 1 view .LVU6
  23:reduce.c      **** }
  46              		.loc 1 23 1 is_stmt 0 view .LVU7
  47 0018 0014     		asrs	r0, r0, #16
  48              	.LVL2:
  49              		.loc 1 23 1 view .LVU8
  50 001a 7047     		bx	lr
  51              		.cfi_endproc
  52              	.LFE0:
  54              		.section	.text.barrett_reduce,"ax",%progbits
  55              		.align	1
  56              		.global	barrett_reduce
  57              		.syntax unified
  58              		.thumb
  59              		.thumb_func
  61              	barrett_reduce:
  62              	.LVL3:
  63              	.LFB1:
  24:reduce.c      **** 
  25:reduce.c      **** /*************************************************
  26:reduce.c      **** * Name:        barrett_reduce
  27:reduce.c      **** *
  28:reduce.c      **** * Description: Barrett reduction; given a 16-bit integer a, computes
  29:reduce.c      **** *              centered representative congruent to a mod q in {-(q-1)/2,...,(q-1)/2}
  30:reduce.c      **** *
  31:reduce.c      **** * Arguments:   - int16_t a: input integer to be reduced
  32:reduce.c      **** *
  33:reduce.c      **** * Returns:     integer in {-(q-1)/2,...,(q-1)/2} congruent to a modulo q.
  34:reduce.c      **** **************************************************/
  35:reduce.c      **** int16_t barrett_reduce(int16_t a) {
  64              		.loc 1 35 35 is_stmt 1 view -0
  65              		.cfi_startproc
  66              		@ args = 0, pretend = 0, frame = 0
  67              		@ frame_needed = 0, uses_anonymous_args = 0
  68              		@ link register save eliminated.
  36:reduce.c      ****   int16_t t;
  69              		.loc 1 36 3 view .LVU10
  37:reduce.c      ****   const int16_t v = ((1<<26) + KYBER_Q/2)/KYBER_Q;
  70              		.loc 1 37 3 view .LVU11
  38:reduce.c      **** 
  39:reduce.c      ****   t  = ((int32_t)v*a + (1<<25)) >> 26;
  71              		.loc 1 39 3 view .LVU12
  40:reduce.c      ****   t *= KYBER_Q;
  72              		.loc 1 40 3 view .LVU13
  41:reduce.c      ****   return a - t;
  73              		.loc 1 41 3 view .LVU14
  39:reduce.c      ****   t *= KYBER_Q;
  74              		.loc 1 39 22 is_stmt 0 view .LVU15
  75 0000 4FF00072 		mov	r2, #33554432
  76 0004 44F6BF63 		movw	r3, #20159
  77 0008 10FB0323 		smlabb	r3, r0, r3, r2
  39:reduce.c      ****   t *= KYBER_Q;
  78              		.loc 1 39 33 view .LVU16
  79 000c 9B16     		asrs	r3, r3, #26
  40:reduce.c      ****   t *= KYBER_Q;
  80              		.loc 1 40 5 view .LVU17
  81 000e 03EB4302 		add	r2, r3, r3, lsl #1
  82 0012 03EB8202 		add	r2, r3, r2, lsl #2
  83 0016 03EB0223 		add	r3, r3, r2, lsl #8
  84              		.loc 1 41 12 view .LVU18
  85 001a C01A     		subs	r0, r0, r3
  86              	.LVL4:
  42:reduce.c      **** }
  87              		.loc 1 42 1 view .LVU19
  88 001c 00B2     		sxth	r0, r0
  89 001e 7047     		bx	lr
  90              		.cfi_endproc
  91              	.LFE1:
  93              		.text
  94              	.Letext0:
  95              		.file 2 "/usr/lib/gcc/arm-none-eabi/13.2.1/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:00000000 reduce.c
     /tmp/ccDRkM5a.s:19     .text.montgomery_reduce:00000000 $t
     /tmp/ccDRkM5a.s:25     .text.montgomery_reduce:00000000 montgomery_reduce
     /tmp/ccDRkM5a.s:55     .text.barrett_reduce:00000000 $t
     /tmp/ccDRkM5a.s:61     .text.barrett_reduce:00000000 barrett_reduce

NO UNDEFINED SYMBOLS
