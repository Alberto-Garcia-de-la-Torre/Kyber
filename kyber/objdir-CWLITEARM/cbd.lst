   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"cbd.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "cbd.c"
  18              		.section	.text.cbd2,"ax",%progbits
  19              		.align	1
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  24              	cbd2:
  25              	.LVL0:
  26              	.LFB1:
   1:cbd.c         **** #include <stdint.h>
   2:cbd.c         **** #include "params.h"
   3:cbd.c         **** #include "cbd.h"
   4:cbd.c         **** 
   5:cbd.c         **** /*************************************************
   6:cbd.c         **** * Name:        load32_littleendian
   7:cbd.c         **** *
   8:cbd.c         **** * Description: load 4 bytes into a 32-bit integer
   9:cbd.c         **** *              in little-endian order
  10:cbd.c         **** *
  11:cbd.c         **** * Arguments:   - const uint8_t *x: pointer to input byte array
  12:cbd.c         **** *
  13:cbd.c         **** * Returns 32-bit unsigned integer loaded from x
  14:cbd.c         **** **************************************************/
  15:cbd.c         **** static uint32_t load32_littleendian(const uint8_t x[4])
  16:cbd.c         **** {
  17:cbd.c         ****   uint32_t r;
  18:cbd.c         ****   r  = (uint32_t)x[0];
  19:cbd.c         ****   r |= (uint32_t)x[1] << 8;
  20:cbd.c         ****   r |= (uint32_t)x[2] << 16;
  21:cbd.c         ****   r |= (uint32_t)x[3] << 24;
  22:cbd.c         ****   return r;
  23:cbd.c         **** }
  24:cbd.c         **** 
  25:cbd.c         **** /*************************************************
  26:cbd.c         **** * Name:        load24_littleendian
  27:cbd.c         **** *
  28:cbd.c         **** * Description: load 3 bytes into a 32-bit integer
  29:cbd.c         **** *              in little-endian order.
  30:cbd.c         **** *              This function is only needed for Kyber-512
  31:cbd.c         **** *
  32:cbd.c         **** * Arguments:   - const uint8_t *x: pointer to input byte array
  33:cbd.c         **** *
  34:cbd.c         **** * Returns 32-bit unsigned integer loaded from x (most significant byte is zero)
  35:cbd.c         **** **************************************************/
  36:cbd.c         **** #if KYBER_ETA1 == 3
  37:cbd.c         **** static uint32_t load24_littleendian(const uint8_t x[3])
  38:cbd.c         **** {
  39:cbd.c         ****   uint32_t r;
  40:cbd.c         ****   r  = (uint32_t)x[0];
  41:cbd.c         ****   r |= (uint32_t)x[1] << 8;
  42:cbd.c         ****   r |= (uint32_t)x[2] << 16;
  43:cbd.c         ****   return r;
  44:cbd.c         **** }
  45:cbd.c         **** #endif
  46:cbd.c         **** 
  47:cbd.c         **** 
  48:cbd.c         **** /*************************************************
  49:cbd.c         **** * Name:        cbd2
  50:cbd.c         **** *
  51:cbd.c         **** * Description: Given an array of uniformly random bytes, compute
  52:cbd.c         **** *              polynomial with coefficients distributed according to
  53:cbd.c         **** *              a centered binomial distribution with parameter eta=2
  54:cbd.c         **** *
  55:cbd.c         **** * Arguments:   - poly *r: pointer to output polynomial
  56:cbd.c         **** *              - const uint8_t *buf: pointer to input byte array
  57:cbd.c         **** **************************************************/
  58:cbd.c         **** static void cbd2(poly *r, const uint8_t buf[2*KYBER_N/4])
  59:cbd.c         **** {
  27              		.loc 1 59 1 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  60:cbd.c         ****   unsigned int i,j;
  31              		.loc 1 60 3 view .LVU1
  61:cbd.c         ****   uint32_t t,d;
  32              		.loc 1 61 3 view .LVU2
  62:cbd.c         ****   int16_t a,b;
  33              		.loc 1 62 3 view .LVU3
  63:cbd.c         **** 
  64:cbd.c         ****   for(i=0;i<KYBER_N/8;i++) {
  34              		.loc 1 64 3 view .LVU4
  35              		.loc 1 64 12 discriminator 1 view .LVU5
  59:cbd.c         ****   unsigned int i,j;
  36              		.loc 1 59 1 is_stmt 0 view .LVU6
  37 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  38              	.LCFI0:
  39              		.cfi_def_cfa_offset 20
  40              		.cfi_offset 4, -20
  41              		.cfi_offset 5, -16
  42              		.cfi_offset 6, -12
  43              		.cfi_offset 7, -8
  44              		.cfi_offset 14, -4
  59:cbd.c         ****   unsigned int i,j;
  45              		.loc 1 59 1 view .LVU7
  46 0002 0025     		movs	r5, #0
  47              	.LVL1:
  48              	.L3:
  65:cbd.c         ****     t  = load32_littleendian(buf+4*i);
  49              		.loc 1 65 5 is_stmt 1 view .LVU8
  50              	.LBB4:
  51              	.LBI4:
  15:cbd.c         **** {
  52              		.loc 1 15 17 view .LVU9
  53              	.LBB5:
  17:cbd.c         ****   r  = (uint32_t)x[0];
  54              		.loc 1 17 3 view .LVU10
  18:cbd.c         ****   r |= (uint32_t)x[1] << 8;
  55              		.loc 1 18 3 view .LVU11
  21:cbd.c         ****   return r;
  56              		.loc 1 21 5 is_stmt 0 view .LVU12
  57 0004 0B68     		ldr	r3, [r1]	@ unaligned
  58              	.LVL2:
  19:cbd.c         ****   r |= (uint32_t)x[2] << 16;
  59              		.loc 1 19 3 is_stmt 1 view .LVU13
  20:cbd.c         ****   r |= (uint32_t)x[3] << 24;
  60              		.loc 1 20 3 view .LVU14
  21:cbd.c         ****   return r;
  61              		.loc 1 21 3 view .LVU15
  22:cbd.c         **** }
  62              		.loc 1 22 3 view .LVU16
  22:cbd.c         **** }
  63              		.loc 1 22 3 is_stmt 0 view .LVU17
  64              	.LBE5:
  65              	.LBE4:
  66:cbd.c         ****     d  = t & 0x55555555;
  66              		.loc 1 66 5 is_stmt 1 view .LVU18
  67              		.loc 1 66 8 is_stmt 0 view .LVU19
  68 0006 03F05532 		and	r2, r3, #1431655765
  69              	.LVL3:
  67:cbd.c         ****     d += (t>>1) & 0x55555555;
  70              		.loc 1 67 5 is_stmt 1 view .LVU20
  71              		.loc 1 67 12 is_stmt 0 view .LVU21
  72 000a 5B08     		lsrs	r3, r3, #1
  73              		.loc 1 67 17 view .LVU22
  74 000c 03F05533 		and	r3, r3, #1431655765
  75              		.loc 1 67 7 view .LVU23
  76 0010 1344     		add	r3, r3, r2
  77              	.LVL4:
  68:cbd.c         **** 
  69:cbd.c         ****     for(j=0;j<8;j++) {
  78              		.loc 1 69 5 is_stmt 1 view .LVU24
  79              		.loc 1 69 14 discriminator 1 view .LVU25
  80 0012 00EB4507 		add	r7, r0, r5, lsl #1
  67:cbd.c         ****     d += (t>>1) & 0x55555555;
  81              		.loc 1 67 7 is_stmt 0 view .LVU26
  82 0016 0224     		movs	r4, #2
  83              	.LVL5:
  84              	.L2:
  70:cbd.c         ****       a = (d >> (4*j+0)) & 0x3;
  85              		.loc 1 70 7 is_stmt 1 view .LVU27
  71:cbd.c         ****       b = (d >> (4*j+2)) & 0x3;
  86              		.loc 1 71 7 view .LVU28
  72:cbd.c         ****       r->coeffs[8*i+j] = a - b;
  87              		.loc 1 72 7 view .LVU29
  70:cbd.c         ****       a = (d >> (4*j+0)) & 0x3;
  88              		.loc 1 70 21 is_stmt 0 view .LVU30
  89 0018 A21E     		subs	r2, r4, #2
  71:cbd.c         ****       b = (d >> (4*j+2)) & 0x3;
  90              		.loc 1 71 14 view .LVU31
  91 001a 23FA04F6 		lsr	r6, r3, r4
  70:cbd.c         ****       a = (d >> (4*j+0)) & 0x3;
  92              		.loc 1 70 14 view .LVU32
  93 001e 23FA02F2 		lsr	r2, r3, r2
  70:cbd.c         ****       a = (d >> (4*j+0)) & 0x3;
  94              		.loc 1 70 9 view .LVU33
  95 0022 02F00302 		and	r2, r2, #3
  71:cbd.c         ****       b = (d >> (4*j+2)) & 0x3;
  96              		.loc 1 71 9 view .LVU34
  97 0026 06F00306 		and	r6, r6, #3
  69:cbd.c         ****       a = (d >> (4*j+0)) & 0x3;
  98              		.loc 1 69 14 discriminator 1 view .LVU35
  99 002a 0434     		adds	r4, r4, #4
 100              	.LVL6:
 101              		.loc 1 72 28 view .LVU36
 102 002c 921B     		subs	r2, r2, r6
  69:cbd.c         ****       a = (d >> (4*j+0)) & 0x3;
 103              		.loc 1 69 14 discriminator 1 view .LVU37
 104 002e 222C     		cmp	r4, #34
 105              		.loc 1 72 24 view .LVU38
 106 0030 27F8022B 		strh	r2, [r7], #2	@ movhi
  69:cbd.c         ****       a = (d >> (4*j+0)) & 0x3;
 107              		.loc 1 69 18 is_stmt 1 discriminator 3 view .LVU39
  69:cbd.c         ****       a = (d >> (4*j+0)) & 0x3;
 108              		.loc 1 69 14 discriminator 1 view .LVU40
 109 0034 F0D1     		bne	.L2
  64:cbd.c         ****     t  = load32_littleendian(buf+4*i);
 110              		.loc 1 64 24 discriminator 2 view .LVU41
  64:cbd.c         ****     t  = load32_littleendian(buf+4*i);
 111              		.loc 1 64 12 discriminator 1 view .LVU42
 112 0036 0835     		adds	r5, r5, #8
 113 0038 B5F5807F 		cmp	r5, #256
 114 003c 01F10401 		add	r1, r1, #4
 115 0040 E0D1     		bne	.L3
  73:cbd.c         ****     }
  74:cbd.c         ****   }
  75:cbd.c         **** }
 116              		.loc 1 75 1 is_stmt 0 view .LVU43
 117 0042 F0BD     		pop	{r4, r5, r6, r7, pc}
 118              		.loc 1 75 1 view .LVU44
 119              		.cfi_endproc
 120              	.LFE1:
 122              		.section	.text.poly_cbd_eta1,"ax",%progbits
 123              		.align	1
 124              		.global	poly_cbd_eta1
 125              		.syntax unified
 126              		.thumb
 127              		.thumb_func
 129              	poly_cbd_eta1:
 130              	.LVL7:
 131              	.LFB2:
  76:cbd.c         **** 
  77:cbd.c         **** /*************************************************
  78:cbd.c         **** * Name:        cbd3
  79:cbd.c         **** *
  80:cbd.c         **** * Description: Given an array of uniformly random bytes, compute
  81:cbd.c         **** *              polynomial with coefficients distributed according to
  82:cbd.c         **** *              a centered binomial distribution with parameter eta=3.
  83:cbd.c         **** *              This function is only needed for Kyber-512
  84:cbd.c         **** *
  85:cbd.c         **** * Arguments:   - poly *r: pointer to output polynomial
  86:cbd.c         **** *              - const uint8_t *buf: pointer to input byte array
  87:cbd.c         **** **************************************************/
  88:cbd.c         **** #if KYBER_ETA1 == 3
  89:cbd.c         **** static void cbd3(poly *r, const uint8_t buf[3*KYBER_N/4])
  90:cbd.c         **** {
  91:cbd.c         ****   unsigned int i,j;
  92:cbd.c         ****   uint32_t t,d;
  93:cbd.c         ****   int16_t a,b;
  94:cbd.c         **** 
  95:cbd.c         ****   for(i=0;i<KYBER_N/4;i++) {
  96:cbd.c         ****     t  = load24_littleendian(buf+3*i);
  97:cbd.c         ****     d  = t & 0x00249249;
  98:cbd.c         ****     d += (t>>1) & 0x00249249;
  99:cbd.c         ****     d += (t>>2) & 0x00249249;
 100:cbd.c         **** 
 101:cbd.c         ****     for(j=0;j<4;j++) {
 102:cbd.c         ****       a = (d >> (6*j+0)) & 0x7;
 103:cbd.c         ****       b = (d >> (6*j+3)) & 0x7;
 104:cbd.c         ****       r->coeffs[4*i+j] = a - b;
 105:cbd.c         ****     }
 106:cbd.c         ****   }
 107:cbd.c         **** }
 108:cbd.c         **** #endif
 109:cbd.c         **** 
 110:cbd.c         **** void poly_cbd_eta1(poly *r, const uint8_t buf[KYBER_ETA1*KYBER_N/4])
 111:cbd.c         **** {
 132              		.loc 1 111 1 is_stmt 1 view -0
 133              		.cfi_startproc
 134              		@ args = 0, pretend = 0, frame = 0
 135              		@ frame_needed = 0, uses_anonymous_args = 0
 136              		@ link register save eliminated.
 112:cbd.c         ****   cbd2(r, buf);
 137              		.loc 1 112 3 view .LVU46
 138 0000 FFF7FEBF 		b	cbd2
 139              	.LVL8:
 140              		.loc 1 112 3 is_stmt 0 view .LVU47
 141              		.cfi_endproc
 142              	.LFE2:
 144              		.section	.text.poly_cbd_eta2,"ax",%progbits
 145              		.align	1
 146              		.global	poly_cbd_eta2
 147              		.syntax unified
 148              		.thumb
 149              		.thumb_func
 151              	poly_cbd_eta2:
 152              	.LFB5:
 153              		.cfi_startproc
 113:cbd.c         **** }
 114:cbd.c         **** 
 115:cbd.c         **** void poly_cbd_eta2(poly *r, const uint8_t buf[KYBER_ETA2*KYBER_N/4])
 154              		.loc 1 115 6 is_stmt 1 view -0
 155              		@ args = 0, pretend = 0, frame = 0
 156              		@ frame_needed = 0, uses_anonymous_args = 0
 157              		@ link register save eliminated.
 158 0000 FFF7FEBF 		b	cbd2
 159              		.cfi_endproc
 160              	.LFE5:
 162              		.text
 163              	.Letext0:
 164              		.file 2 "/usr/lib/gcc/arm-none-eabi/13.2.1/include/stdint.h"
 165              		.file 3 "poly.h"
DEFINED SYMBOLS
                            *ABS*:00000000 cbd.c
     /tmp/ccGOQuNV.s:19     .text.cbd2:00000000 $t
     /tmp/ccGOQuNV.s:24     .text.cbd2:00000000 cbd2
     /tmp/ccGOQuNV.s:123    .text.poly_cbd_eta1:00000000 $t
     /tmp/ccGOQuNV.s:129    .text.poly_cbd_eta1:00000000 poly_cbd_eta1
     /tmp/ccGOQuNV.s:145    .text.poly_cbd_eta2:00000000 $t
     /tmp/ccGOQuNV.s:151    .text.poly_cbd_eta2:00000000 poly_cbd_eta2

NO UNDEFINED SYMBOLS
